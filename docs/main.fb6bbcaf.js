// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../taggy/node_modules/emoji-regex/index.js":[function(require,module,exports) {
"use strict";

module.exports = function () {
  // https://mths.be/emoji
  return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};

},{}],"../taggy/node_modules/wink-tokenizer/src/eng-contractions.js":[function(require,module,exports) {
//     wink-tokenizer
//     Multilingual tokenizer that automatically tags each token with its type.
//
//     Copyright (C) GRAYPE Systems Private Limited
//
//     This file is part of “wink-tokenizer”.
//
//     Permission is hereby granted, free of charge, to any person obtaining a
//     copy of this software and associated documentation files (the "Software"),
//     to deal in the Software without restriction, including without limitation
//     the rights to use, copy, modify, merge, publish, distribute, sublicense,
//     and/or sell copies of the Software, and to permit persons to whom the
//     Software is furnished to do so, subject to the following conditions:
//
//     The above copyright notice and this permission notice shall be included
//     in all copies or substantial portions of the Software.
//
//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//     DEALINGS IN THE SOFTWARE.

var contractions = Object.create( null );

// Tag - word.
var word = 'word';
// Verbs.
contractions[ 'can\'t' ] = [ { value: 'ca', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'CAN\'T' ] = [ { value: 'CA', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Can\'t' ] = [ { value: 'Ca', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'Couldn\'t' ] = [ { value: 'could', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'COULDN\'T' ] = [ { value: 'COULD', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Couldn\'t' ] = [ { value: 'Could', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'don\'t' ] = [ { value: 'do', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'DON\'T' ] = [ { value: 'DO', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Don\'t' ] = [ { value: 'Do', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'doesn\'t' ] = [ { value: 'does', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'DOESN\'T' ] = [ { value: 'DOES', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Doesn\'t' ] = [ { value: 'Does', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'didn\'t' ] = [ { value: 'did', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'DIDN\'T' ] = [ { value: 'DID', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Didn\'t' ] = [ { value: 'Did', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'hadn\'t' ] = [ { value: 'had', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'HADN\'T' ] = [ { value: 'HAD', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Hadn\'t' ] = [ { value: 'Had', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'mayn\'t' ] = [ { value: 'may', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'MAYN\'T' ] = [ { value: 'MAY', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Mayn\'t' ] = [ { value: 'May', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'mightn\'t' ] = [ { value: 'might', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'MIGHTN\'T' ] = [ { value: 'MIGHT', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Mightn\'t' ] = [ { value: 'Might', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'mustn\'t' ] = [ { value: 'must', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'MUSTN\'T' ] = [ { value: 'MUST', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Mustn\'t' ] = [ { value: 'Must', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'needn\'t' ] = [ { value: 'need', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'NEEDN\'T' ] = [ { value: 'NEED', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Needn\'t' ] = [ { value: 'Need', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'oughtn\'t' ] = [ { value: 'ought', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'OUGHTN\'T' ] = [ { value: 'OUGHT', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Oughtn\'t' ] = [ { value: 'Ought', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'shan\'t' ] = [ { value: 'sha', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'SHAN\'T' ] = [ { value: 'SHA', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Shan\'t' ] = [ { value: 'Sha', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'shouldn\'t' ] = [ { value: 'should', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'SHOULDN\'T' ] = [ { value: 'SHOULD', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Shouldn\'t' ] = [ { value: 'Should', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'won\'t' ] = [ { value: 'wo', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'WON\'T' ] = [ { value: 'WO', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Won\'t' ] = [ { value: 'Wo', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'wouldn\'t' ] = [ { value: 'would', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'WOULDN\'T' ] = [ { value: 'WOULD', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Wouldn\'t' ] = [ { value: 'Would', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'ain\'t' ] = [ { value: 'ai', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'AIN\'T' ] = [ { value: 'AI', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Ain\'t' ] = [ { value: 'Ai', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'aren\'t' ] = [ { value: 'are', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'AREN\'T' ] = [ { value: 'ARE', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Aren\'t' ] = [ { value: 'Are', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'isn\'t' ] = [ { value: 'is', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'ISN\'T' ] = [ { value: 'IS', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Isn\'t' ] = [ { value: 'Is', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'wasn\'t' ] = [ { value: 'was', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'WASN\'T' ] = [ { value: 'WAS', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Wasn\'t' ] = [ { value: 'Was', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'weren\'t' ] = [ { value: 'were', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'WEREN\'T' ] = [ { value: 'WERE', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Weren\'t' ] = [ { value: 'Were', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'haven\'t' ] = [ { value: 'have', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'HAVEN\'T' ] = [ { value: 'HAVE', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Haven\'t' ] = [ { value: 'Have', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'hasn\'t' ] = [ { value: 'has', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'HASN\'T' ] = [ { value: 'HAS', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Hasn\'t' ] = [ { value: 'Has', tag: word }, { value: 'n\'t', tag: word } ];

contractions[ 'daren\'t' ] = [ { value: 'dare', tag: word }, { value: 'n\'t', tag: word } ];
contractions[ 'DAREN\'T' ] = [ { value: 'DARE', tag: word }, { value: 'N\'T', tag: word } ];
contractions[ 'Daren\'t' ] = [ { value: 'Dare', tag: word }, { value: 'n\'t', tag: word } ];


// Pronouns like I, you, they, we, she, and he.
contractions[ 'i\'m' ] = [ { value: 'i', tag: word }, { value: '\'m', tag: word } ];
contractions[ 'I\'M' ] = [ { value: 'I', tag: word }, { value: '\'M', tag: word } ];
contractions[ 'I\'m' ] = [ { value: 'I', tag: word }, { value: '\'m', tag: word } ];

contractions[ 'i\'ve' ] = [ { value: 'i', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'I\'VE' ] = [ { value: 'I', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'I\'ve' ] = [ { value: 'I', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'i\'d' ] = [ { value: 'i', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'I\'D' ] = [ { value: 'I', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'I\'d' ] = [ { value: 'I', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'i\'ll' ] = [ { value: 'i', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'I\'LL' ] = [ { value: 'I', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'I\'ll' ] = [ { value: 'I', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'you\'ve' ] = [ { value: 'you', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'YOU\'VE' ] = [ { value: 'YOU', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'You\'ve' ] = [ { value: 'You', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'you\'d' ] = [ { value: 'you', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'YOU\'D' ] = [ { value: 'YOU', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'You\'d' ] = [ { value: 'You', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'you\'ll' ] = [ { value: 'you', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'YOU\'LL' ] = [ { value: 'YOU', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'You\'ll' ] = [ { value: 'You', tag: word }, { value: '\'ll', tag: word } ];

// they - 've, 'd, 'll, 're
contractions[ 'they\'ve' ] = [ { value: 'they', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'THEY\'VE' ] = [ { value: 'THEY', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'They\'ve' ] = [ { value: 'They', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'they\'d' ] = [ { value: 'they', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'THEY\'D' ] = [ { value: 'THEY', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'They\'d' ] = [ { value: 'They', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'they\'ll' ] = [ { value: 'they', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'THEY\'LL' ] = [ { value: 'THEY', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'They\'ll' ] = [ { value: 'They', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'they\'re' ] = [ { value: 'they', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'THEY\'RE' ] = [ { value: 'THEY', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'They\'re' ] = [ { value: 'They', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'we\'ve' ] = [ { value: 'we', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'WE\'VE' ] = [ { value: 'WE', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'We\'ve' ] = [ { value: 'We', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'we\'d' ] = [ { value: 'we', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'WE\'D' ] = [ { value: 'WE', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'We\'d' ] = [ { value: 'We', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'we\'ll' ] = [ { value: 'we', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'WE\'LL' ] = [ { value: 'WE', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'We\'ll' ] = [ { value: 'We', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'we\'re' ] = [ { value: 'we', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'WE\'RE' ] = [ { value: 'WE', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'We\'re' ] = [ { value: 'We', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'she\'d' ] = [ { value: 'she', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'SHE\'D' ] = [ { value: 'SHE', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'She\'d' ] = [ { value: 'She', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'she\'ll' ] = [ { value: 'she', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'SHE\'LL' ] = [ { value: 'SHE', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'She\'ll' ] = [ { value: 'She', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'she\'s' ] = [ { value: 'she', tag: word }, { value: '\'s', tag: word } ];
contractions[ 'SHE\'S' ] = [ { value: 'SHE', tag: word }, { value: '\'S', tag: word } ];
contractions[ 'She\'s' ] = [ { value: 'She', tag: word }, { value: '\'s', tag: word } ];

contractions[ 'he\'d' ] = [ { value: 'he', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'HE\'D' ] = [ { value: 'HE', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'He\'d' ] = [ { value: 'He', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'he\'ll' ] = [ { value: 'he', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'HE\'LL' ] = [ { value: 'HE', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'He\'ll' ] = [ { value: 'He', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'he\'s' ] = [ { value: 'he', tag: word }, { value: '\'s', tag: word } ];
contractions[ 'HE\'S' ] = [ { value: 'HE', tag: word }, { value: '\'S', tag: word } ];
contractions[ 'He\'s' ] = [ { value: 'He', tag: word }, { value: '\'s', tag: word } ];

contractions[ 'it\'d' ] = [ { value: 'it', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'IT\'D' ] = [ { value: 'IT', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'It\'d' ] = [ { value: 'It', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'it\'ll' ] = [ { value: 'it', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'IT\'LL' ] = [ { value: 'IT', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'It\'ll' ] = [ { value: 'It', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'it\'s' ] = [ { value: 'it', tag: word }, { value: '\'s', tag: word } ];
contractions[ 'IT\'S' ] = [ { value: 'IT', tag: word }, { value: '\'S', tag: word } ];
contractions[ 'It\'s' ] = [ { value: 'It', tag: word }, { value: '\'s', tag: word } ];

// Wh Pronouns - what, who, when, where, why, how, there, that
contractions[ 'what\'ve' ] = [ { value: 'what', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'WHAT\'VE' ] = [ { value: 'WHAT', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'What\'ve' ] = [ { value: 'What', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'what\'d' ] = [ { value: 'what', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'WHAT\'D' ] = [ { value: 'WHAT', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'What\'d' ] = [ { value: 'What', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'what\'ll' ] = [ { value: 'what', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'WHAT\'LL' ] = [ { value: 'WHAT', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'What\'ll' ] = [ { value: 'What', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'what\'re' ] = [ { value: 'what', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'WHAT\'RE' ] = [ { value: 'WHAT', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'What\'re' ] = [ { value: 'What', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'who\'ve' ] = [ { value: 'who', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'WHO\'VE' ] = [ { value: 'WHO', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Who\'ve' ] = [ { value: 'Who', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'who\'d' ] = [ { value: 'who', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'WHO\'D' ] = [ { value: 'WHO', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'Who\'d' ] = [ { value: 'Who', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'who\'ll' ] = [ { value: 'who', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'WHO\'LL' ] = [ { value: 'WHO', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'Who\'ll' ] = [ { value: 'Who', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'who\'re' ] = [ { value: 'who', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'WHO\'RE' ] = [ { value: 'WHO', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'Who\'re' ] = [ { value: 'Who', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'when\'ve' ] = [ { value: 'when', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'WHEN\'VE' ] = [ { value: 'WHEN', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'When\'ve' ] = [ { value: 'When', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'when\'d' ] = [ { value: 'when', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'WHEN\'D' ] = [ { value: 'WHEN', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'When\'d' ] = [ { value: 'When', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'when\'ll' ] = [ { value: 'when', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'WHEN\'LL' ] = [ { value: 'WHEN', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'When\'ll' ] = [ { value: 'When', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'when\'re' ] = [ { value: 'when', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'WHEN\'RE' ] = [ { value: 'WHEN', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'When\'re' ] = [ { value: 'When', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'where\'ve' ] = [ { value: 'where', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'WHERE\'VE' ] = [ { value: 'WHERE', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Where\'ve' ] = [ { value: 'Where', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'where\'d' ] = [ { value: 'where', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'WHERE\'D' ] = [ { value: 'WHERE', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'Where\'d' ] = [ { value: 'Where', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'where\'ll' ] = [ { value: 'where', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'WHERE\'LL' ] = [ { value: 'WHERE', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'Where\'ll' ] = [ { value: 'Where', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'where\'re' ] = [ { value: 'where', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'WHERE\'RE' ] = [ { value: 'WHERE', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'Where\'re' ] = [ { value: 'Where', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'why\'ve' ] = [ { value: 'why', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'WHY\'VE' ] = [ { value: 'WHY', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Why\'ve' ] = [ { value: 'Why', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'why\'d' ] = [ { value: 'why', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'WHY\'D' ] = [ { value: 'WHY', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'Why\'d' ] = [ { value: 'Why', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'why\'ll' ] = [ { value: 'why', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'WHY\'LL' ] = [ { value: 'WHY', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'Why\'ll' ] = [ { value: 'Why', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'why\'re' ] = [ { value: 'why', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'WHY\'RE' ] = [ { value: 'WHY', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'Why\'re' ] = [ { value: 'Why', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'how\'ve' ] = [ { value: 'how', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'HOW\'VE' ] = [ { value: 'HOW', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'How\'ve' ] = [ { value: 'How', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'how\'d' ] = [ { value: 'how', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'HOW\'D' ] = [ { value: 'HOW', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'How\'d' ] = [ { value: 'How', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'how\'ll' ] = [ { value: 'how', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'HOW\'LL' ] = [ { value: 'HOW', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'How\'ll' ] = [ { value: 'How', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'how\'re' ] = [ { value: 'how', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'HOW\'RE' ] = [ { value: 'HOW', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'How\'re' ] = [ { value: 'How', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'there\'ve' ] = [ { value: 'there', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'THERE\'VE' ] = [ { value: 'THERE', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'There\'ve' ] = [ { value: 'There', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'there\'d' ] = [ { value: 'there', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'THERE\'D' ] = [ { value: 'THERE', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'There\'d' ] = [ { value: 'There', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'there\'ll' ] = [ { value: 'there', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'THERE\'LL' ] = [ { value: 'THERE', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'There\'ll' ] = [ { value: 'There', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'there\'re' ] = [ { value: 'there', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'THERE\'RE' ] = [ { value: 'THERE', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'There\'re' ] = [ { value: 'There', tag: word }, { value: '\'re', tag: word } ];

contractions[ 'that\'ve' ] = [ { value: 'that', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'THAT\'VE' ] = [ { value: 'THAT', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'That\'ve' ] = [ { value: 'That', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'that\'d' ] = [ { value: 'that', tag: word }, { value: '\'d', tag: word } ];
contractions[ 'THAT\'D' ] = [ { value: 'THAT', tag: word }, { value: '\'D', tag: word } ];
contractions[ 'That\'d' ] = [ { value: 'That', tag: word }, { value: '\'d', tag: word } ];

contractions[ 'that\'ll' ] = [ { value: 'that', tag: word }, { value: '\'ll', tag: word } ];
contractions[ 'THAT\'LL' ] = [ { value: 'THAT', tag: word }, { value: '\'LL', tag: word } ];
contractions[ 'That\'ll' ] = [ { value: 'That', tag: word }, { value: '\'ll', tag: word } ];

contractions[ 'that\'re' ] = [ { value: 'that', tag: word }, { value: '\'re', tag: word } ];
contractions[ 'THAT\'RE' ] = [ { value: 'THAT', tag: word }, { value: '\'RE', tag: word } ];
contractions[ 'That\'re' ] = [ { value: 'That', tag: word }, { value: '\'re', tag: word } ];

// Let us!
contractions[ 'let\'s' ] = [ { value: 'let', tag: word }, { value: '\'s', tag: word } ];
contractions[ 'LET\'S' ] = [ { value: 'THAT', tag: word }, { value: '\'S', tag: word } ];
contractions[ 'Let\'s' ] = [ { value: 'Let', tag: word }, { value: '\'s', tag: word } ];

contractions[ 'could\'ve' ] = [ { value: 'could', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'COULD\'VE' ] = [ { value: 'COULD', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Could\'ve' ] = [ { value: 'Could', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'should\'ve' ] = [ { value: 'should', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'SHOULD\'VE' ] = [ { value: 'SHOULD', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Should\'ve' ] = [ { value: 'Should', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'would\'ve' ] = [ { value: 'would', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'WOULD\'VE' ] = [ { value: 'WOULD', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Would\'ve' ] = [ { value: 'Would', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'i\'ll\'ve' ] = [ { value: 'i', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'I\'LL\'VE' ] = [ { value: 'I', tag: word }, { value: '\'LL', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'I\'ll\'ve' ] = [ { value: 'I', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'you\'ll\'ve' ] = [ { value: 'you', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'YOU\'LL\'VE' ] = [ { value: 'YOU', tag: word }, { value: '\'LL', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'You\'ll\'ve' ] = [ { value: 'You', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'they\'ll\'ve' ] = [ { value: 'they', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'THEY\'LL\'VE' ] = [ { value: 'THEY', tag: word }, { value: '\'LL', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'They\'ll\'ve' ] = [ { value: 'They', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'it\'ll\'ve' ] = [ { value: 'it', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'IT\'LL\'VE' ] = [ { value: 'IT', tag: word }, { value: '\'LL', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'It\'ll\'ve' ] = [ { value: 'It', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'he\'ll\'ve' ] = [ { value: 'he', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'HE\'LL\'VE' ] = [ { value: 'HE', tag: word }, { value: '\'LL', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'He\'ll\'ve' ] = [ { value: 'He', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'she\'ll\'ve' ] = [ { value: 'she', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'SHE\'LL\'VE' ] = [ { value: 'SHE', tag: word }, { value: '\'LL', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'She\'ll\'ve' ] = [ { value: 'She', tag: word }, { value: '\'ll', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'shouldn\'t\'ve' ] = [ { value: 'should', tag: word }, { value: 'n\'t', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'SHOULDN\'T\'VE' ] = [ { value: 'SHOULD', tag: word }, { value: 'N\'T', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Shouldn\'t\'ve' ] = [ { value: 'Should', tag: word }, { value: 'n\'t', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'couldn\'t\'ve' ] = [ { value: 'could', tag: word }, { value: 'n\'t', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'COULDN\'T\'VE' ] = [ { value: 'COULD', tag: word }, { value: 'N\'T', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Couldn\'t\'ve' ] = [ { value: 'Could', tag: word }, { value: 'n\'t', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'wouldn\'t\'ve' ] = [ { value: 'would', tag: word }, { value: 'n\'t', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'WOULDN\'T\'VE' ] = [ { value: 'WOULD', tag: word }, { value: 'N\'T', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'Wouldn\'t\'ve' ] = [ { value: 'Would', tag: word }, { value: 'n\'t', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'i\'d\'ve' ] = [ { value: 'i', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'I\'D\'VE' ] = [ { value: 'I', tag: word }, { value: '\'D', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'I\'d\'ve' ] = [ { value: 'I', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'you\'d\'ve' ] = [ { value: 'you', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'YOU\'D\'VE' ] = [ { value: 'YOU', tag: word }, { value: '\'D', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'You\'d\'ve' ] = [ { value: 'You', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'he\'d\'ve' ] = [ { value: 'he', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'HE\'D\'VE' ] = [ { value: 'HE', tag: word }, { value: '\'D', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'He\'d\'ve' ] = [ { value: 'He', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'she\'d\'ve' ] = [ { value: 'she', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'SHE\'D\'VE' ] = [ { value: 'SHE', tag: word }, { value: '\'D', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'She\'d\'ve' ] = [ { value: 'She', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'you\'d\'ve' ] = [ { value: 'you', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'YOU\'D\'VE' ] = [ { value: 'YOU', tag: word }, { value: '\'D', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'You\'d\'ve' ] = [ { value: 'You', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'they\'d\'ve' ] = [ { value: 'they', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'THEY\'D\'VE' ] = [ { value: 'THEY', tag: word }, { value: '\'D', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'They\'d\'ve' ] = [ { value: 'They', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'there\'d\'ve' ] = [ { value: 'there', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'THERE\'D\'VE' ] = [ { value: 'THERE', tag: word }, { value: '\'D', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'There\'d\'ve' ] = [ { value: 'There', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];

contractions[ 'it\'d\'ve' ] = [ { value: 'it', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];
contractions[ 'IT\'D\'VE' ] = [ { value: 'IT', tag: word }, { value: '\'D', tag: word }, { value: '\'VE', tag: word } ];
contractions[ 'It\'d\'ve' ] = [ { value: 'It', tag: word }, { value: '\'d', tag: word }, { value: '\'ve', tag: word } ];

module.exports = contractions;

},{}],"../taggy/node_modules/wink-tokenizer/src/wink-tokenizer.js":[function(require,module,exports) {
//     wink-tokenizer
//     Multilingual tokenizer that automatically tags each token with its type.
//
//     Copyright (C) GRAYPE Systems Private Limited
//
//     This file is part of “wink-tokenizer”.
//
//     Permission is hereby granted, free of charge, to any person obtaining a
//     copy of this software and associated documentation files (the "Software"),
//     to deal in the Software without restriction, including without limitation
//     the rights to use, copy, modify, merge, publish, distribute, sublicense,
//     and/or sell copies of the Software, and to permit persons to whom the
//     Software is furnished to do so, subject to the following conditions:
//
//     The above copyright notice and this permission notice shall be included
//     in all copies or substantial portions of the Software.
//
//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//     DEALINGS IN THE SOFTWARE.

//
var emojiRegex = require( 'emoji-regex' );
var contractions = require( './eng-contractions.js' );
var rgxSpaces = /\s+/g;
// Ordinals only for Latin like 1st, 2nd or 12th or 33rd.
var rgxOrdinalL1 = /1\dth|[04-9]th|1st|2nd|3rd|[02-9]1st|[02-9]2nd|[02-9]3rd|[02-9][04-9]th|\d+\d[04-9]th|\d+\d1st|\d+\d2nd|\d+\d3rd/g;
// Apart from detecting pure integers or decimals, also detect numbers containing
// `. - / ,` so that dates, ip address, fractions and things like codes or part
// numbers are also detected as numbers only. These regex will therefore detected
// 8.8.8.8 or 12-12-1924 or 1,1,1,1.00 or 1/4 or 1/4/66/777 as numbers.
// Latin-1 Numbers.
var rgxNumberL1 = /\d+\/\d+|\d(?:[\.,-\/]?\d)*(?:\.\d+)?/g;
// Devanagari Numbers.
var rgxNumberDV = /[\u0966-\u096F]+\/[\u0966-\u096F]+|[\u0966-\u096F](?:[\.,-\/]?[\u0966-\u096F])*(?:\.[\u0966-\u096F]+)?/g;
var rgxMention = /@\w+/g;
// Latin-1 Hashtags.
// Include entire Latin-1 script and not just English alphas.
var rgxHashtagL1 = /#[a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF_][a-z0-9\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF_]*/gi;
// Devanagari Hashtags
var rgxHashtagDV = /#[\u0900-\u0963\u0970-\u097F_][\u0900-\u0963\u0970-\u097F\u0966-\u096F0-9_]*/gi;
// EMail is EN character set.
var rgxEmail = /[-!#$%&'*+\/=?^\w{|}~](?:\.?[-!#$%&'*+\/=?^\w`{|}~])*@[a-z0-9](?:-?\.?[a-z0-9])*(?:\.[a-z](?:-?[a-z0-9])*)+/gi;
// Bitcoin, Ruble, Indian Rupee, Other Rupee, Dollar, Pound, Yen, Euro, Wong.
var rgxCurrency = /[₿₽₹₨$£¥€₩]/g;
// These include both the punctuations: Latin-1 & Devanagari.
var rgxPunctuation = /[’'‘’`“”"\[\]\(\){}…,\.!;\?\-:\u0964\u0965]/g;
var rgxQuotedPhrase = /"[^"]*"/g;
// NOTE: URL will support only EN character set for now.
var rgxURL = /(?:https?:\/\/)(?:[\da-z\.-]+)\.(?:[a-z\.]{2,6})(?:[\/\w\.\-\?#=]*)*\/?/gi;
var rgxEmoji = emojiRegex();
var rgxEmoticon = /:-?[dps\*\/\[\]{}\(\)]|;-?[/(/)d]|<3/gi;
var rgxTime = /(?:\d|[01]\d|2[0-3]):?(?:[0-5][0-9])?\s?(?:[ap]\.?m\.?|hours|hrs)/gi;
// Inlcude [Latin-1 Supplement Unicode Block](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block))
var rgxWordL1 = /[a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF][a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF']*/gi;
// Define [Devanagari Unicode Block](https://unicode.org/charts/PDF/U0900.pdf)
var rgxWordDV = /[\u0900-\u094F\u0951-\u0963\u0970-\u097F]+/gi;
// Symbols go here; including Om.
var rgxSymbol = /[\u0950~@#%\^\+=\*\|\/<>&]/g;
// For detecting if the word is a potential contraction.
var rgxContraction = /'/;
// Singular & Plural possessive
var rgxPosSingular = /([a-z]+)('s)$/i;
var rgxPosPlural = /([a-z]+s)(')$/i;
// Regexes and their categories; used for tokenizing via match/split. The
// sequence is *critical* for correct tokenization.
var rgxsMaster = [
  { regex: rgxQuotedPhrase, category: 'quoted_phrase' },
  { regex: rgxURL, category: 'url' },
  { regex: rgxEmail, category: 'email' },
  { regex: rgxMention, category: 'mention' },
  { regex: rgxHashtagL1, category: 'hashtag' },
  { regex: rgxHashtagDV, category: 'hashtag' },
  { regex: rgxEmoji, category: 'emoji' },
  { regex: rgxEmoticon, category: 'emoticon' },
  { regex: rgxTime, category: 'time' },
  { regex: rgxOrdinalL1, category: 'ordinal' },
  { regex: rgxNumberL1, category: 'number' },
  { regex: rgxNumberDV, category: 'number' },
  { regex: rgxCurrency, category: 'currency' },
  { regex: rgxWordL1, category: 'word' },
  { regex: rgxWordDV, category: 'word' },
  { regex: rgxPunctuation, category: 'punctuation' },
  { regex: rgxSymbol, category: 'symbol' }
];

// Used to generate finger print from the tokens.
// NOTE: this variable is being reset in `defineConfig()`.
var fingerPrintCodes = {
  emoticon: 'c',
  email: 'e',
  emoji: 'j',
  hashtag: 'h',
  mention: 'm',
  number: 'n',
  ordinal: 'o',
  quoted_phrase: 'q', // eslint-disable-line camelcase
  currency: 'r',
  // symbol: 's',
  time: 't',
  url: 'u',
  word: 'w',
  alien: 'z'
};

// ### tokenizer
/**
 *
 * Creates an instance of {@link Tokenizer}.
 *
 * @return {Tokenizer} object conatining set of API methods for tokenizing a sentence
 * and defining configuration, plugin etc.
 * @example
 * // Load wink tokenizer.
 * var tokenizer = require( 'wink-tokenizer' );
 * // Create your instance of wink tokenizer.
 * var myTokenizer = tokenizer();
*/
var tokenizer = function () {
  // Default configuration: most comprehensive tokenization. Make deep copy!
  var rgxs = rgxsMaster.slice( 0 );
  // The result of last call to `tokenize()` is retained here.
  var finalTokens = [];
  // Returned!

  /**
   * @classdesc Tokenizer class
   * @class Tokenizer
   * @hideconstructor
   */
  var methods = Object.create( null );

  // ### manageContraction
  /**
   *
   * Splits a contractions into words by first trying a lookup in strandard
   * `contractions`; if the lookup fails, it checks for possessive in `'s` or
   * `s'` forms and separates the possesive part from the word. Otherwise the
   * contraction is treated as a normal word and no splitting occurs.
   *
   * @param {string} word that could be a potential conraction.
   * @param {object[]} tokens where the outcome is pushed.
   * @return {object[]} updated tokens according to the `word.`
   * @private
  */
  var manageContraction = function ( word, tokens ) {
    var ct = contractions[ word ];
    var matches;
    if ( ct === undefined ) {
      // Try possesive of sigular & plural forms
      matches = word.match( rgxPosSingular );
      if ( matches ) {
        tokens.push( { value: matches[ 1 ], tag: 'word' } );
        tokens.push( { value: matches[ 2 ], tag: 'word' } );
      } else {
        matches = word.match( rgxPosPlural );
        if ( matches ) {
          tokens.push( { value: matches[ 1 ], tag: 'word' } );
          tokens.push( { value: matches[ 2 ], tag: 'word' } );
        } else tokens.push( { value: word, tag: 'word' } );
      }
    } else {
      // Manage via lookup; ensure cloning!
      tokens.push( Object.assign( {}, ct[ 0 ] ) );
      tokens.push( Object.assign( {}, ct[ 1 ] ) );
      if ( ct[ 2 ] ) tokens.push( Object.assign( {}, ct[ 2 ] ) );
    }
    return tokens;
  }; // manageContraction()

  // ### tokenizeTextUnit
  /**
   *
   * Attempts to tokenize the input `text` using the `rgxSplit`. The tokenization
   * is carried out by combining the regex matches and splits in the right sequence.
   * The matches are the *real tokens*, whereas splits are text units that are
   * tokenized in later rounds! The real tokens (i.e. matches) are pushed as
   * `object` and splits as `string`.
   *
   * @param {string} text unit that is to be tokenized.
   * @param {object} rgxSplit object containing the regex and it's category.
   * @return {array} of tokens.
   * @private
  */
  var tokenizeTextUnit = function ( text, rgxSplit ) {
    // Regex matches go here; note each match is a token and has the same tag
    // as of regex's category.
    var matches = text.match( rgxSplit.regex );
    // Balance is "what needs to be tokenized".
    var balance = text.split( rgxSplit.regex );
    // The result, in form of combination of tokens & matches, is captured here.
    var tokens = [];
    // The tag;
    var tag = rgxSplit.category;
    // Helper variables.
    var aword,
        i,
        imax,
        k = 0,
        t;

    // Combine tokens & matches in the following pattern [ b0 m0 b1 m1 ... ]
    matches = ( matches ) ? matches : [];
    for ( i = 0, imax = balance.length; i < imax; i += 1 ) {
      t = balance[ i ];
      t = t.trim();
      if ( t ) tokens.push( t );
      if ( k < matches.length ) {
        if ( tag === 'word' ) {
          // Tag type `word` token may have a contraction.
          aword = matches[ k ];
          if ( rgxContraction.test( aword ) ) {
            tokens = manageContraction( aword, tokens );
          } else {
            // Means there is no contraction.
            tokens.push( { value: aword, tag: tag } );
          }
        } else tokens.push( { value: matches[ k ], tag: tag } );
      }
      k += 1;
    }

    return ( tokens );
  }; // tokenizeTextUnit()

  // ### tokenizeTextRecursively
  /**
   *
   * Tokenizes the input text recursively using the array of `regexes` and then
   * the `tokenizeTextUnit()` function. If (or whenever) the `regexes` becomes
   * empty, it simply splits the text on non-word characters instead of using
   * the `tokenizeTextUnit()` function.
   *
   * @param {string} text unit that is to be tokenized.
   * @param {object} regexes object containing the regex and it's category.
   * @return {undefined} nothing!
   * @private
  */
  var tokenizeTextRecursively = function ( text, regexes ) {
    var sentence = text.trim();
    var tokens = [];
    var i, imax;

    if ( !regexes.length ) {
      // No regex left, split on `spaces` and tag every token as **alien**.
      text.split( rgxSpaces ).forEach( function ( tkn ) {
        finalTokens.push( { value: tkn.trim(), tag: 'alien' } );
      } );
      return;
    }

    var rgx = regexes[ 0 ];
    tokens = tokenizeTextUnit( sentence, rgx );

    for ( i = 0, imax = tokens.length; i < imax; i += 1 ) {
      if ( typeof tokens[ i ] === 'string' ) {
        // Strings become candidates for further tokenization.
        tokenizeTextRecursively( tokens[ i ], regexes.slice( 1 ) );
      } else {
        finalTokens.push( tokens[ i ] );
      }
    }
  }; // tokenizeTextRecursively()

  // ### defineConfig
  /**
   *
   * Defines the configuration in terms of the types of token that will be
   * extracted by [`tokenize()`](#tokenize) method. Note by default, all types
   * of tokens will be detected and tagged automatically.
   *
   * @method Tokenizer#defineConfig
   * @param {object} config It defines 0 or more properties from the list of
   * **14** properties. A true value for a property ensures tokenization
   * for that type of text; whereas false value will mean that the tokenization of that
   * type of text will not be attempted. It also **resets** the effect of any previous
   * call(s) to the [`addRegex()`](#addregex) API.
   *
   * *An empty config object is equivalent to splitting on spaces. Whatever tokens
   * are created like this are tagged as **alien** and **`z`** is the
   * [finger print](#gettokensfp) code of this token type.*
   *
   * The table below gives the name of each property and it's description including
   * examples. The character with in paranthesis is the [finger print](#gettokensfp) code for the
   * token of that type.
   * @param {boolean} [config.currency=true] such as **$** or **£** symbols (**`r`**)
   * @param {boolean} [config.email=true] for example **john@acme.com** or **superman1@gmail.com** (**`e`**)
   * @param {boolean} [config.emoji=true] any standard unicode emojis e.g. 😊 or 😂 or 🎉 (**`j`**)
   * @param {boolean} [config.emoticon=true] common emoticons such as **`:-)`** or **`:D`** (**`c`**)
   * @param {boolean} [config.hashtag=true] hash tags such as **`#happy`** or **`#followme`** (**`h`**)
   * @param {boolean} [config.number=true] any integer, decimal number, fractions such as **19**, **2.718**
   * or **1/4** and numerals containing "**`, - / .`**", for example 12-12-1924 (**`n`**)
   * @param {boolean} [config.ordinal=true] ordinals like **1st**, **2nd**, **3rd**, **4th** or **12th** or **91st** (**`o`**)
   * @param {boolean} [config.punctuation=true] common punctuation such as **`?`** or **`,`**
   * ( token becomes fingerprint )
   * @param {boolean} [config.quoted_phrase=false] any **"quoted text"** in the sentence. _Note: its default value is **false**._ (**`q`**)
   * @param {boolean} [config.symbol=true] for example **`~`** or **`+`** or **`&`** or **`%`** or **`/`** ( token becomes fingerprint )
   * @param {boolean} [config.time=true] common representation of time such as **4pm** or **16:00 hours** (**`t`**)
   * @param {boolean} [config.mention=true] **@mention**  as in github or twitter (**`m`**)
   * @param {boolean} [config.url=true] URL such as **https://github.com** (**`u`**)
   * @param {boolean} [config.word=true] word such as **faster** or **résumé** or **prévenir** (**`w`**)
   * @return {number} number of properties set to true from the list of above 13.
   * @example
   * // Do not tokenize & tag @mentions.
   * var myTokenizer.defineConfig( { mention: false } );
   * // -> 13
   * // Only tokenize words as defined above.
   * var myTokenizer.defineConfig( {} );
   * // -> 0
  */
  var defineConfig = function ( config ) {
    if ( typeof config === 'object' && Object.keys( config ).length ) {
      rgxs = rgxsMaster.filter( function ( rgx ) {
        // Config for the Category of `rgx`.
        var cc = config[ rgx.category ];
        // Means `undefined` & `null` values are taken as true; otherwise
        // standard **truthy** and **falsy** interpretation applies!!
        return ( cc === undefined || cc === null || !!cc );
      } );
    } else rgxs = [];
    // Count normalized length i.e. ignore multi-script entries.
    const uniqueCats = Object.create( null );
    rgxs.forEach( function ( rgx ) {
      uniqueCats[ rgx.category ] = true;
    } );
    // Reset the `fingerPrintCodes` variable.
    fingerPrintCodes = {
      emoticon: 'c',
      email: 'e',
      emoji: 'j',
      hashtag: 'h',
      mention: 'm',
      number: 'n',
      ordinal: 'o',
      quoted_phrase: 'q', // eslint-disable-line camelcase
      currency: 'r',
      // symbol: 's',
      time: 't',
      url: 'u',
      word: 'w',
      alien: 'z'
    };
    return ( ( Object.keys( uniqueCats ) ).length );
  }; // defineConfig()

  // ### tokenize
  /**
   *
   * Tokenizes the input `sentence` using the configuration specified via
   * [`defineConfig()`](#defineconfig).
   * Common contractions and possessive nouns are split into 2 separate tokens;
   * for example **I'll** splits as `'I'` and `'\'ll'` or **won't** splits as
   * `'wo'` and `'n\'t'`.
   *
   * @method Tokenizer#tokenize
   * @param {string} sentence the input sentence.
   * @return {object[]} of tokens; each one of them is an object with 2-keys viz.
   * `value` and its `tag` identifying the type of the token.
   * @example
   * var s = 'For detailed API docs, check out http://winkjs.org/wink-regression-tree/ URL!';
   * myTokenizer.tokenize( s );
   * // -> [ { value: 'For', tag: 'word' },
   * //      { value: 'detailed', tag: 'word' },
   * //      { value: 'API', tag: 'word' },
   * //      { value: 'docs', tag: 'word' },
   * //      { value: ',', tag: 'punctuation' },
   * //      { value: 'check', tag: 'word' },
   * //      { value: 'out', tag: 'word' },
   * //      { value: 'http://winkjs.org/wink-regression-tree/', tag: 'url' },
   * //      { value: 'URL', tag: 'word' },
   * //      { value: '!', tag: 'punctuation' } ]
  */
  var tokenize = function ( sentence ) {
    finalTokens = [];
    tokenizeTextRecursively( sentence, rgxs );
    return finalTokens;
  }; // tokenize()

  // ### getTokensFP
  /**
   *
   * Returns the finger print of the tokens generated by the last call to
   * [`tokenize()`](#tokenize). A finger print is a string created by sequentially
   * joining the unique code of each token's type. Refer to table given under
   * [`defineConfig()`](#defineconfig) for values of these codes.
   *
   * A finger print is extremely useful in spotting patterns present in the sentence
   * using `regexes`, which is otherwise a complex and time consuming task.
   *
   * @method Tokenizer#getTokensFP
   * @return {string} finger print of tokens generated by the last call to `tokenize()`.
   * @example
   * // Generate finger print of sentence given in the previous example
   * // under tokenize().
   * myTokenizer.getTokensFP();
   * // -> 'wwww,wwuw!'
  */
  var getTokensFP = function () {
    var fp = [];
    finalTokens.forEach( function ( t ) {
      fp.push( ( fingerPrintCodes[ t.tag ] ) ? fingerPrintCodes[ t.tag ] : t.value );
    } );
    return fp.join( '' );
  }; // getFingerprint()

  // ### addTag
  var addTag = function (name, fingerprintCode) {
    if (fingerPrintCodes[name]) {
      throw new Error( 'Tag ' + name + ' already exists' );
    }

    fingerPrintCodes[name] = fingerprintCode;
  }; // addTag()

  // ### addRegex
  /**
   * Adds a regex for parsing a new type of token. This regex can either be mapped
   * to an existing tag or it allows creation of a new tag along with its finger print.
   * The uniqueness of the [finger prints](#defineconfig) have to ensured by the user.
   *
   * *The added regex(s) will supersede the internal parsing.*
   *
   * @method Tokenizer#addRegex
   * @param {RegExp} regex the new regular expression.
   * @param {string} tag tokens matching the `regex` will be assigned this tag.
   * @param {string} [fingerprintCode=undefined] required if adding a new
   * tag; ignored if using an existing tag.
   * @return {void} nothing!
   * @example
   * // Adding a regex for an existing tag
   * myTokenizer.addRegex( /\(oo\)/gi, 'emoticon' );
   * myTokenizer.tokenize( '(oo) Hi!' )
   * // -> [ { value: '(oo)', tag: 'emoticon' },
   * //      { value: 'Hi', tag: 'word' },
   * //      { value: '!', tag: 'punctuation' } ]
   *
   * // Adding a regex to parse a new token type
   * myTokenizer.addRegex( /hello/gi, 'greeting', 'g' );
   * myTokenizer.tokenize( 'hello, how are you?' );
   * // -> [ { value: 'hello', tag: 'greeting' },
   * //      { value: ',', tag: 'punctuation' },
   * //      { value: 'how', tag: 'word' },
   * //      { value: 'are', tag: 'word' },
   * //      { value: 'you', tag: 'word' },
   * //      { value: '?', tag: 'punctuation' } ]
   * // Notice how "hello" is now tagged as "greeting" and not as "word".
   *
   * // Using definConfig will reset the above!
   * myTokenizer.defineConfig( { word: true } );
   * myTokenizer.tokenize( 'hello, how are you?' );
   * // -> [ { value: 'hello', tag: 'word' },
   * //      { value: ',', tag: 'punctuation' },
   * //      { value: 'how', tag: 'word' },
   * //      { value: 'are', tag: 'word' },
   * //      { value: 'you', tag: 'word' },
   * //      { value: '?', tag: 'punctuation' } ]
  */

  var addRegex = function (regex, tag, fingerprintCode) {
    if (!fingerPrintCodes[tag] && !fingerprintCode) {
      throw new Error( 'Tag ' + tag + ' doesn\'t exist; Provide a \'fingerprintCode\' to add it as a tag.' );
    } else if (!fingerPrintCodes[tag]) {
      addTag(tag, fingerprintCode);
    }

    rgxs.unshift( { regex: regex, category: tag } );
  }; // addRegex()

  // Set quoted_phrase as false becuase mostly it is not required.
  defineConfig( { quoted_phrase: false } ); // eslint-disable-line camelcase
  methods.defineConfig = defineConfig;
  methods.tokenize = tokenize;
  methods.getTokensFP = getTokensFP;
  methods.addTag = addTag;
  methods.addRegex = addRegex;
  return methods;
};

module.exports = tokenizer;

},{"emoji-regex":"../taggy/node_modules/emoji-regex/index.js","./eng-contractions.js":"../taggy/node_modules/wink-tokenizer/src/eng-contractions.js"}],"../taggy/node_modules/stopwords-iso/stopwords-iso.json":[function(require,module,exports) {
module.exports = {
  "af": ["'n", "aan", "af", "al", "as", "baie", "by", "daar", "dag", "dat", "die", "dit", "een", "ek", "en", "gaan", "gesê", "haar", "het", "hom", "hulle", "hy", "in", "is", "jou", "jy", "kan", "kom", "ma", "maar", "met", "my", "na", "nie", "om", "ons", "op", "saam", "sal", "se", "sien", "so", "sy", "te", "toe", "uit", "van", "vir", "was", "wat", "ŉ"],
  "ar": ["،", "آض", "آمينَ", "آه", "آهاً", "آي", "أ", "أب", "أجل", "أجمع", "أخ", "أخذ", "أصبح", "أضحى", "أقبل", "أقل", "أكثر", "ألا", "أم", "أما", "أمامك", "أمامكَ", "أمسى", "أمّا", "أن", "أنا", "أنت", "أنتم", "أنتما", "أنتن", "أنتِ", "أنشأ", "أنّى", "أو", "أوشك", "أولئك", "أولئكم", "أولاء", "أولالك", "أوّهْ", "أي", "أيا", "أين", "أينما", "أيّ", "أَنَّ", "أََيُّ", "أُفٍّ", "إذ", "إذا", "إذاً", "إذما", "إذن", "إلى", "إليكم", "إليكما", "إليكنّ", "إليكَ", "إلَيْكَ", "إلّا", "إمّا", "إن", "إنّما", "إي", "إياك", "إياكم", "إياكما", "إياكن", "إيانا", "إياه", "إياها", "إياهم", "إياهما", "إياهن", "إياي", "إيهٍ", "إِنَّ", "ا", "ابتدأ", "اثر", "اجل", "احد", "اخرى", "اخلولق", "اذا", "اربعة", "ارتدّ", "استحال", "اطار", "اعادة", "اعلنت", "اف", "اكثر", "اكد", "الألاء", "الألى", "الا", "الاخيرة", "الان", "الاول", "الاولى", "التى", "التي", "الثاني", "الثانية", "الذاتي", "الذى", "الذي", "الذين", "السابق", "الف", "اللائي", "اللاتي", "اللتان", "اللتيا", "اللتين", "اللذان", "اللذين", "اللواتي", "الماضي", "المقبل", "الوقت", "الى", "اليوم", "اما", "امام", "امس", "ان", "انبرى", "انقلب", "انه", "انها", "او", "اول", "اي", "ايار", "ايام", "ايضا", "ب", "بات", "باسم", "بان", "بخٍ", "برس", "بسبب", "بسّ", "بشكل", "بضع", "بطآن", "بعد", "بعض", "بك", "بكم", "بكما", "بكن", "بل", "بلى", "بما", "بماذا", "بمن", "بن", "بنا", "به", "بها", "بي", "بيد", "بين", "بَسْ", "بَلْهَ", "بِئْسَ", "تانِ", "تانِك", "تبدّل", "تجاه", "تحوّل", "تلقاء", "تلك", "تلكم", "تلكما", "تم", "تينك", "تَيْنِ", "تِه", "تِي", "ثلاثة", "ثم", "ثمّ", "ثمّة", "ثُمَّ", "جعل", "جلل", "جميع", "جير", "حار", "حاشا", "حاليا", "حاي", "حتى", "حرى", "حسب", "حم", "حوالى", "حول", "حيث", "حيثما", "حين", "حيَّ", "حَبَّذَا", "حَتَّى", "حَذارِ", "خلا", "خلال", "دون", "دونك", "ذا", "ذات", "ذاك", "ذانك", "ذانِ", "ذلك", "ذلكم", "ذلكما", "ذلكن", "ذو", "ذوا", "ذواتا", "ذواتي", "ذيت", "ذينك", "ذَيْنِ", "ذِه", "ذِي", "راح", "رجع", "رويدك", "ريث", "رُبَّ", "زيارة", "سبحان", "سرعان", "سنة", "سنوات", "سوف", "سوى", "سَاءَ", "سَاءَمَا", "شبه", "شخصا", "شرع", "شَتَّانَ", "صار", "صباح", "صفر", "صهٍ", "صهْ", "ضد", "ضمن", "طاق", "طالما", "طفق", "طَق", "ظلّ", "عاد", "عام", "عاما", "عامة", "عدا", "عدة", "عدد", "عدم", "عسى", "عشر", "عشرة", "علق", "على", "عليك", "عليه", "عليها", "علًّ", "عن", "عند", "عندما", "عوض", "عين", "عَدَسْ", "عَمَّا", "غدا", "غير", "ـ", "ف", "فان", "فلان", "فو", "فى", "في", "فيم", "فيما", "فيه", "فيها", "قال", "قام", "قبل", "قد", "قطّ", "قلما", "قوة", "كأنّما", "كأين", "كأيّ", "كأيّن", "كاد", "كان", "كانت", "كذا", "كذلك", "كرب", "كل", "كلا", "كلاهما", "كلتا", "كلم", "كليكما", "كليهما", "كلّما", "كلَّا", "كم", "كما", "كي", "كيت", "كيف", "كيفما", "كَأَنَّ", "كِخ", "لئن", "لا", "لات", "لاسيما", "لدن", "لدى", "لعمر", "لقاء", "لك", "لكم", "لكما", "لكن", "لكنَّما", "لكي", "لكيلا", "للامم", "لم", "لما", "لمّا", "لن", "لنا", "له", "لها", "لو", "لوكالة", "لولا", "لوما", "لي", "لَسْتَ", "لَسْتُ", "لَسْتُم", "لَسْتُمَا", "لَسْتُنَّ", "لَسْتِ", "لَسْنَ", "لَعَلَّ", "لَكِنَّ", "لَيْتَ", "لَيْسَ", "لَيْسَا", "لَيْسَتَا", "لَيْسَتْ", "لَيْسُوا", "لَِسْنَا", "ما", "ماانفك", "مابرح", "مادام", "ماذا", "مازال", "مافتئ", "مايو", "متى", "مثل", "مذ", "مساء", "مع", "معاذ", "مقابل", "مكانكم", "مكانكما", "مكانكنّ", "مكانَك", "مليار", "مليون", "مما", "ممن", "من", "منذ", "منها", "مه", "مهما", "مَنْ", "مِن", "نحن", "نحو", "نعم", "نفس", "نفسه", "نهاية", "نَخْ", "نِعِمّا", "نِعْمَ", "ها", "هاؤم", "هاكَ", "هاهنا", "هبّ", "هذا", "هذه", "هكذا", "هل", "هلمَّ", "هلّا", "هم", "هما", "هن", "هنا", "هناك", "هنالك", "هو", "هي", "هيا", "هيت", "هيّا", "هَؤلاء", "هَاتانِ", "هَاتَيْنِ", "هَاتِه", "هَاتِي", "هَجْ", "هَذا", "هَذانِ", "هَذَيْنِ", "هَذِه", "هَذِي", "هَيْهَاتَ", "و", "و6", "وا", "واحد", "واضاف", "واضافت", "واكد", "وان", "واهاً", "واوضح", "وراءَك", "وفي", "وقال", "وقالت", "وقد", "وقف", "وكان", "وكانت", "ولا", "ولم", "ومن", "وهو", "وهي", "ويكأنّ", "وَيْ", "وُشْكَانََ", "يكون", "يمكن", "يوم", "ّأيّان"],
  "hy": ["այդ", "այլ", "այն", "այս", "դու", "դուք", "եմ", "են", "ենք", "ես", "եք", "է", "էի", "էին", "էինք", "էիր", "էիք", "էր", "ըստ", "թ", "ի", "ին", "իսկ", "իր", "կամ", "համար", "հետ", "հետո", "մենք", "մեջ", "մի", "ն", "նա", "նաև", "նրա", "նրանք", "որ", "որը", "որոնք", "որպես", "ու", "ում", "պիտի", "վրա", "և"],
  "eu": ["al", "anitz", "arabera", "asko", "baina", "bat", "batean", "batek", "bati", "batzuei", "batzuek", "batzuetan", "batzuk", "bera", "beraiek", "berau", "berauek", "bere", "berori", "beroriek", "beste", "bezala", "da", "dago", "dira", "ditu", "du", "dute", "edo", "egin", "ere", "eta", "eurak", "ez", "gainera", "gu", "gutxi", "guzti", "haiei", "haiek", "haietan", "hainbeste", "hala", "han", "handik", "hango", "hara", "hari", "hark", "hartan", "hau", "hauei", "hauek", "hauetan", "hemen", "hemendik", "hemengo", "hi", "hona", "honek", "honela", "honetan", "honi", "hor", "hori", "horiei", "horiek", "horietan", "horko", "horra", "horrek", "horrela", "horretan", "horri", "hortik", "hura", "izan", "ni", "noiz", "nola", "non", "nondik", "nongo", "nor", "nora", "ze", "zein", "zen", "zenbait", "zenbat", "zer", "zergatik", "ziren", "zituen", "zu", "zuek", "zuen", "zuten"],
  "bn": ["অতএব", "অথচ", "অথবা", "অনুযায়ী", "অনেক", "অনেকে", "অনেকেই", "অন্তত", "অন্য", "অবধি", "অবশ্য", "অর্থাত", "আই", "আগামী", "আগে", "আগেই", "আছে", "আজ", "আদ্যভাগে", "আপনার", "আপনি", "আবার", "আমরা", "আমাকে", "আমাদের", "আমার", "আমি", "আর", "আরও", "ই", "ইত্যাদি", "ইহা", "উচিত", "উত্তর", "উনি", "উপর", "উপরে", "এ", "এঁদের", "এঁরা", "এই", "একই", "একটি", "একবার", "একে", "এক্", "এখন", "এখনও", "এখানে", "এখানেই", "এটা", "এটাই", "এটি", "এত", "এতটাই", "এতে", "এদের", "এব", "এবং", "এবার", "এমন", "এমনকী", "এমনি", "এর", "এরা", "এল", "এস", "এসে", "ঐ", "ও", "ওঁদের", "ওঁর", "ওঁরা", "ওই", "ওকে", "ওখানে", "ওদের", "ওর", "ওরা", "কখনও", "কত", "কবে", "কমনে", "কয়েক", "কয়েকটি", "করছে", "করছেন", "করতে", "করবে", "করবেন", "করলে", "করলেন", "করা", "করাই", "করায়", "করার", "করি", "করিতে", "করিয়া", "করিয়ে", "করে", "করেই", "করেছিলেন", "করেছে", "করেছেন", "করেন", "কাউকে", "কাছ", "কাছে", "কাজ", "কাজে", "কারও", "কারণ", "কি", "কিংবা", "কিছু", "কিছুই", "কিন্তু", "কী", "কে", "কেউ", "কেউই", "কেখা", "কেন", "কোটি", "কোন", "কোনও", "কোনো", "ক্ষেত্রে", "কয়েক", "খুব", "গিয়ে", "গিয়েছে", "গিয়ে", "গুলি", "গেছে", "গেল", "গেলে", "গোটা", "চলে", "চান", "চায়", "চার", "চালু", "চেয়ে", "চেষ্টা", "ছাড়া", "ছাড়াও", "ছিল", "ছিলেন", "জন", "জনকে", "জনের", "জন্য", "জন্যওজে", "জানতে", "জানা", "জানানো", "জানায়", "জানিয়ে", "জানিয়েছে", "জে", "জ্নজন", "টি", "ঠিক", "তখন", "তত", "তথা", "তবু", "তবে", "তা", "তাঁকে", "তাঁদের", "তাঁর", "তাঁরা", "তাঁাহারা", "তাই", "তাও", "তাকে", "তাতে", "তাদের", "তার", "তারপর", "তারা", "তারৈ", "তাহলে", "তাহা", "তাহাতে", "তাহার", "তিনঐ", "তিনি", "তিনিও", "তুমি", "তুলে", "তেমন", "তো", "তোমার", "থাকবে", "থাকবেন", "থাকা", "থাকায়", "থাকে", "থাকেন", "থেকে", "থেকেই", "থেকেও", "দিকে", "দিতে", "দিন", "দিয়ে", "দিয়েছে", "দিয়েছেন", "দিলেন", "দু", "দুই", "দুটি", "দুটো", "দেওয়া", "দেওয়ার", "দেওয়া", "দেখতে", "দেখা", "দেখে", "দেন", "দেয়", "দ্বারা", "ধরা", "ধরে", "ধামার", "নতুন", "নয়", "না", "নাই", "নাকি", "নাগাদ", "নানা", "নিজে", "নিজেই", "নিজেদের", "নিজের", "নিতে", "নিয়ে", "নিয়ে", "নেই", "নেওয়া", "নেওয়ার", "নেওয়া", "নয়", "পক্ষে", "পর", "পরে", "পরেই", "পরেও", "পর্যন্ত", "পাওয়া", "পাচ", "পারি", "পারে", "পারেন", "পি", "পেয়ে", "পেয়্র্", "প্রতি", "প্রথম", "প্রভৃতি", "প্রযন্ত", "প্রাথমিক", "প্রায়", "প্রায়", "ফলে", "ফিরে", "ফের", "বক্তব্য", "বদলে", "বন", "বরং", "বলতে", "বলল", "বললেন", "বলা", "বলে", "বলেছেন", "বলেন", "বসে", "বহু", "বা", "বাদে", "বার", "বি", "বিনা", "বিভিন্ন", "বিশেষ", "বিষয়টি", "বেশ", "বেশি", "ব্যবহার", "ব্যাপারে", "ভাবে", "ভাবেই", "মতো", "মতোই", "মধ্যভাগে", "মধ্যে", "মধ্যেই", "মধ্যেও", "মনে", "মাত্র", "মাধ্যমে", "মোট", "মোটেই", "যখন", "যত", "যতটা", "যথেষ্ট", "যদি", "যদিও", "যা", "যাঁর", "যাঁরা", "যাওয়া", "যাওয়ার", "যাওয়া", "যাকে", "যাচ্ছে", "যাতে", "যাদের", "যান", "যাবে", "যায়", "যার", "যারা", "যিনি", "যে", "যেখানে", "যেতে", "যেন", "যেমন", "র", "রকম", "রয়েছে", "রাখা", "রেখে", "লক্ষ", "শুধু", "শুরু", "সঙ্গে", "সঙ্গেও", "সব", "সবার", "সমস্ত", "সম্প্রতি", "সহ", "সহিত", "সাধারণ", "সামনে", "সি", "সুতরাং", "সে", "সেই", "সেখান", "সেখানে", "সেটা", "সেটাই", "সেটাও", "সেটি", "স্পষ্ট", "স্বয়ং", "হইতে", "হইবে", "হইয়া", "হওয়া", "হওয়ায়", "হওয়ার", "হচ্ছে", "হত", "হতে", "হতেই", "হন", "হবে", "হবেন", "হয়", "হয়তো", "হয়নি", "হয়ে", "হয়েই", "হয়েছিল", "হয়েছে", "হয়েছেন", "হল", "হলে", "হলেই", "হলেও", "হলো", "হাজার", "হিসাবে", "হৈলে", "হোক", "হয়"],
  "br": ["'blam", "'d", "'m", "'r", "'ta", "'vat", "'z", "'zo", "a", "a:", "aba", "abalamour", "abaoe", "ac'hane", "ac'hanoc'h", "ac'hanomp", "ac'hanon", "ac'hanout", "adal", "adalek", "adarre", "ae", "aec'h", "aed", "aemp", "aen", "aent", "aes", "afe", "afec'h", "afed", "afemp", "afen", "afent", "afes", "ag", "ah", "aimp", "aint", "aio", "aiou", "aje", "ajec'h", "ajed", "ajemp", "ajen", "ajent", "ajes", "al", "alato", "alies", "aliesañ", "alkent", "all", "allas", "allo", "allô", "am", "amañ", "amzer", "an", "anezhañ", "anezhe", "anezhi", "anezho", "anvet", "aon", "aotren", "ar", "arall", "araok", "araoki", "araozañ", "araozo", "araozoc'h", "araozomp", "araozon", "araozor", "araozout", "arbenn", "arre", "atalek", "atav", "az", "azalek", "azirazañ", "azirazi", "azirazo", "azirazoc'h", "azirazomp", "azirazon", "azirazor", "azirazout", "b:", "ba", "ba'l", "ba'n", "ba'r", "bad", "bah", "bal", "ban", "bar", "bastañ", "befe", "bell", "benaos", "benn", "bennag", "bennak", "bennozh", "bep", "bepred", "berr", "berzh", "bet", "betek", "betra", "bev", "bevet", "bez", "bezañ", "beze", "bezent", "bezet", "bezh", "bezit", "bezomp", "bihan", "bije", "biou", "biskoazh", "blam", "bo", "boa", "bominapl", "boudoudom", "bouez", "boull", "boum", "bout", "bras", "brasañ", "brav", "bravo", "bremañ", "bres", "brokenn", "bronn", "brrr", "brutal", "buhezek", "c'h:", "c'haout", "c'he", "c'hem", "c'herz", "c'heñver", "c'hichen", "c'hiz", "c'hoazh", "c'horre", "c'houde", "c'houst", "c'hreiz", "c'hwec'h", "c'hwec'hvet", "c'hwezek", "c'hwi", "ch:", "chaous", "chik", "chit", "chom", "chut", "d'", "d'al", "d'an", "d'ar", "d'az", "d'e", "d'he", "d'ho", "d'hol", "d'hon", "d'hor", "d'o", "d'ober", "d'ul", "d'un", "d'ur", "d:", "da", "dak", "daka", "dal", "dalbezh", "dalc'hmat", "dalit", "damdost", "damheñvel", "damm", "dan", "danvez", "dao", "daol", "daonet", "daou", "daoust", "daouzek", "daouzekvet", "darn", "dastrewiñ", "dav", "davedoc'h", "davedomp", "davedon", "davedor", "davedout", "davet", "davetañ", "davete", "daveti", "daveto", "defe", "dehou", "dek", "dekvet", "den", "deoc'h", "deomp", "deor", "derc'hel", "deus", "dez", "deze", "dezhañ", "dezhe", "dezhi", "dezho", "di", "diabarzh", "diagent", "diar", "diaraok", "diavaez", "dibaoe", "dibaot", "dibar", "dic'halañ", "didiac'h", "dienn", "difer", "diganeoc'h", "diganeomp", "diganeor", "diganimp", "diganin", "diganit", "digant", "digantañ", "digante", "diganti", "diganto", "digemmesk", "diget", "digor", "digoret", "dija", "dije", "dimp", "din", "dinaou", "dindan", "dindanañ", "dindani", "dindano", "dindanoc'h", "dindanomp", "dindanon", "dindanor", "dindanout", "dioutañ", "dioute", "diouti", "diouto", "diouzh", "diouzhin", "diouzhit", "diouzhoc'h", "diouzhomp", "diouzhor", "dirak", "dirazañ", "dirazi", "dirazo", "dirazoc'h", "dirazomp", "dirazon", "dirazor", "dirazout", "disheñvel", "dispar", "distank", "dister", "disterañ", "disterig", "distro", "dit", "divaez", "diwar", "diwezhat", "diwezhañ", "do", "doa", "doare", "dont", "dost", "doue", "douetus", "douez", "doug", "draou", "draoñ", "dre", "drede", "dreist", "dreistañ", "dreisti", "dreisto", "dreistoc'h", "dreistomp", "dreiston", "dreistor", "dreistout", "drek", "dreñv", "dring", "dro", "du", "e", "e:", "eas", "ebet", "ec'h", "edo", "edoc'h", "edod", "edomp", "edon", "edont", "edos", "eer", "eeun", "efed", "egedoc'h", "egedomp", "egedon", "egedor", "egedout", "eget", "egetañ", "egete", "egeti", "egeto", "eh", "eil", "eilvet", "eizh", "eizhvet", "ejoc'h", "ejod", "ejomp", "ejont", "ejout", "el", "em", "emaint", "emaoc'h", "emaomp", "emaon", "emaout", "emañ", "eme", "emeur", "emezañ", "emezi", "emezo", "emezoc'h", "emezomp", "emezon", "emezout", "emporzhiañ", "en", "end", "endan", "endra", "enep", "ennañ", "enni", "enno", "ennoc'h", "ennomp", "ennon", "ennor", "ennout", "enta", "eo", "eomp", "eont", "eor", "eot", "er", "erbet", "erfin", "esa", "esae", "espar", "estlamm", "estrañj", "eta", "etre", "etreoc'h", "etrezo", "etrezoc'h", "etrezomp", "etrezor", "euh", "eur", "eus", "evel", "evelato", "eveldoc'h", "eveldomp", "eveldon", "eveldor", "eveldout", "evelkent", "eveltañ", "evelte", "evelti", "evelto", "evidoc'h", "evidomp", "evidon", "evidor", "evidout", "evit", "evitañ", "evite", "eviti", "evito", "ez", "eñ", "f:", "fac'h", "fall", "fed", "feiz", "fenn", "fezh", "fin", "finsalvet", "foei", "fouilhezañ", "g:", "gallout", "ganeoc'h", "ganeomp", "ganin", "ganit", "gant", "gantañ", "ganti", "ganto", "gaout", "gast", "gein", "gellout", "genndost", "gentañ", "ger", "gerz", "get", "geñver", "gichen", "gin", "giz", "glan", "gloev", "goll", "gorre", "goude", "gouez", "gouezit", "gouezomp", "goulz", "gounnar", "gour", "goust", "gouze", "gouzout", "gra", "grak", "grec'h", "greiz", "grenn", "greomp", "grit", "groñs", "gutez", "gwall", "gwashoc'h", "gwazh", "gwech", "gwechall", "gwechoù", "gwell", "gwezh", "gwezhall", "gwezharall", "gwezhoù", "gwig", "gwirionez", "gwitibunan", "gêr", "h:", "ha", "hag", "han", "hanter", "hanterc'hantad", "hanterkantved", "harz", "hañ", "hañval", "he", "hebioù", "hec'h", "hei", "hein", "hem", "hemañ", "hen", "hend", "henhont", "henn", "hennezh", "hent", "hep", "hervez", "hervezañ", "hervezi", "hervezo", "hervezoc'h", "hervezomp", "hervezon", "hervezor", "hervezout", "heul", "heuliañ", "hevelep", "heverk", "heñvel", "heñvelat", "heñvelañ", "heñveliñ", "heñveloc'h", "heñvelout", "hi", "hilh", "hini", "hirie", "hirio", "hiziv", "hiziviken", "ho", "hoaliñ", "hoc'h", "hogen", "hogos", "hogozik", "hol", "holl", "holà", "homañ", "hon", "honhont", "honnezh", "hont", "hop", "hopala", "hor", "hou", "houp", "hudu", "hue", "hui", "hum", "hurrah", "i", "i:", "in", "int", "is", "ispisial", "isurzhiet", "it", "ivez", "izelañ", "j:", "just", "k:", "kae", "kaer", "kalon", "kalz", "kant", "kaout", "kar", "kazi", "keid", "kein", "keit", "kel", "kellies", "keloù", "kement", "ken", "kenkent", "kenkoulz", "kenment", "kent", "kentañ", "kentizh", "kentoc'h", "kentre", "ker", "kerkent", "kerz", "kerzh", "ket", "keta", "keñver", "keñverel", "keñverius", "kichen", "kichenik", "kit", "kiz", "klak", "klek", "klik", "komprenet", "komz", "kont", "korf", "korre", "koulskoude", "koulz", "koust", "krak", "krampouezh", "krec'h", "kreiz", "kuit", "kwir", "l:", "la", "laez", "laoskel", "laouen", "lavar", "lavaret", "lavarout", "lec'h", "lein", "leizh", "lerc'h", "leun", "leuskel", "lew", "lies", "liesañ", "lod", "lusk", "lâr", "lârout", "m:", "ma", "ma'z", "mac'h", "mac'hat", "mac'hañ", "mac'hoc'h", "mad", "maez", "maksimal", "mann", "mar", "mard", "marg", "marzh", "mat", "mañ", "me", "memes", "memestra", "merkapl", "mersi", "mes", "mesk", "met", "meur", "mil", "minimal", "moan", "moaniaat", "mod", "mont", "mout", "mui", "muiañ", "muioc'h", "n", "n'", "n:", "na", "nag", "naontek", "naturel", "nav", "navet", "ne", "nebeudig", "nebeut", "nebeutañ", "nebeutoc'h", "neketa", "nemedoc'h", "nemedomp", "nemedon", "nemedor", "nemedout", "nemet", "nemetañ", "nemete", "nemeti", "nemeto", "nemeur", "neoac'h", "nepell", "nerzh", "nes", "neseser", "netra", "neubeudoù", "neuhe", "neuze", "nevez", "newazh", "nez", "ni", "nikun", "niverus", "nul", "o", "o:", "oa", "oac'h", "oad", "oamp", "oan", "oant", "oar", "oas", "ober", "oc'h", "oc'ho", "oc'hola", "oc'hpenn", "oh", "ohe", "ollé", "olole", "olé", "omp", "on", "ordin", "ordinal", "ouejoc'h", "ouejod", "ouejomp", "ouejont", "ouejout", "ouek", "ouezas", "ouezi", "ouezimp", "ouezin", "ouezint", "ouezis", "ouezo", "ouezoc'h", "ouezor", "ouf", "oufe", "oufec'h", "oufed", "oufemp", "oufen", "oufent", "oufes", "ouie", "ouiec'h", "ouied", "ouiemp", "ouien", "ouient", "ouies", "ouije", "ouijec'h", "ouijed", "ouijemp", "ouijen", "ouijent", "ouijes", "out", "outañ", "outi", "outo", "ouzer", "ouzh", "ouzhin", "ouzhit", "ouzhoc'h", "ouzhomp", "ouzhor", "ouzhpenn", "ouzhpennik", "ouzoc'h", "ouzomp", "ouzon", "ouzont", "ouzout", "p'", "p:", "pa", "pad", "padal", "paf", "pan", "panevedeoc'h", "panevedo", "panevedomp", "panevedon", "panevedout", "panevet", "panevetañ", "paneveti", "pas", "paseet", "pe", "peadra", "peder", "pedervet", "pedervetvet", "pefe", "pegeit", "pegement", "pegen", "pegiz", "pegoulz", "pehini", "pelec'h", "pell", "pemod", "pemp", "pempved", "pemzek", "penaos", "penn", "peogwir", "peotramant", "pep", "perak", "perc'hennañ", "pergen", "permetiñ", "peseurt", "pet", "petiaoul", "petoare", "petra", "peur", "peurgetket", "peurheñvel", "peurliesañ", "peurvuiañ", "peus", "peustost", "peuz", "pevar", "pevare", "pevarevet", "pevarzek", "pez", "peze", "pezh", "pff", "pfft", "pfut", "picher", "pif", "pife", "pign", "pije", "pikol", "pitiaoul", "piv", "plaouf", "plok", "plouf", "po", "poa", "poelladus", "pof", "pok", "posupl", "pouah", "pourc'henn", "prest", "prestik", "prim", "prin", "provostapl", "pst", "pu", "pur", "r:", "ra", "rae", "raec'h", "raed", "raemp", "raen", "raent", "raes", "rafe", "rafec'h", "rafed", "rafemp", "rafen", "rafent", "rafes", "rag", "raimp", "raint", "raio", "raje", "rajec'h", "rajed", "rajemp", "rajen", "rajent", "rajes", "rak", "ral", "ran", "rankout", "raok", "razh", "re", "reas", "reer", "regennoù", "reiñ", "rejoc'h", "rejod", "rejomp", "rejont", "rejout", "rener", "rentañ", "reoc'h", "reomp", "reont", "reor", "reot", "resis", "ret", "reve", "rez", "ri", "rik", "rin", "ris", "rit", "rouez", "s:", "sac'h", "sant", "sav", "sañset", "se", "sed", "seitek", "seizh", "seizhvet", "sell", "sellit", "ser", "setu", "seul", "seurt", "siwazh", "skignañ", "skoaz", "skouer", "sort", "souden", "souvitañ", "soñj", "speriañ", "spririñ", "stad", "stlabezañ", "stop", "stranañ", "strewiñ", "strishaat", "stumm", "sujed", "surtoud", "t:", "ta", "taer", "tailh", "tak", "tal", "talvoudegezh", "tamm", "tanav", "taol", "te", "techet", "teir", "teirvet", "telt", "teltenn", "teus", "teut", "teuteu", "ti", "tik", "toa", "tok", "tost", "tostig", "toud", "touesk", "touez", "toull", "tra", "trantenn", "traoñ", "trawalc'h", "tre", "trede", "tregont", "tremenet", "tri", "trivet", "triwec'h", "trizek", "tro", "trugarez", "trumm", "tsoin", "tsouin", "tu", "tud", "u:", "ugent", "uhel", "uhelañ", "ul", "un", "unan", "unanez", "unanig", "unnek", "unnekvet", "ur", "urzh", "us", "v:", "va", "vale", "van", "vare", "vat", "vefe", "vefec'h", "vefed", "vefemp", "vefen", "vefent", "vefes", "vesk", "vete", "vez", "vezan", "vezañ", "veze", "vezec'h", "vezed", "vezemp", "vezen", "vezent", "vezer", "vezes", "vezez", "vezit", "vezomp", "vezont", "vi", "vihan", "vihanañ", "vije", "vijec'h", "vijed", "vijemp", "vijen", "vijent", "vijes", "viken", "vimp", "vin", "vint", "vior", "viot", "virviken", "viskoazh", "vlan", "vlaou", "vo", "vod", "voe", "voec'h", "voed", "voemp", "voen", "voent", "voes", "vont", "vostapl", "vrac'h", "vrasañ", "vremañ", "w:", "walc'h", "war", "warnañ", "warni", "warno", "warnoc'h", "warnomp", "warnon", "warnor", "warnout", "wazh", "wech", "wechoù", "well", "y:", "you", "youadenn", "youc'hadenn", "youc'hou", "z:", "za", "zan", "zaw", "zeu", "zi", "ziar", "zigarez", "ziget", "zindan", "zioc'h", "ziouzh", "zirak", "zivout", "ziwar", "ziwezhañ", "zo", "zoken", "zokenoc'h", "zouesk", "zouez", "zro", "zu"],
  "bg": ["а", "автентичен", "аз", "ако", "ала", "бе", "без", "беше", "би", "бивш", "бивша", "бившо", "бил", "била", "били", "било", "благодаря", "близо", "бъдат", "бъде", "бяха", "в", "вас", "ваш", "ваша", "вероятно", "вече", "взема", "ви", "вие", "винаги", "внимава", "време", "все", "всеки", "всички", "всичко", "всяка", "във", "въпреки", "върху", "г", "ги", "главен", "главна", "главно", "глас", "го", "година", "години", "годишен", "д", "да", "дали", "два", "двама", "двамата", "две", "двете", "ден", "днес", "дни", "до", "добра", "добре", "добро", "добър", "докато", "докога", "дори", "досега", "доста", "друг", "друга", "други", "е", "евтин", "едва", "един", "една", "еднаква", "еднакви", "еднакъв", "едно", "екип", "ето", "живот", "за", "забавям", "зад", "заедно", "заради", "засега", "заспал", "затова", "защо", "защото", "и", "из", "или", "им", "има", "имат", "иска", "й", "каза", "как", "каква", "какво", "както", "какъв", "като", "кога", "когато", "което", "които", "кой", "който", "колко", "която", "къде", "където", "към", "лесен", "лесно", "ли", "лош", "м", "май", "малко", "ме", "между", "мек", "мен", "месец", "ми", "много", "мнозина", "мога", "могат", "може", "мокър", "моля", "момента", "му", "н", "на", "над", "назад", "най", "направи", "напред", "например", "нас", "не", "него", "нещо", "нея", "ни", "ние", "никой", "нито", "нищо", "но", "нов", "нова", "нови", "новина", "някои", "някой", "няколко", "няма", "обаче", "около", "освен", "особено", "от", "отгоре", "отново", "още", "пак", "по", "повече", "повечето", "под", "поне", "поради", "после", "почти", "прави", "пред", "преди", "през", "при", "пък", "първата", "първи", "първо", "пъти", "равен", "равна", "с", "са", "сам", "само", "се", "сега", "си", "син", "скоро", "след", "следващ", "сме", "смях", "според", "сред", "срещу", "сте", "съм", "със", "също", "т", "т.н.", "тази", "така", "такива", "такъв", "там", "твой", "те", "тези", "ти", "то", "това", "тогава", "този", "той", "толкова", "точно", "три", "трябва", "тук", "тъй", "тя", "тях", "у", "утре", "харесва", "хиляди", "ч", "часа", "че", "често", "чрез", "ще", "щом", "юмрук", "я", "як"],
  "ca": ["a", "abans", "ací", "ah", "així", "això", "al", "aleshores", "algun", "alguna", "algunes", "alguns", "alhora", "allà", "allí", "allò", "als", "altra", "altre", "altres", "amb", "ambdues", "ambdós", "anar", "ans", "apa", "aquell", "aquella", "aquelles", "aquells", "aquest", "aquesta", "aquestes", "aquests", "aquí", "baix", "bastant", "bé", "cada", "cadascuna", "cadascunes", "cadascuns", "cadascú", "com", "consegueixo", "conseguim", "conseguir", "consigueix", "consigueixen", "consigueixes", "contra", "d'un", "d'una", "d'unes", "d'uns", "dalt", "de", "del", "dels", "des", "des de", "després", "dins", "dintre", "donat", "doncs", "durant", "e", "eh", "el", "elles", "ells", "els", "em", "en", "encara", "ens", "entre", "era", "erem", "eren", "eres", "es", "esta", "estan", "estat", "estava", "estaven", "estem", "esteu", "estic", "està", "estàvem", "estàveu", "et", "etc", "ets", "fa", "faig", "fan", "fas", "fem", "fer", "feu", "fi", "fins", "fora", "gairebé", "ha", "han", "has", "haver", "havia", "he", "hem", "heu", "hi", "ho", "i", "igual", "iguals", "inclòs", "ja", "jo", "l'hi", "la", "les", "li", "li'n", "llarg", "llavors", "m'he", "ma", "mal", "malgrat", "mateix", "mateixa", "mateixes", "mateixos", "me", "mentre", "meu", "meus", "meva", "meves", "mode", "molt", "molta", "moltes", "molts", "mon", "mons", "més", "n'he", "n'hi", "ne", "ni", "no", "nogensmenys", "només", "nosaltres", "nostra", "nostre", "nostres", "o", "oh", "oi", "on", "pas", "pel", "pels", "per", "per que", "perquè", "però", "poc", "poca", "pocs", "podem", "poden", "poder", "podeu", "poques", "potser", "primer", "propi", "puc", "qual", "quals", "quan", "quant", "que", "quelcom", "qui", "quin", "quina", "quines", "quins", "què", "s'ha", "s'han", "sa", "sabem", "saben", "saber", "sabeu", "sap", "saps", "semblant", "semblants", "sense", "ser", "ses", "seu", "seus", "seva", "seves", "si", "sobre", "sobretot", "soc", "solament", "sols", "som", "son", "sons", "sota", "sou", "sóc", "són", "t'ha", "t'han", "t'he", "ta", "tal", "també", "tampoc", "tan", "tant", "tanta", "tantes", "te", "tene", "tenim", "tenir", "teniu", "teu", "teus", "teva", "teves", "tinc", "ton", "tons", "tot", "tota", "totes", "tots", "un", "una", "unes", "uns", "us", "va", "vaig", "vam", "van", "vas", "veu", "vosaltres", "vostra", "vostre", "vostres", "érem", "éreu", "és", "éssent", "últim", "ús"],
  "zh": ["、", "。", "〈", "〉", "《", "》", "一", "一个", "一些", "一何", "一切", "一则", "一方面", "一旦", "一来", "一样", "一种", "一般", "一转眼", "七", "万一", "三", "上", "上下", "下", "不", "不仅", "不但", "不光", "不单", "不只", "不外乎", "不如", "不妨", "不尽", "不尽然", "不得", "不怕", "不惟", "不成", "不拘", "不料", "不是", "不比", "不然", "不特", "不独", "不管", "不至于", "不若", "不论", "不过", "不问", "与", "与其", "与其说", "与否", "与此同时", "且", "且不说", "且说", "两者", "个", "个别", "中", "临", "为", "为了", "为什么", "为何", "为止", "为此", "为着", "乃", "乃至", "乃至于", "么", "之", "之一", "之所以", "之类", "乌乎", "乎", "乘", "九", "也", "也好", "也罢", "了", "二", "二来", "于", "于是", "于是乎", "云云", "云尔", "五", "些", "亦", "人", "人们", "人家", "什", "什么", "什么样", "今", "介于", "仍", "仍旧", "从", "从此", "从而", "他", "他人", "他们", "他们们", "以", "以上", "以为", "以便", "以免", "以及", "以故", "以期", "以来", "以至", "以至于", "以致", "们", "任", "任何", "任凭", "会", "似的", "但", "但凡", "但是", "何", "何以", "何况", "何处", "何时", "余外", "作为", "你", "你们", "使", "使得", "例如", "依", "依据", "依照", "便于", "俺", "俺们", "倘", "倘使", "倘或", "倘然", "倘若", "借", "借傥然", "假使", "假如", "假若", "做", "像", "儿", "先不先", "光", "光是", "全体", "全部", "八", "六", "兮", "共", "关于", "关于具体地说", "其", "其一", "其中", "其二", "其他", "其余", "其它", "其次", "具体地说", "具体说来", "兼之", "内", "再", "再其次", "再则", "再有", "再者", "再者说", "再说", "冒", "冲", "况且", "几", "几时", "凡", "凡是", "凭", "凭借", "出于", "出来", "分", "分别", "则", "则甚", "别", "别人", "别处", "别是", "别的", "别管", "别说", "到", "前后", "前此", "前者", "加之", "加以", "区", "即", "即令", "即使", "即便", "即如", "即或", "即若", "却", "去", "又", "又及", "及", "及其", "及至", "反之", "反而", "反过来", "反过来说", "受到", "另", "另一方面", "另外", "另悉", "只", "只当", "只怕", "只是", "只有", "只消", "只要", "只限", "叫", "叮咚", "可", "可以", "可是", "可见", "各", "各个", "各位", "各种", "各自", "同", "同时", "后", "后者", "向", "向使", "向着", "吓", "吗", "否则", "吧", "吧哒", "含", "吱", "呀", "呃", "呕", "呗", "呜", "呜呼", "呢", "呵", "呵呵", "呸", "呼哧", "咋", "和", "咚", "咦", "咧", "咱", "咱们", "咳", "哇", "哈", "哈哈", "哉", "哎", "哎呀", "哎哟", "哗", "哟", "哦", "哩", "哪", "哪个", "哪些", "哪儿", "哪天", "哪年", "哪怕", "哪样", "哪边", "哪里", "哼", "哼唷", "唉", "唯有", "啊", "啐", "啥", "啦", "啪达", "啷当", "喂", "喏", "喔唷", "喽", "嗡", "嗡嗡", "嗬", "嗯", "嗳", "嘎", "嘎登", "嘘", "嘛", "嘻", "嘿", "嘿嘿", "四", "因", "因为", "因了", "因此", "因着", "因而", "固然", "在", "在下", "在于", "地", "基于", "处在", "多", "多么", "多少", "大", "大家", "她", "她们", "好", "如", "如上", "如上所述", "如下", "如何", "如其", "如同", "如是", "如果", "如此", "如若", "始而", "孰料", "孰知", "宁", "宁可", "宁愿", "宁肯", "它", "它们", "对", "对于", "对待", "对方", "对比", "将", "小", "尔", "尔后", "尔尔", "尚且", "就", "就是", "就是了", "就是说", "就算", "就要", "尽", "尽管", "尽管如此", "岂但", "己", "已", "已矣", "巴", "巴巴", "年", "并", "并且", "庶乎", "庶几", "开外", "开始", "归", "归齐", "当", "当地", "当然", "当着", "彼", "彼时", "彼此", "往", "待", "很", "得", "得了", "怎", "怎么", "怎么办", "怎么样", "怎奈", "怎样", "总之", "总的来看", "总的来说", "总的说来", "总而言之", "恰恰相反", "您", "惟其", "慢说", "我", "我们", "或", "或则", "或是", "或曰", "或者", "截至", "所", "所以", "所在", "所幸", "所有", "才", "才能", "打", "打从", "把", "抑或", "拿", "按", "按照", "换句话说", "换言之", "据", "据此", "接着", "故", "故此", "故而", "旁人", "无", "无宁", "无论", "既", "既往", "既是", "既然", "日", "时", "时候", "是", "是以", "是的", "更", "曾", "替", "替代", "最", "月", "有", "有些", "有关", "有及", "有时", "有的", "望", "朝", "朝着", "本", "本人", "本地", "本着", "本身", "来", "来着", "来自", "来说", "极了", "果然", "果真", "某", "某个", "某些", "某某", "根据", "欤", "正值", "正如", "正巧", "正是", "此", "此地", "此处", "此外", "此时", "此次", "此间", "毋宁", "每", "每当", "比", "比及", "比如", "比方", "没奈何", "沿", "沿着", "漫说", "点", "焉", "然则", "然后", "然而", "照", "照着", "犹且", "犹自", "甚且", "甚么", "甚或", "甚而", "甚至", "甚至于", "用", "用来", "由", "由于", "由是", "由此", "由此可见", "的", "的确", "的话", "直到", "相对而言", "省得", "看", "眨眼", "着", "着呢", "矣", "矣乎", "矣哉", "离", "秒", "称", "竟而", "第", "等", "等到", "等等", "简言之", "管", "类如", "紧接着", "纵", "纵令", "纵使", "纵然", "经", "经过", "结果", "给", "继之", "继后", "继而", "综上所述", "罢了", "者", "而", "而且", "而况", "而后", "而外", "而已", "而是", "而言", "能", "能否", "腾", "自", "自个儿", "自从", "自各儿", "自后", "自家", "自己", "自打", "自身", "至", "至于", "至今", "至若", "致", "般的", "若", "若夫", "若是", "若果", "若非", "莫不然", "莫如", "莫若", "虽", "虽则", "虽然", "虽说", "被", "要", "要不", "要不是", "要不然", "要么", "要是", "譬喻", "譬如", "让", "许多", "论", "设使", "设或", "设若", "诚如", "诚然", "该", "说", "说来", "请", "诸", "诸位", "诸如", "谁", "谁人", "谁料", "谁知", "贼死", "赖以", "赶", "起", "起见", "趁", "趁着", "越是", "距", "跟", "较", "较之", "边", "过", "还", "还是", "还有", "还要", "这", "这一来", "这个", "这么", "这么些", "这么样", "这么点儿", "这些", "这会儿", "这儿", "这就是说", "这时", "这样", "这次", "这般", "这边", "这里", "进而", "连", "连同", "逐步", "通过", "遵循", "遵照", "那", "那个", "那么", "那么些", "那么样", "那些", "那会儿", "那儿", "那时", "那样", "那般", "那边", "那里", "都", "鄙人", "鉴于", "针对", "阿", "除", "除了", "除外", "除开", "除此之外", "除非", "随", "随后", "随时", "随着", "难道说", "零", "非", "非但", "非徒", "非特", "非独", "靠", "顺", "顺着", "首先", "︿", "！", "＃", "＄", "％", "＆", "（", "）", "＊", "＋", "，", "０", "１", "２", "３", "４", "５", "６", "７", "８", "９", "：", "；", "＜", "＞", "？", "＠", "［", "］", "｛", "｜", "｝", "～", "￥"],
  "hr": ["a", "ako", "ali", "bi", "bih", "bila", "bili", "bilo", "bio", "bismo", "biste", "biti", "bumo", "da", "do", "duž", "ga", "hoće", "hoćemo", "hoćete", "hoćeš", "hoću", "i", "iako", "ih", "ili", "iz", "ja", "je", "jedna", "jedne", "jedno", "jer", "jesam", "jesi", "jesmo", "jest", "jeste", "jesu", "jim", "joj", "još", "ju", "kada", "kako", "kao", "koja", "koje", "koji", "kojima", "koju", "kroz", "li", "me", "mene", "meni", "mi", "mimo", "moj", "moja", "moje", "mu", "na", "nad", "nakon", "nam", "nama", "nas", "naš", "naša", "naše", "našeg", "ne", "nego", "neka", "neki", "nekog", "neku", "nema", "netko", "neće", "nećemo", "nećete", "nećeš", "neću", "nešto", "ni", "nije", "nikoga", "nikoje", "nikoju", "nisam", "nisi", "nismo", "niste", "nisu", "njega", "njegov", "njegova", "njegovo", "njemu", "njezin", "njezina", "njezino", "njih", "njihov", "njihova", "njihovo", "njim", "njima", "njoj", "nju", "no", "o", "od", "odmah", "on", "ona", "oni", "ono", "ova", "pa", "pak", "po", "pod", "pored", "prije", "s", "sa", "sam", "samo", "se", "sebe", "sebi", "si", "smo", "ste", "su", "sve", "svi", "svog", "svoj", "svoja", "svoje", "svom", "ta", "tada", "taj", "tako", "te", "tebe", "tebi", "ti", "to", "toj", "tome", "tu", "tvoj", "tvoja", "tvoje", "u", "uz", "vam", "vama", "vas", "vaš", "vaša", "vaše", "već", "vi", "vrlo", "za", "zar", "će", "ćemo", "ćete", "ćeš", "ću", "što"],
  "cs": ["a", "aby", "ahoj", "aj", "ale", "anebo", "ani", "aniž", "ano", "asi", "aspoň", "atd", "atp", "az", "ačkoli", "až", "bez", "beze", "blízko", "bohužel", "brzo", "bude", "budem", "budeme", "budes", "budete", "budeš", "budou", "budu", "by", "byl", "byla", "byli", "bylo", "byly", "bys", "byt", "být", "během", "chce", "chceme", "chcete", "chceš", "chci", "chtít", "chtějí", "chut'", "chuti", "ci", "clanek", "clanku", "clanky", "co", "coz", "což", "cz", "daleko", "dalsi", "další", "den", "deset", "design", "devatenáct", "devět", "dnes", "do", "dobrý", "docela", "dva", "dvacet", "dvanáct", "dvě", "dál", "dále", "děkovat", "děkujeme", "děkuji", "email", "ho", "hodně", "i", "jak", "jakmile", "jako", "jakož", "jde", "je", "jeden", "jedenáct", "jedna", "jedno", "jednou", "jedou", "jeho", "jehož", "jej", "jeji", "jejich", "její", "jelikož", "jemu", "jen", "jenom", "jenž", "jeste", "jestli", "jestliže", "ještě", "jež", "ji", "jich", "jimi", "jinak", "jine", "jiné", "jiz", "již", "jsem", "jses", "jseš", "jsi", "jsme", "jsou", "jste", "já", "jí", "jím", "jíž", "jšte", "k", "kam", "každý", "kde", "kdo", "kdy", "kdyz", "když", "ke", "kolik", "kromě", "ktera", "ktere", "kteri", "kterou", "ktery", "která", "které", "který", "kteři", "kteří", "ku", "kvůli", "ma", "mají", "mate", "me", "mezi", "mi", "mit", "mne", "mnou", "mně", "moc", "mohl", "mohou", "moje", "moji", "možná", "muj", "musí", "muze", "my", "má", "málo", "mám", "máme", "máte", "máš", "mé", "mí", "mít", "mě", "můj", "může", "na", "nad", "nade", "nam", "napiste", "napište", "naproti", "nas", "nasi", "načež", "naše", "naši", "ne", "nebo", "nebyl", "nebyla", "nebyli", "nebyly", "nechť", "nedělají", "nedělá", "nedělám", "neděláme", "neděláte", "neděláš", "neg", "nejsi", "nejsou", "nemají", "nemáme", "nemáte", "neměl", "neni", "není", "nestačí", "nevadí", "nez", "než", "nic", "nich", "nimi", "nove", "novy", "nové", "nový", "nula", "ná", "nám", "námi", "nás", "náš", "ní", "ním", "ně", "něco", "nějak", "někde", "někdo", "němu", "němuž", "o", "od", "ode", "on", "ona", "oni", "ono", "ony", "osm", "osmnáct", "pak", "patnáct", "po", "pod", "podle", "pokud", "potom", "pouze", "pozdě", "pořád", "prave", "pravé", "pred", "pres", "pri", "pro", "proc", "prostě", "prosím", "proti", "proto", "protoze", "protože", "proč", "prvni", "první", "práve", "pta", "pět", "před", "přede", "přes", "přese", "při", "přičemž", "re", "rovně", "s", "se", "sedm", "sedmnáct", "si", "sice", "skoro", "smí", "smějí", "snad", "spolu", "sta", "sto", "strana", "sté", "sve", "svych", "svym", "svymi", "své", "svých", "svým", "svými", "svůj", "ta", "tady", "tak", "take", "takhle", "taky", "takze", "také", "takže", "tam", "tamhle", "tamhleto", "tamto", "tato", "te", "tebe", "tebou", "ted'", "tedy", "tema", "ten", "tento", "teto", "ti", "tim", "timto", "tipy", "tisíc", "tisíce", "to", "tobě", "tohle", "toho", "tohoto", "tom", "tomto", "tomu", "tomuto", "toto", "trošku", "tu", "tuto", "tvoje", "tvá", "tvé", "tvůj", "ty", "tyto", "téma", "této", "tím", "tímto", "tě", "těm", "těma", "těmu", "třeba", "tři", "třináct", "u", "určitě", "uz", "už", "v", "vam", "vas", "vase", "vaše", "vaši", "ve", "vedle", "večer", "vice", "vlastně", "vsak", "vy", "vám", "vámi", "vás", "váš", "více", "však", "všechen", "všechno", "všichni", "vůbec", "vždy", "z", "za", "zatímco", "zač", "zda", "zde", "ze", "zpet", "zpravy", "zprávy", "zpět", "čau", "či", "článek", "článku", "články", "čtrnáct", "čtyři", "šest", "šestnáct", "že"],
  "da": ["ad", "af", "aldrig", "alle", "alt", "anden", "andet", "andre", "at", "bare", "begge", "blev", "blive", "bliver", "da", "de", "dem", "den", "denne", "der", "deres", "det", "dette", "dig", "din", "dine", "disse", "dit", "dog", "du", "efter", "ej", "eller", "en", "end", "ene", "eneste", "enhver", "er", "et", "far", "fem", "fik", "fire", "flere", "fleste", "for", "fordi", "forrige", "fra", "få", "får", "før", "god", "godt", "ham", "han", "hans", "har", "havde", "have", "hej", "helt", "hende", "hendes", "her", "hos", "hun", "hvad", "hvem", "hver", "hvilken", "hvis", "hvor", "hvordan", "hvorfor", "hvornår", "i", "ikke", "ind", "ingen", "intet", "ja", "jeg", "jer", "jeres", "jo", "kan", "kom", "komme", "kommer", "kun", "kunne", "lad", "lav", "lidt", "lige", "lille", "man", "mand", "mange", "med", "meget", "men", "mens", "mere", "mig", "min", "mine", "mit", "mod", "må", "ned", "nej", "ni", "nogen", "noget", "nogle", "nu", "ny", "nyt", "når", "nær", "næste", "næsten", "og", "også", "okay", "om", "op", "os", "otte", "over", "på", "se", "seks", "selv", "ser", "ses", "sig", "sige", "sin", "sine", "sit", "skal", "skulle", "som", "stor", "store", "syv", "så", "sådan", "tag", "tage", "thi", "ti", "til", "to", "tre", "ud", "under", "var", "ved", "vi", "vil", "ville", "vor", "vores", "være", "været"],
  "nl": ["aan", "aangaande", "aangezien", "achte", "achter", "achterna", "af", "afgelopen", "al", "aldaar", "aldus", "alhoewel", "alias", "alle", "allebei", "alleen", "alles", "als", "alsnog", "altijd", "altoos", "ander", "andere", "anders", "anderszins", "beetje", "behalve", "behoudens", "beide", "beiden", "ben", "beneden", "bent", "bepaald", "betreffende", "bij", "bijna", "bijv", "binnen", "binnenin", "blijkbaar", "blijken", "boven", "bovenal", "bovendien", "bovengenoemd", "bovenstaand", "bovenvermeld", "buiten", "bv", "daar", "daardoor", "daarheen", "daarin", "daarna", "daarnet", "daarom", "daarop", "daaruit", "daarvanlangs", "dan", "dat", "de", "deden", "deed", "der", "derde", "derhalve", "dertig", "deze", "dhr", "die", "dikwijls", "dit", "doch", "doe", "doen", "doet", "door", "doorgaand", "drie", "duizend", "dus", "echter", "een", "eens", "eer", "eerdat", "eerder", "eerlang", "eerst", "eerste", "eigen", "eigenlijk", "elk", "elke", "en", "enig", "enige", "enigszins", "enkel", "er", "erdoor", "erg", "ergens", "etc", "etcetera", "even", "eveneens", "evenwel", "gauw", "ge", "gedurende", "geen", "gehad", "gekund", "geleden", "gelijk", "gemoeten", "gemogen", "genoeg", "geweest", "gewoon", "gewoonweg", "haar", "haarzelf", "had", "hadden", "hare", "heb", "hebben", "hebt", "hedden", "heeft", "heel", "hem", "hemzelf", "hen", "het", "hetzelfde", "hier", "hierbeneden", "hierboven", "hierin", "hierna", "hierom", "hij", "hijzelf", "hoe", "hoewel", "honderd", "hun", "hunne", "ieder", "iedere", "iedereen", "iemand", "iets", "ik", "ikzelf", "in", "inderdaad", "inmiddels", "intussen", "inzake", "is", "ja", "je", "jezelf", "jij", "jijzelf", "jou", "jouw", "jouwe", "juist", "jullie", "kan", "klaar", "kon", "konden", "krachtens", "kun", "kunnen", "kunt", "laatst", "later", "liever", "lijken", "lijkt", "maak", "maakt", "maakte", "maakten", "maar", "mag", "maken", "me", "meer", "meest", "meestal", "men", "met", "mevr", "mezelf", "mij", "mijn", "mijnent", "mijner", "mijzelf", "minder", "miss", "misschien", "missen", "mits", "mocht", "mochten", "moest", "moesten", "moet", "moeten", "mogen", "mr", "mrs", "mw", "na", "naar", "nadat", "nam", "namelijk", "nee", "neem", "negen", "nemen", "nergens", "net", "niemand", "niet", "niets", "niks", "noch", "nochtans", "nog", "nogal", "nooit", "nu", "nv", "of", "ofschoon", "om", "omdat", "omhoog", "omlaag", "omstreeks", "omtrent", "omver", "ondanks", "onder", "ondertussen", "ongeveer", "ons", "onszelf", "onze", "onzeker", "ooit", "ook", "op", "opnieuw", "opzij", "over", "overal", "overeind", "overige", "overigens", "paar", "pas", "per", "precies", "recent", "redelijk", "reeds", "rond", "rondom", "samen", "sedert", "sinds", "sindsdien", "slechts", "sommige", "spoedig", "steeds", "tamelijk", "te", "tegen", "tegenover", "tenzij", "terwijl", "thans", "tien", "tiende", "tijdens", "tja", "toch", "toe", "toen", "toenmaals", "toenmalig", "tot", "totdat", "tussen", "twee", "tweede", "u", "uit", "uitgezonderd", "uw", "vaak", "vaakwat", "van", "vanaf", "vandaan", "vanuit", "vanwege", "veel", "veeleer", "veertig", "verder", "verscheidene", "verschillende", "vervolgens", "via", "vier", "vierde", "vijf", "vijfde", "vijftig", "vol", "volgend", "volgens", "voor", "vooraf", "vooral", "vooralsnog", "voorbij", "voordat", "voordezen", "voordien", "voorheen", "voorop", "voorts", "vooruit", "vrij", "vroeg", "waar", "waarom", "waarschijnlijk", "wanneer", "want", "waren", "was", "wat", "we", "wederom", "weer", "weg", "wegens", "weinig", "wel", "weldra", "welk", "welke", "werd", "werden", "werder", "wezen", "whatever", "wie", "wiens", "wier", "wij", "wijzelf", "wil", "wilden", "willen", "word", "worden", "wordt", "zal", "ze", "zei", "zeker", "zelf", "zelfde", "zelfs", "zes", "zeven", "zich", "zichzelf", "zij", "zijn", "zijne", "zijzelf", "zo", "zoals", "zodat", "zodra", "zonder", "zou", "zouden", "zowat", "zulk", "zulke", "zullen", "zult"],
  "en": ["'ll", "'tis", "'twas", "'ve", "10", "39", "a", "a's", "able", "ableabout", "about", "above", "abroad", "abst", "accordance", "according", "accordingly", "across", "act", "actually", "ad", "added", "adj", "adopted", "ae", "af", "affected", "affecting", "affects", "after", "afterwards", "ag", "again", "against", "ago", "ah", "ahead", "ai", "ain't", "aint", "al", "all", "allow", "allows", "almost", "alone", "along", "alongside", "already", "also", "although", "always", "am", "amid", "amidst", "among", "amongst", "amoungst", "amount", "an", "and", "announce", "another", "any", "anybody", "anyhow", "anymore", "anyone", "anything", "anyway", "anyways", "anywhere", "ao", "apart", "apparently", "appear", "appreciate", "appropriate", "approximately", "aq", "ar", "are", "area", "areas", "aren", "aren't", "arent", "arise", "around", "arpa", "as", "aside", "ask", "asked", "asking", "asks", "associated", "at", "au", "auth", "available", "aw", "away", "awfully", "az", "b", "ba", "back", "backed", "backing", "backs", "backward", "backwards", "bb", "bd", "be", "became", "because", "become", "becomes", "becoming", "been", "before", "beforehand", "began", "begin", "beginning", "beginnings", "begins", "behind", "being", "beings", "believe", "below", "beside", "besides", "best", "better", "between", "beyond", "bf", "bg", "bh", "bi", "big", "bill", "billion", "biol", "bj", "bm", "bn", "bo", "both", "bottom", "br", "brief", "briefly", "bs", "bt", "but", "buy", "bv", "bw", "by", "bz", "c", "c'mon", "c's", "ca", "call", "came", "can", "can't", "cannot", "cant", "caption", "case", "cases", "cause", "causes", "cc", "cd", "certain", "certainly", "cf", "cg", "ch", "changes", "ci", "ck", "cl", "clear", "clearly", "click", "cm", "cmon", "cn", "co", "co.", "com", "come", "comes", "computer", "con", "concerning", "consequently", "consider", "considering", "contain", "containing", "contains", "copy", "corresponding", "could", "could've", "couldn", "couldn't", "couldnt", "course", "cr", "cry", "cs", "cu", "currently", "cv", "cx", "cy", "cz", "d", "dare", "daren't", "darent", "date", "de", "dear", "definitely", "describe", "described", "despite", "detail", "did", "didn", "didn't", "didnt", "differ", "different", "differently", "directly", "dj", "dk", "dm", "do", "does", "doesn", "doesn't", "doesnt", "doing", "don", "don't", "done", "dont", "doubtful", "down", "downed", "downing", "downs", "downwards", "due", "during", "dz", "e", "each", "early", "ec", "ed", "edu", "ee", "effect", "eg", "eh", "eight", "eighty", "either", "eleven", "else", "elsewhere", "empty", "end", "ended", "ending", "ends", "enough", "entirely", "er", "es", "especially", "et", "et-al", "etc", "even", "evenly", "ever", "evermore", "every", "everybody", "everyone", "everything", "everywhere", "ex", "exactly", "example", "except", "f", "face", "faces", "fact", "facts", "fairly", "far", "farther", "felt", "few", "fewer", "ff", "fi", "fifteen", "fifth", "fifty", "fify", "fill", "find", "finds", "fire", "first", "five", "fix", "fj", "fk", "fm", "fo", "followed", "following", "follows", "for", "forever", "former", "formerly", "forth", "forty", "forward", "found", "four", "fr", "free", "from", "front", "full", "fully", "further", "furthered", "furthering", "furthermore", "furthers", "fx", "g", "ga", "gave", "gb", "gd", "ge", "general", "generally", "get", "gets", "getting", "gf", "gg", "gh", "gi", "give", "given", "gives", "giving", "gl", "gm", "gmt", "gn", "go", "goes", "going", "gone", "good", "goods", "got", "gotten", "gov", "gp", "gq", "gr", "great", "greater", "greatest", "greetings", "group", "grouped", "grouping", "groups", "gs", "gt", "gu", "gw", "gy", "h", "had", "hadn't", "hadnt", "half", "happens", "hardly", "has", "hasn", "hasn't", "hasnt", "have", "haven", "haven't", "havent", "having", "he", "he'd", "he'll", "he's", "hed", "hell", "hello", "help", "hence", "her", "here", "here's", "hereafter", "hereby", "herein", "heres", "hereupon", "hers", "herself", "herse”", "hes", "hi", "hid", "high", "higher", "highest", "him", "himself", "himse”", "his", "hither", "hk", "hm", "hn", "home", "homepage", "hopefully", "how", "how'd", "how'll", "how's", "howbeit", "however", "hr", "ht", "htm", "html", "http", "hu", "hundred", "i", "i'd", "i'll", "i'm", "i've", "i.e.", "id", "ie", "if", "ignored", "ii", "il", "ill", "im", "immediate", "immediately", "importance", "important", "in", "inasmuch", "inc", "inc.", "indeed", "index", "indicate", "indicated", "indicates", "information", "inner", "inside", "insofar", "instead", "int", "interest", "interested", "interesting", "interests", "into", "invention", "inward", "io", "iq", "ir", "is", "isn", "isn't", "isnt", "it", "it'd", "it'll", "it's", "itd", "itll", "its", "itself", "itse”", "ive", "j", "je", "jm", "jo", "join", "jp", "just", "k", "ke", "keep", "keeps", "kept", "keys", "kg", "kh", "ki", "kind", "km", "kn", "knew", "know", "known", "knows", "kp", "kr", "kw", "ky", "kz", "l", "la", "large", "largely", "last", "lately", "later", "latest", "latter", "latterly", "lb", "lc", "least", "length", "less", "lest", "let", "let's", "lets", "li", "like", "liked", "likely", "likewise", "line", "little", "lk", "ll", "long", "longer", "longest", "look", "looking", "looks", "low", "lower", "lr", "ls", "lt", "ltd", "lu", "lv", "ly", "m", "ma", "made", "mainly", "make", "makes", "making", "man", "many", "may", "maybe", "mayn't", "maynt", "mc", "md", "me", "mean", "means", "meantime", "meanwhile", "member", "members", "men", "merely", "mg", "mh", "microsoft", "might", "might've", "mightn't", "mightnt", "mil", "mill", "million", "mine", "minus", "miss", "mk", "ml", "mm", "mn", "mo", "more", "moreover", "most", "mostly", "move", "mp", "mq", "mr", "mrs", "ms", "msie", "mt", "mu", "much", "mug", "must", "must've", "mustn't", "mustnt", "mv", "mw", "mx", "my", "myself", "myse”", "mz", "n", "na", "name", "namely", "nay", "nc", "nd", "ne", "near", "nearly", "necessarily", "necessary", "need", "needed", "needing", "needn't", "neednt", "needs", "neither", "net", "netscape", "never", "neverf", "neverless", "nevertheless", "new", "newer", "newest", "next", "nf", "ng", "ni", "nine", "ninety", "nl", "no", "no-one", "nobody", "non", "none", "nonetheless", "noone", "nor", "normally", "nos", "not", "noted", "nothing", "notwithstanding", "novel", "now", "nowhere", "np", "nr", "nu", "null", "number", "numbers", "nz", "o", "obtain", "obtained", "obviously", "of", "off", "often", "oh", "ok", "okay", "old", "older", "oldest", "om", "omitted", "on", "once", "one", "one's", "ones", "only", "onto", "open", "opened", "opening", "opens", "opposite", "or", "ord", "order", "ordered", "ordering", "orders", "org", "other", "others", "otherwise", "ought", "oughtn't", "oughtnt", "our", "ours", "ourselves", "out", "outside", "over", "overall", "owing", "own", "p", "pa", "page", "pages", "part", "parted", "particular", "particularly", "parting", "parts", "past", "pe", "per", "perhaps", "pf", "pg", "ph", "pk", "pl", "place", "placed", "places", "please", "plus", "pm", "pmid", "pn", "point", "pointed", "pointing", "points", "poorly", "possible", "possibly", "potentially", "pp", "pr", "predominantly", "present", "presented", "presenting", "presents", "presumably", "previously", "primarily", "probably", "problem", "problems", "promptly", "proud", "provided", "provides", "pt", "put", "puts", "pw", "py", "q", "qa", "que", "quickly", "quite", "qv", "r", "ran", "rather", "rd", "re", "readily", "really", "reasonably", "recent", "recently", "ref", "refs", "regarding", "regardless", "regards", "related", "relatively", "research", "reserved", "respectively", "resulted", "resulting", "results", "right", "ring", "ro", "room", "rooms", "round", "ru", "run", "rw", "s", "sa", "said", "same", "saw", "say", "saying", "says", "sb", "sc", "sd", "se", "sec", "second", "secondly", "seconds", "section", "see", "seeing", "seem", "seemed", "seeming", "seems", "seen", "sees", "self", "selves", "sensible", "sent", "serious", "seriously", "seven", "seventy", "several", "sg", "sh", "shall", "shan't", "shant", "she", "she'd", "she'll", "she's", "shed", "shell", "shes", "should", "should've", "shouldn", "shouldn't", "shouldnt", "show", "showed", "showing", "shown", "showns", "shows", "si", "side", "sides", "significant", "significantly", "similar", "similarly", "since", "sincere", "site", "six", "sixty", "sj", "sk", "sl", "slightly", "sm", "small", "smaller", "smallest", "sn", "so", "some", "somebody", "someday", "somehow", "someone", "somethan", "something", "sometime", "sometimes", "somewhat", "somewhere", "soon", "sorry", "specifically", "specified", "specify", "specifying", "sr", "st", "state", "states", "still", "stop", "strongly", "su", "sub", "substantially", "successfully", "such", "sufficiently", "suggest", "sup", "sure", "sv", "sy", "system", "sz", "t", "t's", "take", "taken", "taking", "tc", "td", "tell", "ten", "tends", "test", "text", "tf", "tg", "th", "than", "thank", "thanks", "thanx", "that", "that'll", "that's", "that've", "thatll", "thats", "thatve", "the", "their", "theirs", "them", "themselves", "then", "thence", "there", "there'd", "there'll", "there're", "there's", "there've", "thereafter", "thereby", "thered", "therefore", "therein", "therell", "thereof", "therere", "theres", "thereto", "thereupon", "thereve", "these", "they", "they'd", "they'll", "they're", "they've", "theyd", "theyll", "theyre", "theyve", "thick", "thin", "thing", "things", "think", "thinks", "third", "thirty", "this", "thorough", "thoroughly", "those", "thou", "though", "thoughh", "thought", "thoughts", "thousand", "three", "throug", "through", "throughout", "thru", "thus", "til", "till", "tip", "tis", "tj", "tk", "tm", "tn", "to", "today", "together", "too", "took", "top", "toward", "towards", "tp", "tr", "tried", "tries", "trillion", "truly", "try", "trying", "ts", "tt", "turn", "turned", "turning", "turns", "tv", "tw", "twas", "twelve", "twenty", "twice", "two", "tz", "u", "ua", "ug", "uk", "um", "un", "under", "underneath", "undoing", "unfortunately", "unless", "unlike", "unlikely", "until", "unto", "up", "upon", "ups", "upwards", "us", "use", "used", "useful", "usefully", "usefulness", "uses", "using", "usually", "uucp", "uy", "uz", "v", "va", "value", "various", "vc", "ve", "versus", "very", "vg", "vi", "via", "viz", "vn", "vol", "vols", "vs", "vu", "w", "want", "wanted", "wanting", "wants", "was", "wasn", "wasn't", "wasnt", "way", "ways", "we", "we'd", "we'll", "we're", "we've", "web", "webpage", "website", "wed", "welcome", "well", "wells", "went", "were", "weren", "weren't", "werent", "weve", "wf", "what", "what'd", "what'll", "what's", "what've", "whatever", "whatll", "whats", "whatve", "when", "when'd", "when'll", "when's", "whence", "whenever", "where", "where'd", "where'll", "where's", "whereafter", "whereas", "whereby", "wherein", "wheres", "whereupon", "wherever", "whether", "which", "whichever", "while", "whilst", "whim", "whither", "who", "who'd", "who'll", "who's", "whod", "whoever", "whole", "wholl", "whom", "whomever", "whos", "whose", "why", "why'd", "why'll", "why's", "widely", "width", "will", "willing", "wish", "with", "within", "without", "won", "won't", "wonder", "wont", "words", "work", "worked", "working", "works", "world", "would", "would've", "wouldn", "wouldn't", "wouldnt", "ws", "www", "x", "y", "ye", "year", "years", "yes", "yet", "you", "you'd", "you'll", "you're", "you've", "youd", "youll", "young", "younger", "youngest", "your", "youre", "yours", "yourself", "yourselves", "youve", "yt", "yu", "z", "za", "zero", "zm", "zr"],
  "eo": ["adiaŭ", "ajn", "al", "ankoraŭ", "antaŭ", "aŭ", "bonan", "bonvole", "bonvolu", "bv", "ci", "cia", "cian", "cin", "d-ro", "da", "de", "dek", "deka", "do", "doktor'", "doktoro", "du", "dua", "dum", "eble", "ekz", "ekzemple", "en", "estas", "estis", "estos", "estu", "estus", "eĉ", "f-no", "feliĉan", "for", "fraŭlino", "ha", "havas", "havis", "havos", "havu", "havus", "he", "ho", "hu", "ili", "ilia", "ilian", "ilin", "inter", "io", "ion", "iu", "iujn", "iun", "ja", "jam", "je", "jes", "k", "kaj", "ke", "kio", "kion", "kiu", "kiujn", "kiun", "kvankam", "kvar", "kvara", "kvazaŭ", "kvin", "kvina", "la", "li", "lia", "lian", "lin", "malantaŭ", "male", "malgraŭ", "mem", "mi", "mia", "mian", "min", "minus", "naŭ", "naŭa", "ne", "nek", "nenio", "nenion", "neniu", "neniun", "nepre", "ni", "nia", "nian", "nin", "nu", "nun", "nur", "ok", "oka", "oni", "onia", "onian", "onin", "plej", "pli", "plu", "plus", "por", "post", "preter", "s-no", "s-ro", "se", "sed", "sep", "sepa", "ses", "sesa", "si", "sia", "sian", "sin", "sinjor'", "sinjorino", "sinjoro", "sub", "super", "supren", "sur", "tamen", "tio", "tion", "tiu", "tiujn", "tiun", "tra", "tri", "tria", "tuj", "tute", "unu", "unua", "ve", "verŝajne", "vi", "via", "vian", "vin", "ĉi", "ĉio", "ĉion", "ĉiu", "ĉiujn", "ĉiun", "ĉu", "ĝi", "ĝia", "ĝian", "ĝin", "ĝis", "ĵus", "ŝi", "ŝia", "ŝin"],
  "et": ["aga", "ei", "et", "ja", "jah", "kas", "kui", "kõik", "ma", "me", "mida", "midagi", "mind", "minu", "mis", "mu", "mul", "mulle", "nad", "nii", "oled", "olen", "oli", "oma", "on", "pole", "sa", "seda", "see", "selle", "siin", "siis", "ta", "te", "ära"],
  "fi": ["aiemmin", "aika", "aikaa", "aikaan", "aikaisemmin", "aikaisin", "aikajen", "aikana", "aikoina", "aikoo", "aikovat", "aina", "ainakaan", "ainakin", "ainoa", "ainoat", "aiomme", "aion", "aiotte", "aist", "aivan", "ajan", "alas", "alemmas", "alkuisin", "alkuun", "alla", "alle", "aloitamme", "aloitan", "aloitat", "aloitatte", "aloitattivat", "aloitettava", "aloitettevaksi", "aloitettu", "aloitimme", "aloitin", "aloitit", "aloititte", "aloittaa", "aloittamatta", "aloitti", "aloittivat", "alta", "aluksi", "alussa", "alusta", "annettavaksi", "annetteva", "annettu", "ansiosta", "antaa", "antamatta", "antoi", "aoua", "apu", "asia", "asiaa", "asian", "asiasta", "asiat", "asioiden", "asioihin", "asioita", "asti", "avuksi", "avulla", "avun", "avutta", "edelle", "edelleen", "edellä", "edeltä", "edemmäs", "edes", "edessä", "edestä", "ehkä", "ei", "eikä", "eilen", "eivät", "eli", "ellei", "elleivät", "ellemme", "ellen", "ellet", "ellette", "emme", "en", "enemmän", "eniten", "ennen", "ensi", "ensimmäinen", "ensimmäiseksi", "ensimmäisen", "ensimmäisenä", "ensimmäiset", "ensimmäisiksi", "ensimmäisinä", "ensimmäisiä", "ensimmäistä", "ensin", "entinen", "entisen", "entisiä", "entisten", "entistä", "enää", "eri", "erittäin", "erityisesti", "eräiden", "eräs", "eräät", "esi", "esiin", "esillä", "esimerkiksi", "et", "eteen", "etenkin", "etessa", "ette", "ettei", "että", "haikki", "halua", "haluaa", "haluamatta", "haluamme", "haluan", "haluat", "haluatte", "haluavat", "halunnut", "halusi", "halusimme", "halusin", "halusit", "halusitte", "halusivat", "halutessa", "haluton", "he", "hei", "heidän", "heidät", "heihin", "heille", "heillä", "heiltä", "heissä", "heistä", "heitä", "helposti", "heti", "hetkellä", "hieman", "hitaasti", "hoikein", "huolimatta", "huomenna", "hyvien", "hyviin", "hyviksi", "hyville", "hyviltä", "hyvin", "hyvinä", "hyvissä", "hyvistä", "hyviä", "hyvä", "hyvät", "hyvää", "hän", "häneen", "hänelle", "hänellä", "häneltä", "hänen", "hänessä", "hänestä", "hänet", "häntä", "ihan", "ilman", "ilmeisesti", "itse", "itsensä", "itseään", "ja", "jo", "johon", "joiden", "joihin", "joiksi", "joilla", "joille", "joilta", "joina", "joissa", "joista", "joita", "joka", "jokainen", "jokin", "joko", "joksi", "joku", "jolla", "jolle", "jolloin", "jolta", "jompikumpi", "jona", "jonka", "jonkin", "jonne", "joo", "jopa", "jos", "joskus", "jossa", "josta", "jota", "jotain", "joten", "jotenkin", "jotenkuten", "jotka", "jotta", "jouduimme", "jouduin", "jouduit", "jouduitte", "joudumme", "joudun", "joudutte", "joukkoon", "joukossa", "joukosta", "joutua", "joutui", "joutuivat", "joutumaan", "joutuu", "joutuvat", "juuri", "jälkeen", "jälleen", "jää", "kahdeksan", "kahdeksannen", "kahdella", "kahdelle", "kahdelta", "kahden", "kahdessa", "kahdesta", "kahta", "kahteen", "kai", "kaiken", "kaikille", "kaikilta", "kaikkea", "kaikki", "kaikkia", "kaikkiaan", "kaikkialla", "kaikkialle", "kaikkialta", "kaikkien", "kaikkin", "kaksi", "kannalta", "kannattaa", "kanssa", "kanssaan", "kanssamme", "kanssani", "kanssanne", "kanssasi", "kauan", "kauemmas", "kaukana", "kautta", "kehen", "keiden", "keihin", "keiksi", "keille", "keillä", "keiltä", "keinä", "keissä", "keistä", "keitten", "keittä", "keitä", "keneen", "keneksi", "kenelle", "kenellä", "keneltä", "kenen", "kenenä", "kenessä", "kenestä", "kenet", "kenettä", "kennessästä", "kenties", "kerran", "kerta", "kertaa", "keskellä", "kesken", "keskimäärin", "ketkä", "ketä", "kiitos", "kohti", "koko", "kokonaan", "kolmas", "kolme", "kolmen", "kolmesti", "koska", "koskaan", "kovin", "kuin", "kuinka", "kuinkan", "kuitenkaan", "kuitenkin", "kuka", "kukaan", "kukin", "kukka", "kumpainen", "kumpainenkaan", "kumpi", "kumpikaan", "kumpikin", "kun", "kuten", "kuuden", "kuusi", "kuutta", "kylliksi", "kyllä", "kymmenen", "kyse", "liian", "liki", "lisäksi", "lisää", "lla", "luo", "luona", "lähekkäin", "lähelle", "lähellä", "läheltä", "lähemmäs", "lähes", "lähinnä", "lähtien", "läpi", "mahdollisimman", "mahdollista", "me", "meidän", "meidät", "meihin", "meille", "meillä", "meiltä", "meissä", "meistä", "meitä", "melkein", "melko", "menee", "meneet", "menemme", "menen", "menet", "menette", "menevät", "meni", "menimme", "menin", "menit", "menivät", "mennessä", "mennyt", "menossa", "mihin", "mikin", "miksi", "mikä", "mikäli", "mikään", "mille", "milloin", "milloinkan", "millä", "miltä", "minkä", "minne", "minua", "minulla", "minulle", "minulta", "minun", "minussa", "minusta", "minut", "minuun", "minä", "missä", "mistä", "miten", "mitkä", "mitä", "mitään", "moi", "molemmat", "mones", "monesti", "monet", "moni", "moniaalla", "moniaalle", "moniaalta", "monta", "muassa", "muiden", "muita", "muka", "mukaan", "mukaansa", "mukana", "mutta", "muu", "muualla", "muualle", "muualta", "muuanne", "muulloin", "muun", "muut", "muuta", "muutama", "muutaman", "muuten", "myöhemmin", "myös", "myöskin", "myöskään", "myötä", "ne", "neljä", "neljän", "neljää", "niiden", "niihin", "niiksi", "niille", "niillä", "niiltä", "niin", "niinä", "niissä", "niistä", "niitä", "noiden", "noihin", "noiksi", "noilla", "noille", "noilta", "noin", "noina", "noissa", "noista", "noita", "nopeammin", "nopeasti", "nopeiten", "nro", "nuo", "nyt", "näiden", "näihin", "näiksi", "näille", "näillä", "näiltä", "näin", "näinä", "näissä", "näissähin", "näissälle", "näissältä", "näissästä", "näistä", "näitä", "nämä", "ohi", "oikea", "oikealla", "oikein", "ole", "olemme", "olen", "olet", "olette", "oleva", "olevan", "olevat", "oli", "olimme", "olin", "olisi", "olisimme", "olisin", "olisit", "olisitte", "olisivat", "olit", "olitte", "olivat", "olla", "olleet", "olli", "ollut", "oma", "omaa", "omaan", "omaksi", "omalle", "omalta", "oman", "omassa", "omat", "omia", "omien", "omiin", "omiksi", "omille", "omilta", "omissa", "omista", "on", "onkin", "onko", "ovat", "paikoittain", "paitsi", "pakosti", "paljon", "paremmin", "parempi", "parhaillaan", "parhaiten", "perusteella", "peräti", "pian", "pieneen", "pieneksi", "pienelle", "pienellä", "pieneltä", "pienempi", "pienestä", "pieni", "pienin", "poikki", "puolesta", "puolestaan", "päälle", "runsaasti", "saakka", "sadam", "sama", "samaa", "samaan", "samalla", "samallalta", "samallassa", "samallasta", "saman", "samat", "samoin", "sata", "sataa", "satojen", "se", "seitsemän", "sekä", "sen", "seuraavat", "siellä", "sieltä", "siihen", "siinä", "siis", "siitä", "sijaan", "siksi", "sille", "silloin", "sillä", "silti", "siltä", "sinne", "sinua", "sinulla", "sinulle", "sinulta", "sinun", "sinussa", "sinusta", "sinut", "sinuun", "sinä", "sisäkkäin", "sisällä", "siten", "sitten", "sitä", "ssa", "sta", "suoraan", "suuntaan", "suuren", "suuret", "suuri", "suuria", "suurin", "suurten", "taa", "taas", "taemmas", "tahansa", "tai", "takaa", "takaisin", "takana", "takia", "tallä", "tapauksessa", "tarpeeksi", "tavalla", "tavoitteena", "te", "teidän", "teidät", "teihin", "teille", "teillä", "teiltä", "teissä", "teistä", "teitä", "tietysti", "todella", "toinen", "toisaalla", "toisaalle", "toisaalta", "toiseen", "toiseksi", "toisella", "toiselle", "toiselta", "toisemme", "toisen", "toisensa", "toisessa", "toisesta", "toista", "toistaiseksi", "toki", "tosin", "tuhannen", "tuhat", "tule", "tulee", "tulemme", "tulen", "tulet", "tulette", "tulevat", "tulimme", "tulin", "tulisi", "tulisimme", "tulisin", "tulisit", "tulisitte", "tulisivat", "tulit", "tulitte", "tulivat", "tulla", "tulleet", "tullut", "tuntuu", "tuo", "tuohon", "tuoksi", "tuolla", "tuolle", "tuolloin", "tuolta", "tuon", "tuona", "tuonne", "tuossa", "tuosta", "tuota", "tuotä", "tuskin", "tykö", "tähän", "täksi", "tälle", "tällä", "tällöin", "tältä", "tämä", "tämän", "tänne", "tänä", "tänään", "tässä", "tästä", "täten", "tätä", "täysin", "täytyvät", "täytyy", "täällä", "täältä", "ulkopuolella", "usea", "useasti", "useimmiten", "usein", "useita", "uudeksi", "uudelleen", "uuden", "uudet", "uusi", "uusia", "uusien", "uusinta", "uuteen", "uutta", "vaan", "vahemmän", "vai", "vaiheessa", "vaikea", "vaikean", "vaikeat", "vaikeilla", "vaikeille", "vaikeilta", "vaikeissa", "vaikeista", "vaikka", "vain", "varmasti", "varsin", "varsinkin", "varten", "vasen", "vasenmalla", "vasta", "vastaan", "vastakkain", "vastan", "verran", "vielä", "vierekkäin", "vieressä", "vieri", "viiden", "viime", "viimeinen", "viimeisen", "viimeksi", "viisi", "voi", "voidaan", "voimme", "voin", "voisi", "voit", "voitte", "voivat", "vuoden", "vuoksi", "vuosi", "vuosien", "vuosina", "vuotta", "vähemmän", "vähintään", "vähiten", "vähän", "välillä", "yhdeksän", "yhden", "yhdessä", "yhteen", "yhteensä", "yhteydessä", "yhteyteen", "yhtä", "yhtäälle", "yhtäällä", "yhtäältä", "yhtään", "yhä", "yksi", "yksin", "yksittäin", "yleensä", "ylemmäs", "yli", "ylös", "ympäri", "älköön", "älä"],
  "fr": ["a", "abord", "absolument", "afin", "ah", "ai", "aie", "aient", "aies", "ailleurs", "ainsi", "ait", "allaient", "allo", "allons", "allô", "alors", "anterieur", "anterieure", "anterieures", "apres", "après", "as", "assez", "attendu", "au", "aucun", "aucune", "aucuns", "aujourd", "aujourd'hui", "aupres", "auquel", "aura", "aurai", "auraient", "aurais", "aurait", "auras", "aurez", "auriez", "aurions", "aurons", "auront", "aussi", "autant", "autre", "autrefois", "autrement", "autres", "autrui", "aux", "auxquelles", "auxquels", "avaient", "avais", "avait", "avant", "avec", "avez", "aviez", "avions", "avoir", "avons", "ayant", "ayez", "ayons", "b", "bah", "bas", "basee", "bat", "beau", "beaucoup", "bien", "bigre", "bon", "boum", "bravo", "brrr", "c", "car", "ce", "ceci", "cela", "celle", "celle-ci", "celle-là", "celles", "celles-ci", "celles-là", "celui", "celui-ci", "celui-là", "celà", "cent", "cependant", "certain", "certaine", "certaines", "certains", "certes", "ces", "cet", "cette", "ceux", "ceux-ci", "ceux-là", "chacun", "chacune", "chaque", "cher", "chers", "chez", "chiche", "chut", "chère", "chères", "ci", "cinq", "cinquantaine", "cinquante", "cinquantième", "cinquième", "clac", "clic", "combien", "comme", "comment", "comparable", "comparables", "compris", "concernant", "contre", "couic", "crac", "d", "da", "dans", "de", "debout", "dedans", "dehors", "deja", "delà", "depuis", "dernier", "derniere", "derriere", "derrière", "des", "desormais", "desquelles", "desquels", "dessous", "dessus", "deux", "deuxième", "deuxièmement", "devant", "devers", "devra", "devrait", "different", "differentes", "differents", "différent", "différente", "différentes", "différents", "dire", "directe", "directement", "dit", "dite", "dits", "divers", "diverse", "diverses", "dix", "dix-huit", "dix-neuf", "dix-sept", "dixième", "doit", "doivent", "donc", "dont", "dos", "douze", "douzième", "dring", "droite", "du", "duquel", "durant", "dès", "début", "désormais", "e", "effet", "egale", "egalement", "egales", "eh", "elle", "elle-même", "elles", "elles-mêmes", "en", "encore", "enfin", "entre", "envers", "environ", "es", "essai", "est", "et", "etant", "etc", "etre", "eu", "eue", "eues", "euh", "eurent", "eus", "eusse", "eussent", "eusses", "eussiez", "eussions", "eut", "eux", "eux-mêmes", "exactement", "excepté", "extenso", "exterieur", "eûmes", "eût", "eûtes", "f", "fais", "faisaient", "faisant", "fait", "faites", "façon", "feront", "fi", "flac", "floc", "fois", "font", "force", "furent", "fus", "fusse", "fussent", "fusses", "fussiez", "fussions", "fut", "fûmes", "fût", "fûtes", "g", "gens", "h", "ha", "haut", "hein", "hem", "hep", "hi", "ho", "holà", "hop", "hormis", "hors", "hou", "houp", "hue", "hui", "huit", "huitième", "hum", "hurrah", "hé", "hélas", "i", "ici", "il", "ils", "importe", "j", "je", "jusqu", "jusque", "juste", "k", "l", "la", "laisser", "laquelle", "las", "le", "lequel", "les", "lesquelles", "lesquels", "leur", "leurs", "longtemps", "lors", "lorsque", "lui", "lui-meme", "lui-même", "là", "lès", "m", "ma", "maint", "maintenant", "mais", "malgre", "malgré", "maximale", "me", "meme", "memes", "merci", "mes", "mien", "mienne", "miennes", "miens", "mille", "mince", "mine", "minimale", "moi", "moi-meme", "moi-même", "moindres", "moins", "mon", "mot", "moyennant", "multiple", "multiples", "même", "mêmes", "n", "na", "naturel", "naturelle", "naturelles", "ne", "neanmoins", "necessaire", "necessairement", "neuf", "neuvième", "ni", "nombreuses", "nombreux", "nommés", "non", "nos", "notamment", "notre", "nous", "nous-mêmes", "nouveau", "nouveaux", "nul", "néanmoins", "nôtre", "nôtres", "o", "oh", "ohé", "ollé", "olé", "on", "ont", "onze", "onzième", "ore", "ou", "ouf", "ouias", "oust", "ouste", "outre", "ouvert", "ouverte", "ouverts", "o|", "où", "p", "paf", "pan", "par", "parce", "parfois", "parle", "parlent", "parler", "parmi", "parole", "parseme", "partant", "particulier", "particulière", "particulièrement", "pas", "passé", "pendant", "pense", "permet", "personne", "personnes", "peu", "peut", "peuvent", "peux", "pff", "pfft", "pfut", "pif", "pire", "pièce", "plein", "plouf", "plupart", "plus", "plusieurs", "plutôt", "possessif", "possessifs", "possible", "possibles", "pouah", "pour", "pourquoi", "pourrais", "pourrait", "pouvait", "prealable", "precisement", "premier", "première", "premièrement", "pres", "probable", "probante", "procedant", "proche", "près", "psitt", "pu", "puis", "puisque", "pur", "pure", "q", "qu", "quand", "quant", "quant-à-soi", "quanta", "quarante", "quatorze", "quatre", "quatre-vingt", "quatrième", "quatrièmement", "que", "quel", "quelconque", "quelle", "quelles", "quelqu'un", "quelque", "quelques", "quels", "qui", "quiconque", "quinze", "quoi", "quoique", "r", "rare", "rarement", "rares", "relative", "relativement", "remarquable", "rend", "rendre", "restant", "reste", "restent", "restrictif", "retour", "revoici", "revoilà", "rien", "s", "sa", "sacrebleu", "sait", "sans", "sapristi", "sauf", "se", "sein", "seize", "selon", "semblable", "semblaient", "semble", "semblent", "sent", "sept", "septième", "sera", "serai", "seraient", "serais", "serait", "seras", "serez", "seriez", "serions", "serons", "seront", "ses", "seul", "seule", "seulement", "si", "sien", "sienne", "siennes", "siens", "sinon", "six", "sixième", "soi", "soi-même", "soient", "sois", "soit", "soixante", "sommes", "son", "sont", "sous", "souvent", "soyez", "soyons", "specifique", "specifiques", "speculatif", "stop", "strictement", "subtiles", "suffisant", "suffisante", "suffit", "suis", "suit", "suivant", "suivante", "suivantes", "suivants", "suivre", "sujet", "superpose", "sur", "surtout", "t", "ta", "tac", "tandis", "tant", "tardive", "te", "tel", "telle", "tellement", "telles", "tels", "tenant", "tend", "tenir", "tente", "tes", "tic", "tien", "tienne", "tiennes", "tiens", "toc", "toi", "toi-même", "ton", "touchant", "toujours", "tous", "tout", "toute", "toutefois", "toutes", "treize", "trente", "tres", "trois", "troisième", "troisièmement", "trop", "très", "tsoin", "tsouin", "tu", "té", "u", "un", "une", "unes", "uniformement", "unique", "uniques", "uns", "v", "va", "vais", "valeur", "vas", "vers", "via", "vif", "vifs", "vingt", "vivat", "vive", "vives", "vlan", "voici", "voie", "voient", "voilà", "voire", "vont", "vos", "votre", "vous", "vous-mêmes", "vu", "vé", "vôtre", "vôtres", "w", "x", "y", "z", "zut", "à", "â", "ça", "ès", "étaient", "étais", "était", "étant", "état", "étiez", "étions", "été", "étée", "étées", "étés", "êtes", "être", "ô"],
  "gl": ["a", "alí", "ao", "aos", "aquel", "aquela", "aquelas", "aqueles", "aquilo", "aquí", "as", "así", "aínda", "ben", "cando", "che", "co", "coa", "coas", "comigo", "con", "connosco", "contigo", "convosco", "cos", "cun", "cunha", "cunhas", "cuns", "da", "dalgunha", "dalgunhas", "dalgún", "dalgúns", "das", "de", "del", "dela", "delas", "deles", "desde", "deste", "do", "dos", "dun", "dunha", "dunhas", "duns", "e", "el", "ela", "elas", "eles", "en", "era", "eran", "esa", "esas", "ese", "eses", "esta", "estaba", "estar", "este", "estes", "estiven", "estou", "está", "están", "eu", "facer", "foi", "foron", "fun", "había", "hai", "iso", "isto", "la", "las", "lle", "lles", "lo", "los", "mais", "me", "meu", "meus", "min", "miña", "miñas", "moi", "na", "nas", "neste", "nin", "no", "non", "nos", "nosa", "nosas", "noso", "nosos", "nun", "nunha", "nunhas", "nuns", "nós", "o", "os", "ou", "para", "pero", "pode", "pois", "pola", "polas", "polo", "polos", "por", "que", "se", "senón", "ser", "seu", "seus", "sexa", "sido", "sobre", "súa", "súas", "tamén", "tan", "te", "ten", "ter", "teu", "teus", "teñen", "teño", "ti", "tido", "tiven", "tiña", "túa", "túas", "un", "unha", "unhas", "uns", "vos", "vosa", "vosas", "voso", "vosos", "vós", "á", "é", "ó", "ós"],
  "de": ["a", "ab", "aber", "ach", "acht", "achte", "achten", "achter", "achtes", "ag", "alle", "allein", "allem", "allen", "aller", "allerdings", "alles", "allgemeinen", "als", "also", "am", "an", "ander", "andere", "anderem", "anderen", "anderer", "anderes", "anderm", "andern", "anderr", "anders", "au", "auch", "auf", "aus", "ausser", "ausserdem", "außer", "außerdem", "b", "bald", "bei", "beide", "beiden", "beim", "beispiel", "bekannt", "bereits", "besonders", "besser", "besten", "bin", "bis", "bisher", "bist", "c", "d", "d.h", "da", "dabei", "dadurch", "dafür", "dagegen", "daher", "dahin", "dahinter", "damals", "damit", "danach", "daneben", "dank", "dann", "daran", "darauf", "daraus", "darf", "darfst", "darin", "darum", "darunter", "darüber", "das", "dasein", "daselbst", "dass", "dasselbe", "davon", "davor", "dazu", "dazwischen", "daß", "dein", "deine", "deinem", "deinen", "deiner", "deines", "dem", "dementsprechend", "demgegenüber", "demgemäss", "demgemäß", "demselben", "demzufolge", "den", "denen", "denn", "denselben", "der", "deren", "derer", "derjenige", "derjenigen", "dermassen", "dermaßen", "derselbe", "derselben", "des", "deshalb", "desselben", "dessen", "deswegen", "dich", "die", "diejenige", "diejenigen", "dies", "diese", "dieselbe", "dieselben", "diesem", "diesen", "dieser", "dieses", "dir", "doch", "dort", "drei", "drin", "dritte", "dritten", "dritter", "drittes", "du", "durch", "durchaus", "durfte", "durften", "dürfen", "dürft", "e", "eben", "ebenso", "ehrlich", "ei", "ei,", "eigen", "eigene", "eigenen", "eigener", "eigenes", "ein", "einander", "eine", "einem", "einen", "einer", "eines", "einig", "einige", "einigem", "einigen", "einiger", "einiges", "einmal", "eins", "elf", "en", "ende", "endlich", "entweder", "er", "ernst", "erst", "erste", "ersten", "erster", "erstes", "es", "etwa", "etwas", "euch", "euer", "eure", "eurem", "euren", "eurer", "eures", "f", "folgende", "früher", "fünf", "fünfte", "fünften", "fünfter", "fünftes", "für", "g", "gab", "ganz", "ganze", "ganzen", "ganzer", "ganzes", "gar", "gedurft", "gegen", "gegenüber", "gehabt", "gehen", "geht", "gekannt", "gekonnt", "gemacht", "gemocht", "gemusst", "genug", "gerade", "gern", "gesagt", "geschweige", "gewesen", "gewollt", "geworden", "gibt", "ging", "gleich", "gott", "gross", "grosse", "grossen", "grosser", "grosses", "groß", "große", "großen", "großer", "großes", "gut", "gute", "guter", "gutes", "h", "hab", "habe", "haben", "habt", "hast", "hat", "hatte", "hatten", "hattest", "hattet", "heisst", "her", "heute", "hier", "hin", "hinter", "hoch", "hätte", "hätten", "i", "ich", "ihm", "ihn", "ihnen", "ihr", "ihre", "ihrem", "ihren", "ihrer", "ihres", "im", "immer", "in", "indem", "infolgedessen", "ins", "irgend", "ist", "j", "ja", "jahr", "jahre", "jahren", "je", "jede", "jedem", "jeden", "jeder", "jedermann", "jedermanns", "jedes", "jedoch", "jemand", "jemandem", "jemanden", "jene", "jenem", "jenen", "jener", "jenes", "jetzt", "k", "kam", "kann", "kannst", "kaum", "kein", "keine", "keinem", "keinen", "keiner", "keines", "kleine", "kleinen", "kleiner", "kleines", "kommen", "kommt", "konnte", "konnten", "kurz", "können", "könnt", "könnte", "l", "lang", "lange", "leicht", "leide", "lieber", "los", "m", "machen", "macht", "machte", "mag", "magst", "mahn", "mal", "man", "manche", "manchem", "manchen", "mancher", "manches", "mann", "mehr", "mein", "meine", "meinem", "meinen", "meiner", "meines", "mensch", "menschen", "mich", "mir", "mit", "mittel", "mochte", "mochten", "morgen", "muss", "musst", "musste", "mussten", "muß", "mußt", "möchte", "mögen", "möglich", "mögt", "müssen", "müsst", "müßt", "n", "na", "nach", "nachdem", "nahm", "natürlich", "neben", "nein", "neue", "neuen", "neun", "neunte", "neunten", "neunter", "neuntes", "nicht", "nichts", "nie", "niemand", "niemandem", "niemanden", "noch", "nun", "nur", "o", "ob", "oben", "oder", "offen", "oft", "ohne", "ordnung", "p", "q", "r", "recht", "rechte", "rechten", "rechter", "rechtes", "richtig", "rund", "s", "sa", "sache", "sagt", "sagte", "sah", "satt", "schlecht", "schluss", "schon", "sechs", "sechste", "sechsten", "sechster", "sechstes", "sehr", "sei", "seid", "seien", "sein", "seine", "seinem", "seinen", "seiner", "seines", "seit", "seitdem", "selbst", "sich", "sie", "sieben", "siebente", "siebenten", "siebenter", "siebentes", "sind", "so", "solang", "solche", "solchem", "solchen", "solcher", "solches", "soll", "sollen", "sollst", "sollt", "sollte", "sollten", "sondern", "sonst", "soweit", "sowie", "später", "startseite", "statt", "steht", "suche", "t", "tag", "tage", "tagen", "tat", "teil", "tel", "tritt", "trotzdem", "tun", "u", "uhr", "um", "und", "uns", "unse", "unsem", "unsen", "unser", "unsere", "unserer", "unses", "unter", "v", "vergangenen", "viel", "viele", "vielem", "vielen", "vielleicht", "vier", "vierte", "vierten", "vierter", "viertes", "vom", "von", "vor", "w", "wahr", "wann", "war", "waren", "warst", "wart", "warum", "was", "weg", "wegen", "weil", "weit", "weiter", "weitere", "weiteren", "weiteres", "welche", "welchem", "welchen", "welcher", "welches", "wem", "wen", "wenig", "wenige", "weniger", "weniges", "wenigstens", "wenn", "wer", "werde", "werden", "werdet", "weshalb", "wessen", "wie", "wieder", "wieso", "will", "willst", "wir", "wird", "wirklich", "wirst", "wissen", "wo", "woher", "wohin", "wohl", "wollen", "wollt", "wollte", "wollten", "worden", "wurde", "wurden", "während", "währenddem", "währenddessen", "wäre", "würde", "würden", "x", "y", "z", "z.b", "zehn", "zehnte", "zehnten", "zehnter", "zehntes", "zeit", "zu", "zuerst", "zugleich", "zum", "zunächst", "zur", "zurück", "zusammen", "zwanzig", "zwar", "zwei", "zweite", "zweiten", "zweiter", "zweites", "zwischen", "zwölf", "über", "überhaupt", "übrigens"],
  "el": ["ένα", "έναν", "ένας", "αι", "ακομα", "ακομη", "ακριβως", "αληθεια", "αληθινα", "αλλα", "αλλαχου", "αλλες", "αλλη", "αλλην", "αλλης", "αλλιως", "αλλιωτικα", "αλλο", "αλλοι", "αλλοιως", "αλλοιωτικα", "αλλον", "αλλος", "αλλοτε", "αλλου", "αλλους", "αλλων", "αμα", "αμεσα", "αμεσως", "αν", "ανα", "αναμεσα", "αναμεταξυ", "ανευ", "αντι", "αντιπερα", "αντις", "ανω", "ανωτερω", "αξαφνα", "απ", "απεναντι", "απο", "αποψε", "από", "αρα", "αραγε", "αργα", "αργοτερο", "αριστερα", "αρκετα", "αρχικα", "ας", "αυριο", "αυτα", "αυτες", "αυτεσ", "αυτη", "αυτην", "αυτης", "αυτο", "αυτοι", "αυτον", "αυτος", "αυτοσ", "αυτου", "αυτους", "αυτουσ", "αυτων", "αφοτου", "αφου", "αἱ", "αἳ", "αἵ", "αὐτόσ", "αὐτὸς", "αὖ", "α∆ιακοπα", "βεβαια", "βεβαιοτατα", "γάρ", "γα", "γα^", "γε", "γι", "για", "γοῦν", "γρηγορα", "γυρω", "γὰρ", "δ'", "δέ", "δή", "δαί", "δαίσ", "δαὶ", "δαὶς", "δε", "δεν", "δι", "δι'", "διά", "δια", "διὰ", "δὲ", "δὴ", "δ’", "εαν", "εαυτο", "εαυτον", "εαυτου", "εαυτους", "εαυτων", "εγκαιρα", "εγκαιρως", "εγω", "ειθε", "ειμαι", "ειμαστε", "ειναι", "εις", "εισαι", "εισαστε", "ειστε", "ειτε", "ειχα", "ειχαμε", "ειχαν", "ειχατε", "ειχε", "ειχες", "ει∆εμη", "εκ", "εκαστα", "εκαστες", "εκαστη", "εκαστην", "εκαστης", "εκαστο", "εκαστοι", "εκαστον", "εκαστος", "εκαστου", "εκαστους", "εκαστων", "εκει", "εκεινα", "εκεινες", "εκεινεσ", "εκεινη", "εκεινην", "εκεινης", "εκεινο", "εκεινοι", "εκεινον", "εκεινος", "εκεινοσ", "εκεινου", "εκεινους", "εκεινουσ", "εκεινων", "εκτος", "εμας", "εμεις", "εμενα", "εμπρος", "εν", "ενα", "εναν", "ενας", "ενος", "εντελως", "εντος", "εντωμεταξυ", "ενω", "ενός", "εξ", "εξαφνα", "εξης", "εξισου", "εξω", "επ", "επί", "επανω", "επειτα", "επει∆η", "επι", "επισης", "επομενως", "εσας", "εσεις", "εσενα", "εστω", "εσυ", "ετερα", "ετεραι", "ετερας", "ετερες", "ετερη", "ετερης", "ετερο", "ετεροι", "ετερον", "ετερος", "ετερου", "ετερους", "ετερων", "ετουτα", "ετουτες", "ετουτη", "ετουτην", "ετουτης", "ετουτο", "ετουτοι", "ετουτον", "ετουτος", "ετουτου", "ετουτους", "ετουτων", "ετσι", "ευγε", "ευθυς", "ευτυχως", "εφεξης", "εχει", "εχεις", "εχετε", "εχθες", "εχομε", "εχουμε", "εχουν", "εχτες", "εχω", "εως", "εἰ", "εἰμί", "εἰμὶ", "εἰς", "εἰσ", "εἴ", "εἴμι", "εἴτε", "ε∆ω", "η", "ημασταν", "ημαστε", "ημουν", "ησασταν", "ησαστε", "ησουν", "ηταν", "ητανε", "ητοι", "ηττον", "η∆η", "θα", "ι", "ιι", "ιιι", "ισαμε", "ισια", "ισως", "ισωσ", "ι∆ια", "ι∆ιαν", "ι∆ιας", "ι∆ιες", "ι∆ιο", "ι∆ιοι", "ι∆ιον", "ι∆ιος", "ι∆ιου", "ι∆ιους", "ι∆ιων", "ι∆ιως", "κ", "καί", "καίτοι", "καθ", "καθε", "καθεμια", "καθεμιας", "καθενα", "καθενας", "καθενος", "καθετι", "καθολου", "καθως", "και", "κακα", "κακως", "καλα", "καλως", "καμια", "καμιαν", "καμιας", "καμποσα", "καμποσες", "καμποση", "καμποσην", "καμποσης", "καμποσο", "καμποσοι", "καμποσον", "καμποσος", "καμποσου", "καμποσους", "καμποσων", "κανεις", "κανεν", "κανενα", "κανεναν", "κανενας", "κανενος", "καποια", "καποιαν", "καποιας", "καποιες", "καποιο", "καποιοι", "καποιον", "καποιος", "καποιου", "καποιους", "καποιων", "καποτε", "καπου", "καπως", "κατ", "κατά", "κατα", "κατι", "κατιτι", "κατοπιν", "κατω", "κατὰ", "καὶ", "κι", "κιολας", "κλπ", "κοντα", "κτλ", "κυριως", "κἀν", "κἂν", "λιγακι", "λιγο", "λιγωτερο", "λογω", "λοιπα", "λοιπον", "μέν", "μέσα", "μή", "μήτε", "μία", "μα", "μαζι", "μακαρι", "μακρυα", "μαλιστα", "μαλλον", "μας", "με", "μεθ", "μεθαυριο", "μειον", "μελει", "μελλεται", "μεμιας", "μεν", "μερικα", "μερικες", "μερικοι", "μερικους", "μερικων", "μεσα", "μετ", "μετά", "μετα", "μεταξυ", "μετὰ", "μεχρι", "μη", "μην", "μηπως", "μητε", "μη∆ε", "μιά", "μια", "μιαν", "μιας", "μολις", "μολονοτι", "μοναχα", "μονες", "μονη", "μονην", "μονης", "μονο", "μονοι", "μονομιας", "μονος", "μονου", "μονους", "μονων", "μου", "μπορει", "μπορουν", "μπραβο", "μπρος", "μἐν", "μὲν", "μὴ", "μὴν", "να", "ναι", "νωρις", "ξανα", "ξαφνικα", "ο", "οι", "ολα", "ολες", "ολη", "ολην", "ολης", "ολο", "ολογυρα", "ολοι", "ολον", "ολονεν", "ολος", "ολοτελα", "ολου", "ολους", "ολων", "ολως", "ολως∆ιολου", "ομως", "ομωσ", "οποια", "οποιαν", "οποιαν∆ηποτε", "οποιας", "οποιας∆ηποτε", "οποια∆ηποτε", "οποιες", "οποιες∆ηποτε", "οποιο", "οποιοι", "οποιον", "οποιον∆ηποτε", "οποιος", "οποιος∆ηποτε", "οποιου", "οποιους", "οποιους∆ηποτε", "οποιου∆ηποτε", "οποιο∆ηποτε", "οποιων", "οποιων∆ηποτε", "οποι∆ηποτε", "οποτε", "οποτε∆ηποτε", "οπου", "οπου∆ηποτε", "οπως", "οπωσ", "ορισμενα", "ορισμενες", "ορισμενων", "ορισμενως", "οσα", "οσα∆ηποτε", "οσες", "οσες∆ηποτε", "οση", "οσην", "οσην∆ηποτε", "οσης", "οσης∆ηποτε", "οση∆ηποτε", "οσο", "οσοι", "οσοι∆ηποτε", "οσον", "οσον∆ηποτε", "οσος", "οσος∆ηποτε", "οσου", "οσους", "οσους∆ηποτε", "οσου∆ηποτε", "οσο∆ηποτε", "οσων", "οσων∆ηποτε", "οταν", "οτι", "οτι∆ηποτε", "οτου", "ου", "ουτε", "ου∆ε", "οχι", "οἱ", "οἳ", "οἷς", "οὐ", "οὐδ", "οὐδέ", "οὐδείσ", "οὐδεὶς", "οὐδὲ", "οὐδὲν", "οὐκ", "οὐχ", "οὐχὶ", "οὓς", "οὔτε", "οὕτω", "οὕτως", "οὕτωσ", "οὖν", "οὗ", "οὗτος", "οὗτοσ", "παλι", "παντοτε", "παντου", "παντως", "παρ", "παρά", "παρα", "παρὰ", "περί", "περα", "περι", "περιπου", "περισσοτερο", "περσι", "περυσι", "περὶ", "πια", "πιθανον", "πιο", "πισω", "πλαι", "πλεον", "πλην", "ποια", "ποιαν", "ποιας", "ποιες", "ποιεσ", "ποιο", "ποιοι", "ποιον", "ποιος", "ποιοσ", "ποιου", "ποιους", "ποιουσ", "ποιων", "πολυ", "ποσες", "ποση", "ποσην", "ποσης", "ποσοι", "ποσος", "ποσους", "ποτε", "που", "πουθε", "πουθενα", "ποῦ", "πρεπει", "πριν", "προ", "προκειμενου", "προκειται", "προπερσι", "προς", "προσ", "προτου", "προχθες", "προχτες", "πρωτυτερα", "πρόσ", "πρὸ", "πρὸς", "πως", "πωσ", "σαν", "σας", "σε", "σεις", "σημερα", "σιγα", "σου", "στα", "στη", "στην", "στης", "στις", "στο", "στον", "στου", "στους", "στων", "συγχρονως", "συν", "συναμα", "συνεπως", "συνηθως", "συχνα", "συχνας", "συχνες", "συχνη", "συχνην", "συχνης", "συχνο", "συχνοι", "συχνον", "συχνος", "συχνου", "συχνους", "συχνων", "συχνως", "σχε∆ον", "σωστα", "σόσ", "σύ", "σύν", "σὸς", "σὺ", "σὺν", "τά", "τήν", "τί", "τίς", "τίσ", "τα", "ταυτα", "ταυτες", "ταυτη", "ταυτην", "ταυτης", "ταυτο,ταυτον", "ταυτος", "ταυτου", "ταυτων", "ταχα", "ταχατε", "ταῖς", "τα∆ε", "τε", "τελικα", "τελικως", "τες", "τετοια", "τετοιαν", "τετοιας", "τετοιες", "τετοιο", "τετοιοι", "τετοιον", "τετοιος", "τετοιου", "τετοιους", "τετοιων", "τη", "την", "της", "τησ", "τι", "τινα", "τιποτα", "τιποτε", "τις", "τισ", "το", "τοί", "τοι", "τοιοῦτος", "τοιοῦτοσ", "τον", "τος", "τοσα", "τοσες", "τοση", "τοσην", "τοσης", "τοσο", "τοσοι", "τοσον", "τοσος", "τοσου", "τοσους", "τοσων", "τοτε", "του", "τουλαχιστο", "τουλαχιστον", "τους", "τουτα", "τουτες", "τουτη", "τουτην", "τουτης", "τουτο", "τουτοι", "τουτοις", "τουτον", "τουτος", "τουτου", "τουτους", "τουτων", "τούσ", "τοὺς", "τοῖς", "τοῦ", "τυχον", "των", "τωρα", "τό", "τόν", "τότε", "τὰ", "τὰς", "τὴν", "τὸ", "τὸν", "τῆς", "τῆσ", "τῇ", "τῶν", "τῷ", "υπ", "υπερ", "υπο", "υποψη", "υποψιν", "υπό", "υστερα", "φετος", "χαμηλα", "χθες", "χτες", "χωρις", "χωριστα", "ψηλα", "ω", "ωραια", "ως", "ωσ", "ωσαν", "ωσοτου", "ωσπου", "ωστε", "ωστοσο", "ωχ", "ἀλλ'", "ἀλλά", "ἀλλὰ", "ἀλλ’", "ἀπ", "ἀπό", "ἀπὸ", "ἀφ", "ἂν", "ἃ", "ἄλλος", "ἄλλοσ", "ἄν", "ἄρα", "ἅμα", "ἐάν", "ἐγώ", "ἐγὼ", "ἐκ", "ἐμόσ", "ἐμὸς", "ἐν", "ἐξ", "ἐπί", "ἐπεὶ", "ἐπὶ", "ἐστι", "ἐφ", "ἐὰν", "ἑαυτοῦ", "ἔτι", "ἡ", "ἢ", "ἣ", "ἤ", "ἥ", "ἧς", "ἵνα", "ὁ", "ὃ", "ὃν", "ὃς", "ὅ", "ὅδε", "ὅθεν", "ὅπερ", "ὅς", "ὅσ", "ὅστις", "ὅστισ", "ὅτε", "ὅτι", "ὑμόσ", "ὑπ", "ὑπέρ", "ὑπό", "ὑπὲρ", "ὑπὸ", "ὡς", "ὡσ", "ὥς", "ὥστε", "ὦ", "ᾧ", "∆α", "∆ε", "∆εινα", "∆εν", "∆εξια", "∆ηθεν", "∆ηλα∆η", "∆ι", "∆ια", "∆ιαρκως", "∆ικα", "∆ικο", "∆ικοι", "∆ικος", "∆ικου", "∆ικους", "∆ιολου", "∆ιπλα", "∆ιχως"],
  "gu": ["અંગે", "અંદર", "અથવા", "અને", "અમને", "અમારું", "અમે", "અહીં", "આ", "આગળ", "આથી", "આનું", "આને", "આપણને", "આપણું", "આપણે", "આપી", "આર", "આવી", "આવે", "ઉપર", "ઉભા", "ઊંચે", "ઊભું", "એ", "એક", "એન", "એના", "એનાં", "એની", "એનું", "એને", "એનો", "એમ", "એવા", "એવાં", "એવી", "એવું", "એવો", "ઓછું", "કંઈક", "કઈ", "કયું", "કયો", "કરતાં", "કરવું", "કરી", "કરીએ", "કરું", "કરે", "કરેલું", "કર્યા", "કર્યાં", "કર્યું", "કર્યો", "કાંઈ", "કે", "કેટલું", "કેમ", "કેવી", "કેવું", "કોઈ", "કોઈક", "કોણ", "કોણે", "કોને", "ક્યાં", "ક્યારે", "ખૂબ", "ગઈ", "ગયા", "ગયાં", "ગયું", "ગયો", "ઘણું", "છ", "છતાં", "છીએ", "છું", "છે", "છેક", "છો", "જ", "જાય", "જી", "જે", "જેટલું", "જેને", "જેમ", "જેવી", "જેવું", "જેવો", "જો", "જોઈએ", "જ્યાં", "જ્યારે", "ઝાઝું", "તને", "તમને", "તમારું", "તમે", "તા", "તારાથી", "તારામાં", "તારું", "તું", "તે", "તેં", "તેઓ", "તેણે", "તેથી", "તેના", "તેની", "તેનું", "તેને", "તેમ", "તેમનું", "તેમને", "તેવી", "તેવું", "તો", "ત્યાં", "ત્યારે", "થઇ", "થઈ", "થઈએ", "થતા", "થતાં", "થતી", "થતું", "થતો", "થયા", "થયાં", "થયું", "થયેલું", "થયો", "થવું", "થાઉં", "થાઓ", "થાય", "થી", "થોડું", "દરેક", "ન", "નં", "નં.", "નથી", "નહિ", "નહી", "નહીં", "ના", "ની", "નીચે", "નું", "ને", "નો", "પછી", "પણ", "પર", "પરંતુ", "પહેલાં", "પાછળ", "પાસે", "પોતાનું", "પ્રત્યેક", "ફક્ત", "ફરી", "ફરીથી", "બંને", "બધા", "બધું", "બની", "બહાર", "બહુ", "બાદ", "બે", "મને", "મા", "માં", "માટે", "માત્ર", "મારું", "મી", "મૂકવું", "મૂકી", "મૂક્યા", "મૂક્યાં", "મૂક્યું", "મેં", "રહી", "રહે", "રહેવું", "રહ્યા", "રહ્યાં", "રહ્યો", "રીતે", "રૂ.", "રૂા", "લેતા", "લેતું", "લેવા", "વગેરે", "વધુ", "શકે", "શા", "શું", "સરખું", "સામે", "સુધી", "હતા", "હતાં", "હતી", "હતું", "હવે", "હશે", "હશો", "હા", "હું", "હો", "હોઈ", "હોઈશ", "હોઈશું", "હોય", "હોવા"],
  "ha": ["a", "amma", "ba", "ban", "ce", "cikin", "da", "don", "ga", "in", "ina", "ita", "ji", "ka", "ko", "kuma", "lokacin", "ma", "mai", "na", "ne", "ni", "sai", "shi", "su", "suka", "sun", "ta", "tafi", "take", "tana", "wani", "wannan", "wata", "ya", "yake", "yana", "yi", "za"],
  "he": ["אבל", "או", "אולי", "אותה", "אותו", "אותי", "אותך", "אותם", "אותן", "אותנו", "אז", "אחר", "אחרות", "אחרי", "אחריכן", "אחרים", "אחרת", "אי", "איזה", "איך", "אין", "איפה", "איתה", "איתו", "איתי", "איתך", "איתכם", "איתכן", "איתם", "איתן", "איתנו", "אך", "אל", "אלה", "אלו", "אם", "אנחנו", "אני", "אס", "אף", "אצל", "אשר", "את", "אתה", "אתכם", "אתכן", "אתם", "אתן", "באיזומידה", "באמצע", "באמצעות", "בגלל", "בין", "בלי", "במידה", "במקוםשבו", "ברם", "בשביל", "בשעהש", "בתוך", "גם", "דרך", "הוא", "היא", "היה", "היכן", "היתה", "היתי", "הם", "הן", "הנה", "הסיבהשבגללה", "הרי", "ואילו", "ואת", "זאת", "זה", "זות", "יהיה", "יוכל", "יוכלו", "יותרמדי", "יכול", "יכולה", "יכולות", "יכולים", "יכל", "יכלה", "יכלו", "יש", "כאן", "כאשר", "כולם", "כולן", "כזה", "כי", "כיצד", "כך", "ככה", "כל", "כלל", "כמו", "כן", "כפי", "כש", "לא", "לאו", "לאיזותכלית", "לאן", "לבין", "לה", "להיות", "להם", "להן", "לו", "לי", "לכם", "לכן", "למה", "למטה", "למעלה", "למקוםשבו", "למרות", "לנו", "לעבר", "לעיכן", "לפיכך", "לפני", "מאד", "מאחורי", "מאיזוסיבה", "מאין", "מאיפה", "מבלי", "מבעד", "מדוע", "מה", "מהיכן", "מול", "מחוץ", "מי", "מכאן", "מכיוון", "מלבד", "מן", "מנין", "מסוגל", "מעט", "מעטים", "מעל", "מצד", "מקוםבו", "מתחת", "מתי", "נגד", "נגר", "נו", "עד", "עז", "על", "עלי", "עליה", "עליהם", "עליהן", "עליו", "עליך", "עליכם", "עלינו", "עם", "עצמה", "עצמהם", "עצמהן", "עצמו", "עצמי", "עצמם", "עצמן", "עצמנו", "פה", "רק", "שוב", "של", "שלה", "שלהם", "שלהן", "שלו", "שלי", "שלך", "שלכה", "שלכם", "שלכן", "שלנו", "שם", "תהיה", "תחת"],
  "hi": ["अंदर", "अत", "अदि", "अप", "अपना", "अपनि", "अपनी", "अपने", "अभि", "अभी", "आदि", "आप", "इंहिं", "इंहें", "इंहों", "इतयादि", "इत्यादि", "इन", "इनका", "इन्हीं", "इन्हें", "इन्हों", "इस", "इसका", "इसकि", "इसकी", "इसके", "इसमें", "इसि", "इसी", "इसे", "उंहिं", "उंहें", "उंहों", "उन", "उनका", "उनकि", "उनकी", "उनके", "उनको", "उन्हीं", "उन्हें", "उन्हों", "उस", "उसके", "उसि", "उसी", "उसे", "एक", "एवं", "एस", "एसे", "ऐसे", "ओर", "और", "कइ", "कई", "कर", "करता", "करते", "करना", "करने", "करें", "कहते", "कहा", "का", "काफि", "काफ़ी", "कि", "किंहें", "किंहों", "कितना", "किन्हें", "किन्हों", "किया", "किर", "किस", "किसि", "किसी", "किसे", "की", "कुछ", "कुल", "के", "को", "कोइ", "कोई", "कोन", "कोनसा", "कौन", "कौनसा", "गया", "घर", "जब", "जहाँ", "जहां", "जा", "जिंहें", "जिंहों", "जितना", "जिधर", "जिन", "जिन्हें", "जिन्हों", "जिस", "जिसे", "जीधर", "जेसा", "जेसे", "जैसा", "जैसे", "जो", "तक", "तब", "तरह", "तिंहें", "तिंहों", "तिन", "तिन्हें", "तिन्हों", "तिस", "तिसे", "तो", "था", "थि", "थी", "थे", "दबारा", "दवारा", "दिया", "दुसरा", "दुसरे", "दूसरे", "दो", "द्वारा", "न", "नहिं", "नहीं", "ना", "निचे", "निहायत", "नीचे", "ने", "पर", "पहले", "पुरा", "पूरा", "पे", "फिर", "बनि", "बनी", "बहि", "बही", "बहुत", "बाद", "बाला", "बिलकुल", "भि", "भितर", "भी", "भीतर", "मगर", "मानो", "मे", "में", "यदि", "यह", "यहाँ", "यहां", "यहि", "यही", "या", "यिह", "ये", "रखें", "रवासा", "रहा", "रहे", "ऱ्वासा", "लिए", "लिये", "लेकिन", "व", "वगेरह", "वरग", "वर्ग", "वह", "वहाँ", "वहां", "वहिं", "वहीं", "वाले", "वुह", "वे", "वग़ैरह", "संग", "सकता", "सकते", "सबसे", "सभि", "सभी", "साथ", "साबुत", "साभ", "सारा", "से", "सो", "हि", "ही", "हुअ", "हुआ", "हुइ", "हुई", "हुए", "हे", "हें", "है", "हैं", "हो", "होता", "होति", "होती", "होते", "होना", "होने"],
  "hu": ["a", "abba", "abban", "abból", "addig", "ahhoz", "ahogy", "ahol", "aki", "akik", "akkor", "akár", "alapján", "alatt", "alatta", "alattad", "alattam", "alattatok", "alattuk", "alattunk", "alá", "alád", "alájuk", "alám", "alánk", "alátok", "alól", "alóla", "alólad", "alólam", "alólatok", "alóluk", "alólunk", "amely", "amelybol", "amelyek", "amelyekben", "amelyeket", "amelyet", "amelyik", "amelynek", "ami", "amikor", "amit", "amolyan", "amott", "amíg", "annak", "annál", "arra", "arról", "attól", "az", "aznap", "azok", "azokat", "azokba", "azokban", "azokból", "azokhoz", "azokig", "azokkal", "azokká", "azoknak", "azoknál", "azokon", "azokra", "azokról", "azoktól", "azokért", "azon", "azonban", "azonnal", "azt", "aztán", "azután", "azzal", "azzá", "azért", "bal", "balra", "ban", "be", "belé", "beléd", "beléjük", "belém", "belénk", "belétek", "belül", "belőle", "belőled", "belőlem", "belőletek", "belőlük", "belőlünk", "ben", "benne", "benned", "bennem", "bennetek", "bennük", "bennünk", "bár", "bárcsak", "bármilyen", "búcsú", "cikk", "cikkek", "cikkeket", "csak", "csakhogy", "csupán", "de", "dehogy", "e", "ebbe", "ebben", "ebből", "eddig", "egy", "egyebek", "egyebet", "egyedül", "egyelőre", "egyes", "egyet", "egyetlen", "egyik", "egymás", "egyre", "egyszerre", "egyéb", "együtt", "egész", "egészen", "ehhez", "ekkor", "el", "eleinte", "ellen", "ellenes", "elleni", "ellenére", "elmondta", "elsõ", "első", "elsők", "elsősorban", "elsőt", "elé", "eléd", "elég", "eléjük", "elém", "elénk", "elétek", "elõ", "elõször", "elõtt", "elő", "előbb", "elől", "előle", "előled", "előlem", "előletek", "előlük", "előlünk", "először", "előtt", "előtte", "előtted", "előttem", "előttetek", "előttük", "előttünk", "előző", "emilyen", "engem", "ennek", "ennyi", "ennél", "enyém", "erre", "erről", "esetben", "ettől", "ez", "ezek", "ezekbe", "ezekben", "ezekből", "ezeken", "ezeket", "ezekhez", "ezekig", "ezekkel", "ezekké", "ezeknek", "ezeknél", "ezekre", "ezekről", "ezektől", "ezekért", "ezen", "ezentúl", "ezer", "ezret", "ezt", "ezután", "ezzel", "ezzé", "ezért", "fel", "fele", "felek", "felet", "felett", "felé", "fent", "fenti", "fél", "fölé", "gyakran", "ha", "halló", "hamar", "hanem", "harmadik", "harmadikat", "harminc", "hat", "hatodik", "hatodikat", "hatot", "hatvan", "helyett", "hetedik", "hetediket", "hetet", "hetven", "hirtelen", "hiszen", "hiába", "hogy", "hogyan", "hol", "holnap", "holnapot", "honnan", "hova", "hozzá", "hozzád", "hozzájuk", "hozzám", "hozzánk", "hozzátok", "hurrá", "huszadik", "hány", "hányszor", "hármat", "három", "hát", "hátha", "hátulsó", "hét", "húsz", "ide", "ide-оda", "idén", "igazán", "igen", "ill", "ill.", "illetve", "ilyen", "ilyenkor", "immár", "inkább", "is", "ismét", "ison", "itt", "jelenleg", "jobban", "jobbra", "jó", "jól", "jólesik", "jóval", "jövőre", "kell", "kellene", "kellett", "kelljen", "keressünk", "keresztül", "ketten", "kettő", "kettőt", "kevés", "ki", "kiben", "kiből", "kicsit", "kicsoda", "kihez", "kik", "kikbe", "kikben", "kikből", "kiken", "kiket", "kikhez", "kikkel", "kikké", "kiknek", "kiknél", "kikre", "kikről", "kiktől", "kikért", "kilenc", "kilencedik", "kilencediket", "kilencet", "kilencven", "kin", "kinek", "kinél", "kire", "kiről", "kit", "kitől", "kivel", "kivé", "kié", "kiért", "korábban", "képest", "kérem", "kérlek", "kész", "késő", "később", "későn", "két", "kétszer", "kívül", "körül", "köszönhetően", "köszönöm", "közben", "közel", "közepesen", "közepén", "közé", "között", "közül", "külön", "különben", "különböző", "különbözőbb", "különbözőek", "lassan", "le", "legalább", "legyen", "lehet", "lehetetlen", "lehetett", "lehetőleg", "lehetőség", "lenne", "lenni", "lennék", "lennének", "lesz", "leszek", "lesznek", "leszünk", "lett", "lettek", "lettem", "lettünk", "lévő", "ma", "maga", "magad", "magam", "magatokat", "magukat", "magunkat", "magát", "mai", "majd", "majdnem", "manapság", "meg", "megcsinál", "megcsinálnak", "megint", "megvan", "mellett", "mellette", "melletted", "mellettem", "mellettetek", "mellettük", "mellettünk", "mellé", "melléd", "melléjük", "mellém", "mellénk", "mellétek", "mellől", "mellőle", "mellőled", "mellőlem", "mellőletek", "mellőlük", "mellőlünk", "mely", "melyek", "melyik", "mennyi", "mert", "mi", "miatt", "miatta", "miattad", "miattam", "miattatok", "miattuk", "miattunk", "mibe", "miben", "miből", "mihez", "mik", "mikbe", "mikben", "mikből", "miken", "miket", "mikhez", "mikkel", "mikké", "miknek", "miknél", "mikor", "mikre", "mikről", "miktől", "mikért", "milyen", "min", "mind", "mindegyik", "mindegyiket", "minden", "mindenesetre", "mindenki", "mindent", "mindenütt", "mindig", "mindketten", "minek", "minket", "mint", "mintha", "minél", "mire", "miről", "mit", "mitől", "mivel", "mivé", "miért", "mondta", "most", "mostanáig", "már", "más", "másik", "másikat", "másnap", "második", "másodszor", "mások", "másokat", "mást", "még", "mégis", "míg", "mögé", "mögéd", "mögéjük", "mögém", "mögénk", "mögétek", "mögött", "mögötte", "mögötted", "mögöttem", "mögöttetek", "mögöttük", "mögöttünk", "mögül", "mögüle", "mögüled", "mögülem", "mögületek", "mögülük", "mögülünk", "múltkor", "múlva", "na", "nagy", "nagyobb", "nagyon", "naponta", "napot", "ne", "negyedik", "negyediket", "negyven", "neked", "nekem", "neki", "nekik", "nektek", "nekünk", "nem", "nemcsak", "nemrég", "nincs", "nyolc", "nyolcadik", "nyolcadikat", "nyolcat", "nyolcvan", "nála", "nálad", "nálam", "nálatok", "náluk", "nálunk", "négy", "négyet", "néha", "néhány", "nélkül", "o", "oda", "ok", "olyan", "onnan", "ott", "pedig", "persze", "pár", "például", "rajta", "rajtad", "rajtam", "rajtatok", "rajtuk", "rajtunk", "rendben", "rosszul", "rá", "rád", "rájuk", "rám", "ránk", "rátok", "régen", "régóta", "részére", "róla", "rólad", "rólam", "rólatok", "róluk", "rólunk", "rögtön", "s", "saját", "se", "sem", "semmi", "semmilyen", "semmiség", "senki", "soha", "sok", "sokan", "sokat", "sokkal", "sokszor", "sokáig", "során", "stb.", "szemben", "szerbusz", "szerint", "szerinte", "szerinted", "szerintem", "szerintetek", "szerintük", "szerintünk", "szervusz", "szinte", "számára", "száz", "századik", "százat", "szépen", "szét", "szíves", "szívesen", "szíveskedjék", "sőt", "talán", "tavaly", "te", "tegnap", "tegnapelőtt", "tehát", "tele", "teljes", "tessék", "ti", "tied", "titeket", "tizedik", "tizediket", "tizenegy", "tizenegyedik", "tizenhat", "tizenhárom", "tizenhét", "tizenkettedik", "tizenkettő", "tizenkilenc", "tizenkét", "tizennyolc", "tizennégy", "tizenöt", "tizet", "tovább", "további", "továbbá", "távol", "téged", "tényleg", "tíz", "több", "többi", "többször", "túl", "tőle", "tőled", "tőlem", "tőletek", "tőlük", "tőlünk", "ugyanakkor", "ugyanez", "ugyanis", "ugye", "urak", "uram", "urat", "utoljára", "utolsó", "után", "utána", "vagy", "vagyis", "vagyok", "vagytok", "vagyunk", "vajon", "valahol", "valaki", "valakit", "valamelyik", "valami", "valamint", "való", "van", "vannak", "vele", "veled", "velem", "veletek", "velük", "velünk", "vissza", "viszlát", "viszont", "viszontlátásra", "volna", "volnának", "volnék", "volt", "voltak", "voltam", "voltunk", "végre", "végén", "végül", "által", "általában", "ám", "át", "éljen", "én", "éppen", "érte", "érted", "értem", "értetek", "értük", "értünk", "és", "év", "évben", "éve", "évek", "éves", "évi", "évvel", "így", "óta", "õ", "õk", "õket", "ön", "önbe", "önben", "önből", "önhöz", "önnek", "önnel", "önnél", "önre", "önről", "önt", "öntől", "önért", "önök", "önökbe", "önökben", "önökből", "önöket", "önökhöz", "önökkel", "önöknek", "önöknél", "önökre", "önökről", "önöktől", "önökért", "önökön", "önön", "össze", "öt", "ötven", "ötödik", "ötödiket", "ötöt", "úgy", "úgyis", "úgynevezett", "új", "újabb", "újra", "úr", "ő", "ők", "őket", "őt"],
  "id": ["ada", "adalah", "adanya", "adapun", "agak", "agaknya", "agar", "akan", "akankah", "akhir", "akhiri", "akhirnya", "aku", "akulah", "amat", "amatlah", "anda", "andalah", "antar", "antara", "antaranya", "apa", "apaan", "apabila", "apakah", "apalagi", "apatah", "artinya", "asal", "asalkan", "atas", "atau", "ataukah", "ataupun", "awal", "awalnya", "bagai", "bagaikan", "bagaimana", "bagaimanakah", "bagaimanapun", "bagi", "bagian", "bahkan", "bahwa", "bahwasanya", "baik", "bakal", "bakalan", "balik", "banyak", "bapak", "baru", "bawah", "beberapa", "begini", "beginian", "beginikah", "beginilah", "begitu", "begitukah", "begitulah", "begitupun", "bekerja", "belakang", "belakangan", "belum", "belumlah", "benar", "benarkah", "benarlah", "berada", "berakhir", "berakhirlah", "berakhirnya", "berapa", "berapakah", "berapalah", "berapapun", "berarti", "berawal", "berbagai", "berdatangan", "beri", "berikan", "berikut", "berikutnya", "berjumlah", "berkali-kali", "berkata", "berkehendak", "berkeinginan", "berkenaan", "berlainan", "berlalu", "berlangsung", "berlebihan", "bermacam", "bermacam-macam", "bermaksud", "bermula", "bersama", "bersama-sama", "bersiap", "bersiap-siap", "bertanya", "bertanya-tanya", "berturut", "berturut-turut", "bertutur", "berujar", "berupa", "besar", "betul", "betulkah", "biasa", "biasanya", "bila", "bilakah", "bisa", "bisakah", "boleh", "bolehkah", "bolehlah", "buat", "bukan", "bukankah", "bukanlah", "bukannya", "bulan", "bung", "cara", "caranya", "cukup", "cukupkah", "cukuplah", "cuma", "dahulu", "dalam", "dan", "dapat", "dari", "daripada", "datang", "dekat", "demi", "demikian", "demikianlah", "dengan", "depan", "di", "dia", "diakhiri", "diakhirinya", "dialah", "diantara", "diantaranya", "diberi", "diberikan", "diberikannya", "dibuat", "dibuatnya", "didapat", "didatangkan", "digunakan", "diibaratkan", "diibaratkannya", "diingat", "diingatkan", "diinginkan", "dijawab", "dijelaskan", "dijelaskannya", "dikarenakan", "dikatakan", "dikatakannya", "dikerjakan", "diketahui", "diketahuinya", "dikira", "dilakukan", "dilalui", "dilihat", "dimaksud", "dimaksudkan", "dimaksudkannya", "dimaksudnya", "diminta", "dimintai", "dimisalkan", "dimulai", "dimulailah", "dimulainya", "dimungkinkan", "dini", "dipastikan", "diperbuat", "diperbuatnya", "dipergunakan", "diperkirakan", "diperlihatkan", "diperlukan", "diperlukannya", "dipersoalkan", "dipertanyakan", "dipunyai", "diri", "dirinya", "disampaikan", "disebut", "disebutkan", "disebutkannya", "disini", "disinilah", "ditambahkan", "ditandaskan", "ditanya", "ditanyai", "ditanyakan", "ditegaskan", "ditujukan", "ditunjuk", "ditunjuki", "ditunjukkan", "ditunjukkannya", "ditunjuknya", "dituturkan", "dituturkannya", "diucapkan", "diucapkannya", "diungkapkan", "dong", "dua", "dulu", "empat", "enggak", "enggaknya", "entah", "entahlah", "guna", "gunakan", "hal", "hampir", "hanya", "hanyalah", "hari", "harus", "haruslah", "harusnya", "hendak", "hendaklah", "hendaknya", "hingga", "ia", "ialah", "ibarat", "ibaratkan", "ibaratnya", "ibu", "ikut", "ingat", "ingat-ingat", "ingin", "inginkah", "inginkan", "ini", "inikah", "inilah", "itu", "itukah", "itulah", "jadi", "jadilah", "jadinya", "jangan", "jangankan", "janganlah", "jauh", "jawab", "jawaban", "jawabnya", "jelas", "jelaskan", "jelaslah", "jelasnya", "jika", "jikalau", "juga", "jumlah", "jumlahnya", "justru", "kala", "kalau", "kalaulah", "kalaupun", "kalian", "kami", "kamilah", "kamu", "kamulah", "kan", "kapan", "kapankah", "kapanpun", "karena", "karenanya", "kasus", "kata", "katakan", "katakanlah", "katanya", "ke", "keadaan", "kebetulan", "kecil", "kedua", "keduanya", "keinginan", "kelamaan", "kelihatan", "kelihatannya", "kelima", "keluar", "kembali", "kemudian", "kemungkinan", "kemungkinannya", "kenapa", "kepada", "kepadanya", "kesampaian", "keseluruhan", "keseluruhannya", "keterlaluan", "ketika", "khususnya", "kini", "kinilah", "kira", "kira-kira", "kiranya", "kita", "kitalah", "kok", "kurang", "lagi", "lagian", "lah", "lain", "lainnya", "lalu", "lama", "lamanya", "lanjut", "lanjutnya", "lebih", "lewat", "lima", "luar", "macam", "maka", "makanya", "makin", "malah", "malahan", "mampu", "mampukah", "mana", "manakala", "manalagi", "masa", "masalah", "masalahnya", "masih", "masihkah", "masing", "masing-masing", "mau", "maupun", "melainkan", "melakukan", "melalui", "melihat", "melihatnya", "memang", "memastikan", "memberi", "memberikan", "membuat", "memerlukan", "memihak", "meminta", "memintakan", "memisalkan", "memperbuat", "mempergunakan", "memperkirakan", "memperlihatkan", "mempersiapkan", "mempersoalkan", "mempertanyakan", "mempunyai", "memulai", "memungkinkan", "menaiki", "menambahkan", "menandaskan", "menanti", "menanti-nanti", "menantikan", "menanya", "menanyai", "menanyakan", "mendapat", "mendapatkan", "mendatang", "mendatangi", "mendatangkan", "menegaskan", "mengakhiri", "mengapa", "mengatakan", "mengatakannya", "mengenai", "mengerjakan", "mengetahui", "menggunakan", "menghendaki", "mengibaratkan", "mengibaratkannya", "mengingat", "mengingatkan", "menginginkan", "mengira", "mengucapkan", "mengucapkannya", "mengungkapkan", "menjadi", "menjawab", "menjelaskan", "menuju", "menunjuk", "menunjuki", "menunjukkan", "menunjuknya", "menurut", "menuturkan", "menyampaikan", "menyangkut", "menyatakan", "menyebutkan", "menyeluruh", "menyiapkan", "merasa", "mereka", "merekalah", "merupakan", "meski", "meskipun", "meyakini", "meyakinkan", "minta", "mirip", "misal", "misalkan", "misalnya", "mula", "mulai", "mulailah", "mulanya", "mungkin", "mungkinkah", "nah", "naik", "namun", "nanti", "nantinya", "nyaris", "nyatanya", "oleh", "olehnya", "pada", "padahal", "padanya", "pak", "paling", "panjang", "pantas", "para", "pasti", "pastilah", "penting", "pentingnya", "per", "percuma", "perlu", "perlukah", "perlunya", "pernah", "persoalan", "pertama", "pertama-tama", "pertanyaan", "pertanyakan", "pihak", "pihaknya", "pukul", "pula", "pun", "punya", "rasa", "rasanya", "rata", "rupanya", "saat", "saatnya", "saja", "sajalah", "saling", "sama", "sama-sama", "sambil", "sampai", "sampai-sampai", "sampaikan", "sana", "sangat", "sangatlah", "satu", "saya", "sayalah", "se", "sebab", "sebabnya", "sebagai", "sebagaimana", "sebagainya", "sebagian", "sebaik", "sebaik-baiknya", "sebaiknya", "sebaliknya", "sebanyak", "sebegini", "sebegitu", "sebelum", "sebelumnya", "sebenarnya", "seberapa", "sebesar", "sebetulnya", "sebisanya", "sebuah", "sebut", "sebutlah", "sebutnya", "secara", "secukupnya", "sedang", "sedangkan", "sedemikian", "sedikit", "sedikitnya", "seenaknya", "segala", "segalanya", "segera", "seharusnya", "sehingga", "seingat", "sejak", "sejauh", "sejenak", "sejumlah", "sekadar", "sekadarnya", "sekali", "sekali-kali", "sekalian", "sekaligus", "sekalipun", "sekarang", "sekecil", "seketika", "sekiranya", "sekitar", "sekitarnya", "sekurang-kurangnya", "sekurangnya", "sela", "selagi", "selain", "selaku", "selalu", "selama", "selama-lamanya", "selamanya", "selanjutnya", "seluruh", "seluruhnya", "semacam", "semakin", "semampu", "semampunya", "semasa", "semasih", "semata", "semata-mata", "semaunya", "sementara", "semisal", "semisalnya", "sempat", "semua", "semuanya", "semula", "sendiri", "sendirian", "sendirinya", "seolah", "seolah-olah", "seorang", "sepanjang", "sepantasnya", "sepantasnyalah", "seperlunya", "seperti", "sepertinya", "sepihak", "sering", "seringnya", "serta", "serupa", "sesaat", "sesama", "sesampai", "sesegera", "sesekali", "seseorang", "sesuatu", "sesuatunya", "sesudah", "sesudahnya", "setelah", "setempat", "setengah", "seterusnya", "setiap", "setiba", "setibanya", "setidak-tidaknya", "setidaknya", "setinggi", "seusai", "sewaktu", "siap", "siapa", "siapakah", "siapapun", "sini", "sinilah", "soal", "soalnya", "suatu", "sudah", "sudahkah", "sudahlah", "supaya", "tadi", "tadinya", "tahu", "tahun", "tak", "tambah", "tambahnya", "tampak", "tampaknya", "tandas", "tandasnya", "tanpa", "tanya", "tanyakan", "tanyanya", "tapi", "tegas", "tegasnya", "telah", "tempat", "tengah", "tentang", "tentu", "tentulah", "tentunya", "tepat", "terakhir", "terasa", "terbanyak", "terdahulu", "terdapat", "terdiri", "terhadap", "terhadapnya", "teringat", "teringat-ingat", "terjadi", "terjadilah", "terjadinya", "terkira", "terlalu", "terlebih", "terlihat", "termasuk", "ternyata", "tersampaikan", "tersebut", "tersebutlah", "tertentu", "tertuju", "terus", "terutama", "tetap", "tetapi", "tiap", "tiba", "tiba-tiba", "tidak", "tidakkah", "tidaklah", "tiga", "tinggi", "toh", "tunjuk", "turut", "tutur", "tuturnya", "ucap", "ucapnya", "ujar", "ujarnya", "umum", "umumnya", "ungkap", "ungkapnya", "untuk", "usah", "usai", "waduh", "wah", "wahai", "waktu", "waktunya", "walau", "walaupun", "wong", "yaitu", "yakin", "yakni", "yang"],
  "ga": ["a", "ach", "ag", "agus", "an", "aon", "ar", "arna", "as", "b'", "ba", "beirt", "bhúr", "caoga", "ceathair", "ceathrar", "chomh", "chtó", "chuig", "chun", "cois", "céad", "cúig", "cúigear", "d'", "daichead", "dar", "de", "deich", "deichniúr", "den", "dhá", "do", "don", "dtí", "dá", "dár", "dó", "faoi", "faoin", "faoina", "faoinár", "fara", "fiche", "gach", "gan", "go", "gur", "haon", "hocht", "i", "iad", "idir", "in", "ina", "ins", "inár", "is", "le", "leis", "lena", "lenár", "m'", "mar", "mo", "mé", "na", "nach", "naoi", "naonúr", "ná", "ní", "níor", "nó", "nócha", "ocht", "ochtar", "os", "roimh", "sa", "seacht", "seachtar", "seachtó", "seasca", "seisear", "siad", "sibh", "sinn", "sna", "sé", "sí", "tar", "thar", "thú", "triúr", "trí", "trína", "trínár", "tríocha", "tú", "um", "ár", "é", "éis", "í", "ó", "ón", "óna", "ónár"],
  "it": ["a", "abbastanza", "abbia", "abbiamo", "abbiano", "abbiate", "accidenti", "ad", "adesso", "affinché", "agl", "agli", "ahime", "ahimè", "ai", "al", "alcuna", "alcuni", "alcuno", "all", "alla", "alle", "allo", "allora", "altre", "altri", "altrimenti", "altro", "altrove", "altrui", "anche", "ancora", "anni", "anno", "ansa", "anticipo", "assai", "attesa", "attraverso", "avanti", "avemmo", "avendo", "avente", "aver", "avere", "averlo", "avesse", "avessero", "avessi", "avessimo", "aveste", "avesti", "avete", "aveva", "avevamo", "avevano", "avevate", "avevi", "avevo", "avrai", "avranno", "avrebbe", "avrebbero", "avrei", "avremmo", "avremo", "avreste", "avresti", "avrete", "avrà", "avrò", "avuta", "avute", "avuti", "avuto", "basta", "ben", "bene", "benissimo", "brava", "bravo", "buono", "c", "caso", "cento", "certa", "certe", "certi", "certo", "che", "chi", "chicchessia", "chiunque", "ci", "ciascuna", "ciascuno", "cima", "cinque", "cio", "cioe", "cioè", "circa", "citta", "città", "ciò", "co", "codesta", "codesti", "codesto", "cogli", "coi", "col", "colei", "coll", "coloro", "colui", "come", "cominci", "comprare", "comunque", "con", "concernente", "conclusione", "consecutivi", "consecutivo", "consiglio", "contro", "cortesia", "cos", "cosa", "cosi", "così", "cui", "d", "da", "dagl", "dagli", "dai", "dal", "dall", "dalla", "dalle", "dallo", "dappertutto", "davanti", "degl", "degli", "dei", "del", "dell", "della", "delle", "dello", "dentro", "detto", "deve", "devo", "di", "dice", "dietro", "dire", "dirimpetto", "diventa", "diventare", "diventato", "dopo", "doppio", "dov", "dove", "dovra", "dovrà", "dovunque", "due", "dunque", "durante", "e", "ebbe", "ebbero", "ebbi", "ecc", "ecco", "ed", "effettivamente", "egli", "ella", "entrambi", "eppure", "era", "erano", "eravamo", "eravate", "eri", "ero", "esempio", "esse", "essendo", "esser", "essere", "essi", "ex", "fa", "faccia", "facciamo", "facciano", "facciate", "faccio", "facemmo", "facendo", "facesse", "facessero", "facessi", "facessimo", "faceste", "facesti", "faceva", "facevamo", "facevano", "facevate", "facevi", "facevo", "fai", "fanno", "farai", "faranno", "fare", "farebbe", "farebbero", "farei", "faremmo", "faremo", "fareste", "faresti", "farete", "farà", "farò", "fatto", "favore", "fece", "fecero", "feci", "fin", "finalmente", "finche", "fine", "fino", "forse", "forza", "fosse", "fossero", "fossi", "fossimo", "foste", "fosti", "fra", "frattempo", "fu", "fui", "fummo", "fuori", "furono", "futuro", "generale", "gente", "gia", "giacche", "giorni", "giorno", "giu", "già", "gli", "gliela", "gliele", "glieli", "glielo", "gliene", "grande", "grazie", "gruppo", "ha", "haha", "hai", "hanno", "ho", "i", "ie", "ieri", "il", "improvviso", "in", "inc", "indietro", "infatti", "inoltre", "insieme", "intanto", "intorno", "invece", "io", "l", "la", "lasciato", "lato", "le", "lei", "li", "lo", "lontano", "loro", "lui", "lungo", "luogo", "là", "ma", "macche", "magari", "maggior", "mai", "male", "malgrado", "malissimo", "me", "medesimo", "mediante", "meglio", "meno", "mentre", "mesi", "mezzo", "mi", "mia", "mie", "miei", "mila", "miliardi", "milioni", "minimi", "mio", "modo", "molta", "molti", "moltissimo", "molto", "momento", "mondo", "ne", "negl", "negli", "nei", "nel", "nell", "nella", "nelle", "nello", "nemmeno", "neppure", "nessun", "nessuna", "nessuno", "niente", "no", "noi", "nome", "non", "nondimeno", "nonostante", "nonsia", "nostra", "nostre", "nostri", "nostro", "novanta", "nove", "nulla", "nuovi", "nuovo", "o", "od", "oggi", "ogni", "ognuna", "ognuno", "oltre", "oppure", "ora", "ore", "osi", "ossia", "ottanta", "otto", "paese", "parecchi", "parecchie", "parecchio", "parte", "partendo", "peccato", "peggio", "per", "perche", "perchè", "perché", "percio", "perciò", "perfino", "pero", "persino", "persone", "però", "piedi", "pieno", "piglia", "piu", "piuttosto", "più", "po", "pochissimo", "poco", "poi", "poiche", "possa", "possedere", "posteriore", "posto", "potrebbe", "preferibilmente", "presa", "press", "prima", "primo", "principalmente", "probabilmente", "promesso", "proprio", "puo", "pure", "purtroppo", "può", "qua", "qualche", "qualcosa", "qualcuna", "qualcuno", "quale", "quali", "qualunque", "quando", "quanta", "quante", "quanti", "quanto", "quantunque", "quarto", "quasi", "quattro", "quel", "quella", "quelle", "quelli", "quello", "quest", "questa", "queste", "questi", "questo", "qui", "quindi", "quinto", "realmente", "recente", "recentemente", "registrazione", "relativo", "riecco", "rispetto", "salvo", "sara", "sarai", "saranno", "sarebbe", "sarebbero", "sarei", "saremmo", "saremo", "sareste", "saresti", "sarete", "sarà", "sarò", "scola", "scopo", "scorso", "se", "secondo", "seguente", "seguito", "sei", "sembra", "sembrare", "sembrato", "sembrava", "sembri", "sempre", "senza", "sette", "si", "sia", "siamo", "siano", "siate", "siete", "sig", "solito", "solo", "soltanto", "sono", "sopra", "soprattutto", "sotto", "spesso", "sta", "stai", "stando", "stanno", "starai", "staranno", "starebbe", "starebbero", "starei", "staremmo", "staremo", "stareste", "staresti", "starete", "starà", "starò", "stata", "state", "stati", "stato", "stava", "stavamo", "stavano", "stavate", "stavi", "stavo", "stemmo", "stessa", "stesse", "stessero", "stessi", "stessimo", "stesso", "steste", "stesti", "stette", "stettero", "stetti", "stia", "stiamo", "stiano", "stiate", "sto", "su", "sua", "subito", "successivamente", "successivo", "sue", "sugl", "sugli", "sui", "sul", "sull", "sulla", "sulle", "sullo", "suo", "suoi", "tale", "tali", "talvolta", "tanto", "te", "tempo", "terzo", "th", "ti", "titolo", "tra", "tranne", "tre", "trenta", "triplo", "troppo", "trovato", "tu", "tua", "tue", "tuo", "tuoi", "tutta", "tuttavia", "tutte", "tutti", "tutto", "uguali", "ulteriore", "ultimo", "un", "una", "uno", "uomo", "va", "vai", "vale", "vari", "varia", "varie", "vario", "verso", "vi", "vicino", "visto", "vita", "voi", "volta", "volte", "vostra", "vostre", "vostri", "vostro", "è"],
  "ja": ["あそこ", "あっ", "あの", "あのかた", "あの人", "あり", "あります", "ある", "あれ", "い", "いう", "います", "いる", "う", "うち", "え", "お", "および", "おり", "おります", "か", "かつて", "から", "が", "き", "ここ", "こちら", "こと", "この", "これ", "これら", "さ", "さらに", "し", "しかし", "する", "ず", "せ", "せる", "そこ", "そして", "その", "その他", "その後", "それ", "それぞれ", "それで", "た", "ただし", "たち", "ため", "たり", "だ", "だっ", "だれ", "つ", "て", "で", "でき", "できる", "です", "では", "でも", "と", "という", "といった", "とき", "ところ", "として", "とともに", "とも", "と共に", "どこ", "どの", "な", "ない", "なお", "なかっ", "ながら", "なく", "なっ", "など", "なに", "なら", "なり", "なる", "なん", "に", "において", "における", "について", "にて", "によって", "により", "による", "に対して", "に対する", "に関する", "の", "ので", "のみ", "は", "ば", "へ", "ほか", "ほとんど", "ほど", "ます", "また", "または", "まで", "も", "もの", "ものの", "や", "よう", "より", "ら", "られ", "られる", "れ", "れる", "を", "ん", "何", "及び", "彼", "彼女", "我々", "特に", "私", "私達", "貴方", "貴方方"],
  "ko": ["!", "\"", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "...", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ";", "<", "=", ">", "?", "@", "\\", "^", "_", "`", "|", "~", "·", "—", "——", "‘", "’", "“", "”", "…", "、", "。", "〈", "〉", "《", "》", "가", "가까스로", "가령", "각", "각각", "각자", "각종", "갖고말하자면", "같다", "같이", "개의치않고", "거니와", "거바", "거의", "것", "것과 같이", "것들", "게다가", "게우다", "겨우", "견지에서", "결과에 이르다", "결국", "결론을 낼 수 있다", "겸사겸사", "고려하면", "고로", "곧", "공동으로", "과", "과연", "관계가 있다", "관계없이", "관련이 있다", "관하여", "관한", "관해서는", "구", "구체적으로", "구토하다", "그", "그들", "그때", "그래", "그래도", "그래서", "그러나", "그러니", "그러니까", "그러면", "그러므로", "그러한즉", "그런 까닭에", "그런데", "그런즉", "그럼", "그럼에도 불구하고", "그렇게 함으로써", "그렇지", "그렇지 않다면", "그렇지 않으면", "그렇지만", "그렇지않으면", "그리고", "그리하여", "그만이다", "그에 따르는", "그위에", "그저", "그중에서", "그치지 않다", "근거로", "근거하여", "기대여", "기점으로", "기준으로", "기타", "까닭으로", "까악", "까지", "까지 미치다", "까지도", "꽈당", "끙끙", "끼익", "나", "나머지는", "남들", "남짓", "너", "너희", "너희들", "네", "넷", "년", "논하지 않다", "놀라다", "누가 알겠는가", "누구", "다른", "다른 방면으로", "다만", "다섯", "다소", "다수", "다시 말하자면", "다시말하면", "다음", "다음에", "다음으로", "단지", "답다", "당신", "당장", "대로 하다", "대하면", "대하여", "대해 말하자면", "대해서", "댕그", "더구나", "더군다나", "더라도", "더불어", "더욱더", "더욱이는", "도달하다", "도착하다", "동시에", "동안", "된바에야", "된이상", "두번째로", "둘", "둥둥", "뒤따라", "뒤이어", "든간에", "들", "등", "등등", "딩동", "따라", "따라서", "따위", "따지지 않다", "딱", "때", "때가 되어", "때문에", "또", "또한", "뚝뚝", "라 해도", "령", "로", "로 인하여", "로부터", "로써", "륙", "를", "마음대로", "마저", "마저도", "마치", "막론하고", "만 못하다", "만약", "만약에", "만은 아니다", "만이 아니다", "만일", "만큼", "말하자면", "말할것도 없고", "매", "매번", "메쓰겁다", "몇", "모", "모두", "무렵", "무릎쓰고", "무슨", "무엇", "무엇때문에", "물론", "및", "바꾸어말하면", "바꾸어말하자면", "바꾸어서 말하면", "바꾸어서 한다면", "바꿔 말하면", "바로", "바와같이", "밖에 안된다", "반대로", "반대로 말하자면", "반드시", "버금", "보는데서", "보다더", "보드득", "본대로", "봐", "봐라", "부류의 사람들", "부터", "불구하고", "불문하고", "붕붕", "비걱거리다", "비교적", "비길수 없다", "비로소", "비록", "비슷하다", "비추어 보아", "비하면", "뿐만 아니라", "뿐만아니라", "뿐이다", "삐걱", "삐걱거리다", "사", "삼", "상대적으로 말하자면", "생각한대로", "설령", "설마", "설사", "셋", "소생", "소인", "솨", "쉿", "습니까", "습니다", "시각", "시간", "시작하여", "시초에", "시키다", "실로", "심지어", "아", "아니", "아니나다를가", "아니라면", "아니면", "아니었다면", "아래윗", "아무거나", "아무도", "아야", "아울러", "아이", "아이고", "아이구", "아이야", "아이쿠", "아하", "아홉", "안 그러면", "않기 위하여", "않기 위해서", "알 수 있다", "알았어", "앗", "앞에서", "앞의것", "야", "약간", "양자", "어", "어기여차", "어느", "어느 년도", "어느것", "어느곳", "어느때", "어느쪽", "어느해", "어디", "어때", "어떠한", "어떤", "어떤것", "어떤것들", "어떻게", "어떻해", "어이", "어째서", "어쨋든", "어쩔수 없다", "어찌", "어찌됏든", "어찌됏어", "어찌하든지", "어찌하여", "언제", "언젠가", "얼마", "얼마 안 되는 것", "얼마간", "얼마나", "얼마든지", "얼마만큼", "얼마큼", "엉엉", "에", "에 가서", "에 달려 있다", "에 대해", "에 있다", "에 한하다", "에게", "에서", "여", "여기", "여덟", "여러분", "여보시오", "여부", "여섯", "여전히", "여차", "연관되다", "연이서", "영", "영차", "옆사람", "예", "예를 들면", "예를 들자면", "예컨대", "예하면", "오", "오로지", "오르다", "오자마자", "오직", "오호", "오히려", "와", "와 같은 사람들", "와르르", "와아", "왜", "왜냐하면", "외에도", "요만큼", "요만한 것", "요만한걸", "요컨대", "우르르", "우리", "우리들", "우선", "우에 종합한것과같이", "운운", "월", "위에서 서술한바와같이", "위하여", "위해서", "윙윙", "육", "으로", "으로 인하여", "으로서", "으로써", "을", "응", "응당", "의", "의거하여", "의지하여", "의해", "의해되다", "의해서", "이", "이 되다", "이 때문에", "이 밖에", "이 외에", "이 정도의", "이것", "이곳", "이때", "이라면", "이래", "이러이러하다", "이러한", "이런", "이럴정도로", "이렇게 많은 것", "이렇게되면", "이렇게말하자면", "이렇구나", "이로 인하여", "이르기까지", "이리하여", "이만큼", "이번", "이봐", "이상", "이어서", "이었다", "이와 같다", "이와 같은", "이와 반대로", "이와같다면", "이외에도", "이용하여", "이유만으로", "이젠", "이지만", "이쪽", "이천구", "이천육", "이천칠", "이천팔", "인 듯하다", "인젠", "일", "일것이다", "일곱", "일단", "일때", "일반적으로", "일지라도", "임에 틀림없다", "입각하여", "입장에서", "잇따라", "있다", "자", "자기", "자기집", "자마자", "자신", "잠깐", "잠시", "저", "저것", "저것만큼", "저기", "저쪽", "저희", "전부", "전자", "전후", "점에서 보아", "정도에 이르다", "제", "제각기", "제외하고", "조금", "조차", "조차도", "졸졸", "좀", "좋아", "좍좍", "주룩주룩", "주저하지 않고", "줄은 몰랏다", "줄은모른다", "중에서", "중의하나", "즈음하여", "즉", "즉시", "지든지", "지만", "지말고", "진짜로", "쪽으로", "차라리", "참", "참나", "첫번째로", "쳇", "총적으로", "총적으로 말하면", "총적으로 보면", "칠", "콸콸", "쾅쾅", "쿵", "타다", "타인", "탕탕", "토하다", "통하여", "툭", "퉤", "틈타", "팍", "팔", "퍽", "펄렁", "하", "하게될것이다", "하게하다", "하겠는가", "하고 있다", "하고있었다", "하곤하였다", "하구나", "하기 때문에", "하기 위하여", "하기는한데", "하기만 하면", "하기보다는", "하기에", "하나", "하느니", "하는 김에", "하는 편이 낫다", "하는것도", "하는것만 못하다", "하는것이 낫다", "하는바", "하더라도", "하도다", "하도록시키다", "하도록하다", "하든지", "하려고하다", "하마터면", "하면 할수록", "하면된다", "하면서", "하물며", "하여금", "하여야", "하자마자", "하지 않는다면", "하지 않도록", "하지마", "하지마라", "하지만", "하하", "한 까닭에", "한 이유는", "한 후", "한다면", "한다면 몰라도", "한데", "한마디", "한적이있다", "한켠으로는", "한항목", "할 따름이다", "할 생각이다", "할 줄 안다", "할 지경이다", "할 힘이 있다", "할때", "할만하다", "할망정", "할뿐", "할수있다", "할수있어", "할줄알다", "할지라도", "할지언정", "함께", "해도된다", "해도좋다", "해봐요", "해서는 안된다", "해야한다", "해요", "했어요", "향하다", "향하여", "향해서", "허", "허걱", "허허", "헉", "헉헉", "헐떡헐떡", "형식으로 쓰여", "혹시", "혹은", "혼자", "훨씬", "휘익", "휴", "흐흐", "흥", "힘입어", "︿", "！", "＃", "＄", "％", "＆", "（", "）", "＊", "＋", "，", "０", "１", "２", "３", "４", "５", "６", "７", "８", "９", "：", "；", "＜", "＞", "？", "＠", "［", "］", "｛", "｜", "｝", "～", "￥"],
  "ku": ["ئێمە", "ئێوە", "ئەم", "ئەو", "ئەوان", "ئەوەی", "بۆ", "بێ", "بێجگە", "بە", "بەبێ", "بەدەم", "بەردەم", "بەرلە", "بەرەوی", "بەرەوە", "بەلای", "بەپێی", "تۆ", "تێ", "جگە", "دوای", "دوو", "دە", "دەکات", "دەگەڵ", "سەر", "لێ", "لە", "لەبابەت", "لەباتی", "لەبارەی", "لەبرێتی", "لەبن", "لەبەر", "لەبەینی", "لەدەم", "لەرێ", "لەرێگا", "لەرەوی", "لەسەر", "لەلایەن", "لەناو", "لەنێو", "لەو", "لەپێناوی", "لەژێر", "لەگەڵ", "من", "ناو", "نێوان", "هەر", "هەروەها", "و", "وەک", "پاش", "پێ", "پێش", "چەند", "کرد", "کە", "ی"],
  "la": ["a", "ab", "ac", "ad", "at", "atque", "aut", "autem", "cum", "de", "dum", "e", "erant", "erat", "est", "et", "etiam", "ex", "haec", "hic", "hoc", "in", "ita", "me", "nec", "neque", "non", "per", "qua", "quae", "quam", "qui", "quibus", "quidem", "quo", "quod", "re", "rebus", "rem", "res", "sed", "si", "sic", "sunt", "tamen", "tandem", "te", "ut", "vel"],
  "lt": ["abi", "abidvi", "abiejose", "abiejuose", "abiejø", "abiem", "abigaliai", "abipus", "abu", "abudu", "ai", "ana", "anaiptol", "anaisiais", "anajai", "anajam", "anajame", "anapus", "anas", "anasai", "anasis", "anei", "aniedvi", "anieji", "aniesiems", "anoji", "anojo", "anojoje", "anokia", "anoks", "anosiomis", "anosioms", "anosios", "anosiose", "anot", "ant", "antai", "anuodu", "anuoju", "anuosiuose", "anuosius", "anàja", "anàjà", "anàjá", "anàsias", "anøjø", "apie", "aplink", "ar", "arba", "argi", "arti", "aukðèiau", "að", "be", "bei", "beje", "bemaþ", "bent", "bet", "betgi", "beveik", "dar", "dargi", "daugmaþ", "deja", "dëka", "dël", "dëlei", "dëlto", "ech", "et", "gal", "galbût", "galgi", "gan", "gana", "gi", "greta", "idant", "iki", "ir", "irgi", "it", "itin", "ið", "iðilgai", "iðvis", "jaisiais", "jajai", "jajam", "jajame", "jei", "jeigu", "ji", "jiedu", "jiedvi", "jieji", "jiesiems", "jinai", "jis", "jisai", "jog", "joji", "jojo", "jojoje", "jokia", "joks", "josiomis", "josioms", "josios", "josiose", "judu", "judvi", "juk", "jumis", "jums", "jumyse", "juodu", "juoju", "juosiuose", "juosius", "jus", "jàja", "jàjà", "jàsias", "jájá", "jøjø", "jûs", "jûsiðkis", "jûsiðkë", "jûsø", "kad", "kada", "kadangi", "kai", "kaip", "kaipgi", "kas", "katra", "katras", "katriedvi", "katruodu", "kaþin", "kaþkas", "kaþkatra", "kaþkatras", "kaþkokia", "kaþkoks", "kaþkuri", "kaþkuris", "kiaurai", "kiek", "kiekvienas", "kieno", "kita", "kitas", "kitokia", "kitoks", "kodël", "kokia", "koks", "kol", "kolei", "kone", "kuomet", "kur", "kurgi", "kuri", "kuriedvi", "kuris", "kuriuodu", "lai", "lig", "ligi", "link", "lyg", "man", "manaisiais", "manajai", "manajam", "manajame", "manas", "manasai", "manasis", "mane", "manieji", "maniesiems", "manim", "manimi", "maniðkis", "maniðkë", "mano", "manoji", "manojo", "manojoje", "manosiomis", "manosioms", "manosios", "manosiose", "manuoju", "manuosiuose", "manuosius", "manyje", "manàja", "manàjà", "manàjá", "manàsias", "manæs", "manøjø", "mat", "maþdaug", "maþne", "mes", "mudu", "mudvi", "mumis", "mums", "mumyse", "mus", "mûsiðkis", "mûsiðkë", "mûsø", "na", "nagi", "ne", "nebe", "nebent", "negi", "negu", "nei", "nejau", "nejaugi", "nekaip", "nelyginant", "nes", "net", "netgi", "netoli", "neva", "nors", "nuo", "në", "o", "ogi", "oi", "paeiliui", "pagal", "pakeliui", "palaipsniui", "palei", "pas", "pasak", "paskos", "paskui", "paskum", "pat", "pati", "patiems", "paties", "pats", "patys", "patá", "paèiais", "paèiam", "paèiame", "paèiu", "paèiuose", "paèius", "paèiø", "per", "pernelyg", "pirm", "pirma", "pirmiau", "po", "prie", "prieð", "prieðais", "pro", "pusiau", "rasi", "rodos", "sau", "savaisiais", "savajai", "savajam", "savajame", "savas", "savasai", "savasis", "save", "savieji", "saviesiems", "savimi", "saviðkis", "saviðkë", "savo", "savoji", "savojo", "savojoje", "savosiomis", "savosioms", "savosios", "savosiose", "savuoju", "savuosiuose", "savuosius", "savyje", "savàja", "savàjà", "savàjá", "savàsias", "savæs", "savøjø", "skersai", "skradþiai", "staèiai", "su", "sulig", "ta", "tad", "tai", "taigi", "taip", "taipogi", "taisiais", "tajai", "tajam", "tajame", "tamsta", "tarp", "tarsi", "tartum", "tarytum", "tas", "tasai", "tau", "tavaisiais", "tavajai", "tavajam", "tavajame", "tavas", "tavasai", "tavasis", "tave", "tavieji", "taviesiems", "tavimi", "taviðkis", "taviðkë", "tavo", "tavoji", "tavojo", "tavojoje", "tavosiomis", "tavosioms", "tavosios", "tavosiose", "tavuoju", "tavuosiuose", "tavuosius", "tavyje", "tavàja", "tavàjà", "tavàjá", "tavàsias", "tavæs", "tavøjø", "taèiau", "te", "tegu", "tegul", "tiedvi", "tieji", "ties", "tiesiems", "tiesiog", "tik", "tikriausiai", "tiktai", "toji", "tojo", "tojoje", "tokia", "toks", "tol", "tolei", "toliau", "tosiomis", "tosioms", "tosios", "tosiose", "tu", "tuodu", "tuoju", "tuosiuose", "tuosius", "turbût", "tàja", "tàjà", "tàjá", "tàsias", "tøjø", "tûlas", "uþ", "uþtat", "uþvis", "va", "vai", "viduj", "vidury", "vien", "vienas", "vienokia", "vienoks", "vietoj", "virð", "virðuj", "virðum", "vis", "vis dëlto", "visa", "visas", "visgi", "visokia", "visoks", "vos", "vël", "vëlgi", "ypaè", "á", "ákypai", "ástriþai", "ðalia", "ðe", "ði", "ðiaisiais", "ðiajai", "ðiajam", "ðiajame", "ðiapus", "ðiedvi", "ðieji", "ðiesiems", "ðioji", "ðiojo", "ðiojoje", "ðiokia", "ðioks", "ðiosiomis", "ðiosioms", "ðiosios", "ðiosiose", "ðis", "ðisai", "ðit", "ðita", "ðitas", "ðitiedvi", "ðitokia", "ðitoks", "ðituodu", "ðiuodu", "ðiuoju", "ðiuosiuose", "ðiuosius", "ðiàja", "ðiàjà", "ðiàsias", "ðiøjø", "ðtai", "ðájá", "þemiau"],
  "lv": ["aiz", "ap", "apakš", "apakšpus", "ar", "arī", "augšpus", "bet", "bez", "bija", "biji", "biju", "bijām", "bijāt", "būs", "būsi", "būsiet", "būsim", "būt", "būšu", "caur", "diemžēl", "diezin", "droši", "dēļ", "esam", "esat", "esi", "esmu", "gan", "gar", "iekam", "iekams", "iekām", "iekāms", "iekš", "iekšpus", "ik", "ir", "it", "itin", "iz", "ja", "jau", "jeb", "jebšu", "jel", "jo", "jā", "ka", "kamēr", "kaut", "kolīdz", "kopš", "kā", "kļuva", "kļuvi", "kļuvu", "kļuvām", "kļuvāt", "kļūs", "kļūsi", "kļūsiet", "kļūsim", "kļūst", "kļūstam", "kļūstat", "kļūsti", "kļūstu", "kļūt", "kļūšu", "labad", "lai", "lejpus", "līdz", "līdzko", "ne", "nebūt", "nedz", "nekā", "nevis", "nezin", "no", "nu", "nē", "otrpus", "pa", "par", "pat", "pie", "pirms", "pret", "priekš", "pār", "pēc", "starp", "tad", "tak", "tapi", "taps", "tapsi", "tapsiet", "tapsim", "tapt", "tapāt", "tapšu", "taču", "te", "tiec", "tiek", "tiekam", "tiekat", "tieku", "tik", "tika", "tikai", "tiki", "tikko", "tiklab", "tiklīdz", "tiks", "tiksiet", "tiksim", "tikt", "tiku", "tikvien", "tikām", "tikāt", "tikšu", "tomēr", "topat", "turpretim", "turpretī", "tā", "tādēļ", "tālab", "tāpēc", "un", "uz", "vai", "var", "varat", "varēja", "varēji", "varēju", "varējām", "varējāt", "varēs", "varēsi", "varēsiet", "varēsim", "varēt", "varēšu", "vien", "virs", "virspus", "vis", "viņpus", "zem", "ārpus", "šaipus"],
  "ms": ["abdul", "abdullah", "acara", "ada", "adalah", "ahmad", "air", "akan", "akhbar", "akhir", "aktiviti", "alam", "amat", "amerika", "anak", "anggota", "antara", "antarabangsa", "apa", "apabila", "april", "as", "asas", "asean", "asia", "asing", "atas", "atau", "australia", "awal", "awam", "bagaimanapun", "bagi", "bahagian", "bahan", "baharu", "bahawa", "baik", "bandar", "bank", "banyak", "barangan", "baru", "baru-baru", "bawah", "beberapa", "bekas", "beliau", "belum", "berada", "berakhir", "berbanding", "berdasarkan", "berharap", "berikutan", "berjaya", "berjumlah", "berkaitan", "berkata", "berkenaan", "berlaku", "bermula", "bernama", "bernilai", "bersama", "berubah", "besar", "bhd", "bidang", "bilion", "bn", "boleh", "bukan", "bulan", "bursa", "cadangan", "china", "dagangan", "dalam", "dan", "dana", "dapat", "dari", "daripada", "dasar", "datang", "datuk", "demikian", "dengan", "depan", "derivatives", "dewan", "di", "diadakan", "dibuka", "dicatatkan", "dijangka", "diniagakan", "dis", "disember", "ditutup", "dolar", "dr", "dua", "dunia", "ekonomi", "eksekutif", "eksport", "empat", "enam", "faedah", "feb", "global", "hadapan", "hanya", "harga", "hari", "hasil", "hingga", "hubungan", "ia", "iaitu", "ialah", "indeks", "india", "indonesia", "industri", "ini", "islam", "isnin", "isu", "itu", "jabatan", "jalan", "jan", "jawatan", "jawatankuasa", "jepun", "jika", "jualan", "juga", "julai", "jumaat", "jumlah", "jun", "juta", "kadar", "kalangan", "kali", "kami", "kata", "katanya", "kaunter", "kawasan", "ke", "keadaan", "kecil", "kedua", "kedua-dua", "kedudukan", "kekal", "kementerian", "kemudahan", "kenaikan", "kenyataan", "kepada", "kepentingan", "keputusan", "kerajaan", "kerana", "kereta", "kerja", "kerjasama", "kes", "keselamatan", "keseluruhan", "kesihatan", "ketika", "ketua", "keuntungan", "kewangan", "khamis", "kini", "kira-kira", "kita", "klci", "klibor", "komposit", "kontrak", "kos", "kuala", "kuasa", "kukuh", "kumpulan", "lagi", "lain", "langkah", "laporan", "lebih", "lepas", "lima", "lot", "luar", "lumpur", "mac", "mahkamah", "mahu", "majlis", "makanan", "maklumat", "malam", "malaysia", "mana", "manakala", "masa", "masalah", "masih", "masing-masing", "masyarakat", "mata", "media", "mei", "melalui", "melihat", "memandangkan", "memastikan", "membantu", "membawa", "memberi", "memberikan", "membolehkan", "membuat", "mempunyai", "menambah", "menarik", "menawarkan", "mencapai", "mencatatkan", "mendapat", "mendapatkan", "menerima", "menerusi", "mengadakan", "mengambil", "mengenai", "menggalakkan", "menggunakan", "mengikut", "mengumumkan", "mengurangkan", "meningkat", "meningkatkan", "menjadi", "menjelang", "menokok", "menteri", "menunjukkan", "menurut", "menyaksikan", "menyediakan", "mereka", "merosot", "merupakan", "mesyuarat", "minat", "minggu", "minyak", "modal", "mohd", "mudah", "mungkin", "naik", "najib", "nasional", "negara", "negara-negara", "negeri", "niaga", "nilai", "nov", "ogos", "okt", "oleh", "operasi", "orang", "pada", "pagi", "paling", "pameran", "papan", "para", "paras", "parlimen", "parti", "pasaran", "pasukan", "pegawai", "pejabat", "pekerja", "pelabur", "pelaburan", "pelancongan", "pelanggan", "pelbagai", "peluang", "pembangunan", "pemberita", "pembinaan", "pemimpin", "pendapatan", "pendidikan", "penduduk", "penerbangan", "pengarah", "pengeluaran", "pengerusi", "pengguna", "pengurusan", "peniaga", "peningkatan", "penting", "peratus", "perdagangan", "perdana", "peringkat", "perjanjian", "perkara", "perkhidmatan", "perladangan", "perlu", "permintaan", "perniagaan", "persekutuan", "persidangan", "pertama", "pertubuhan", "pertumbuhan", "perusahaan", "peserta", "petang", "pihak", "pilihan", "pinjaman", "polis", "politik", "presiden", "prestasi", "produk", "program", "projek", "proses", "proton", "pukul", "pula", "pusat", "rabu", "rakan", "rakyat", "ramai", "rantau", "raya", "rendah", "ringgit", "rumah", "sabah", "sahaja", "saham", "sama", "sarawak", "satu", "sawit", "saya", "sdn", "sebagai", "sebahagian", "sebanyak", "sebarang", "sebelum", "sebelumnya", "sebuah", "secara", "sedang", "segi", "sehingga", "sejak", "sekarang", "sektor", "sekuriti", "selain", "selama", "selasa", "selatan", "selepas", "seluruh", "semakin", "semalam", "semasa", "sementara", "semua", "semula", "sen", "sendiri", "seorang", "sepanjang", "seperti", "sept", "september", "serantau", "seri", "serta", "sesi", "setiap", "setiausaha", "sidang", "singapura", "sini", "sistem", "sokongan", "sri", "sudah", "sukan", "suku", "sumber", "supaya", "susut", "syarikat", "syed", "tahap", "tahun", "tan", "tanah", "tanpa", "tawaran", "teknologi", "telah", "tempat", "tempatan", "tempoh", "tenaga", "tengah", "tentang", "terbaik", "terbang", "terbesar", "terbuka", "terdapat", "terhadap", "termasuk", "tersebut", "terus", "tetapi", "thailand", "tiada", "tidak", "tiga", "timbalan", "timur", "tindakan", "tinggi", "tun", "tunai", "turun", "turut", "umno", "unit", "untuk", "untung", "urus", "usaha", "utama", "walaupun", "wang", "wanita", "wilayah", "yang"],
  "mr": ["अधिक", "अनेक", "अशी", "असलयाचे", "असलेल्या", "असा", "असून", "असे", "आज", "आणि", "आता", "आपल्या", "आला", "आली", "आले", "आहे", "आहेत", "एक", "एका", "कमी", "करणयात", "करून", "का", "काम", "काय", "काही", "किवा", "की", "केला", "केली", "केले", "कोटी", "गेल्या", "घेऊन", "जात", "झाला", "झाली", "झाले", "झालेल्या", "टा", "डॉ", "तर", "तरी", "तसेच", "ता", "ती", "तीन", "ते", "तो", "त्या", "त्याचा", "त्याची", "त्याच्या", "त्याना", "त्यानी", "त्यामुळे", "त्री", "दिली", "दोन", "न", "नाही", "निर्ण्य", "पण", "पम", "परयतन", "पाटील", "म", "मात्र", "माहिती", "मी", "मुबी", "म्हणजे", "म्हणाले", "म्हणून", "या", "याचा", "याची", "याच्या", "याना", "यानी", "येणार", "येत", "येथील", "येथे", "लाख", "व", "व्यकत", "सर्व", "सागित्ले", "सुरू", "हजार", "हा", "ही", "हे", "होणार", "होत", "होता", "होती", "होते"],
  "no": ["alle", "andre", "arbeid", "at", "av", "bare", "begge", "ble", "blei", "bli", "blir", "blitt", "bort", "bra", "bruke", "både", "båe", "da", "de", "deg", "dei", "deim", "deira", "deires", "dem", "den", "denne", "der", "dere", "deres", "det", "dette", "di", "din", "disse", "ditt", "du", "dykk", "dykkar", "då", "eg", "ein", "eit", "eitt", "eller", "elles", "en", "ene", "eneste", "enhver", "enn", "er", "et", "ett", "etter", "folk", "for", "fordi", "forsûke", "fra", "få", "før", "fûr", "fûrst", "gjorde", "gjûre", "god", "gå", "ha", "hadde", "han", "hans", "har", "hennar", "henne", "hennes", "her", "hjå", "ho", "hoe", "honom", "hoss", "hossen", "hun", "hva", "hvem", "hver", "hvilke", "hvilken", "hvis", "hvor", "hvordan", "hvorfor", "i", "ikke", "ikkje", "ingen", "ingi", "inkje", "inn", "innen", "inni", "ja", "jeg", "kan", "kom", "korleis", "korso", "kun", "kunne", "kva", "kvar", "kvarhelst", "kven", "kvi", "kvifor", "lage", "lang", "lik", "like", "makt", "man", "mange", "me", "med", "medan", "meg", "meget", "mellom", "men", "mens", "mer", "mest", "mi", "min", "mine", "mitt", "mot", "mye", "mykje", "må", "måte", "navn", "ned", "nei", "no", "noe", "noen", "noka", "noko", "nokon", "nokor", "nokre", "ny", "nå", "når", "og", "også", "om", "opp", "oss", "over", "part", "punkt", "på", "rett", "riktig", "samme", "sant", "seg", "selv", "si", "sia", "sidan", "siden", "sin", "sine", "sist", "sitt", "sjøl", "skal", "skulle", "slik", "slutt", "so", "som", "somme", "somt", "start", "stille", "så", "sånn", "tid", "til", "tilbake", "tilstand", "um", "under", "upp", "ut", "uten", "var", "vart", "varte", "ved", "verdi", "vere", "verte", "vi", "vil", "ville", "vite", "vore", "vors", "vort", "vår", "være", "vært", "vöre", "vört", "å"],
  "fa": ["!", ",", ".", ":", ";", "،", "؛", "؟", "آباد", "آره", "آری", "آمد", "آمده", "آن", "آنان", "آنجا", "آنطور", "آنقدر", "آنكه", "آنها", "آنچه", "آنکه", "آورد", "آورده", "آيد", "آی", "آیا", "آیند", "اتفاقا", "اثرِ", "احتراما", "احتمالا", "اخیر", "اری", "از", "ازجمله", "اساسا", "است", "استفاد", "استفاده", "اش", "اشکارا", "اصلا", "اصولا", "اعلام", "اغلب", "اكنون", "الان", "البته", "البتّه", "ام", "اما", "امروز", "امروزه", "امسال", "امشب", "امور", "ان", "انجام", "اند", "انشاالله", "انصافا", "انطور", "انقدر", "انها", "انچنان", "انکه", "انگار", "او", "اول", "اولا", "اي", "ايشان", "ايم", "اين", "اينكه", "اکثرا", "اکنون", "اگر", "ای", "ایا", "اید", "ایشان", "ایم", "این", "اینجا", "ایند", "اینطور", "اینقدر", "اینها", "اینچنین", "اینک", "اینکه", "اینگونه", "با", "بار", "بارة", "باره", "بارها", "باز", "بازهم", "باش", "باشد", "باشم", "باشند", "باشيم", "باشی", "باشید", "باشیم", "بالا", "بالاخره", "بالایِ", "بالطبع", "بايد", "باید", "بتوان", "بتواند", "بتوانی", "بتوانیم", "بخش", "بخشی", "بخواه", "بخواهد", "بخواهم", "بخواهند", "بخواهی", "بخواهید", "بخواهیم", "بد", "بدون", "بر", "برابر", "برابرِ", "براحتی", "براساس", "براستی", "براي", "برای", "برایِ", "برخوردار", "برخي", "برخی", "برداري", "برعکس", "بروز", "بزرگ", "بزودی", "بسا", "بسيار", "بسياري", "بسیار", "بسیاری", "بطور", "بعد", "بعدا", "بعدها", "بعری", "بعضا", "بعضي", "بلافاصله", "بلكه", "بله", "بلکه", "بلی", "بنابراين", "بنابراین", "بندي", "به", "بهتر", "بهترين", "بود", "بودم", "بودن", "بودند", "بوده", "بودی", "بودید", "بودیم", "بویژه", "بي", "بيست", "بيش", "بيشتر", "بيشتري", "بين", "بکن", "بکند", "بکنم", "بکنند", "بکنی", "بکنید", "بکنیم", "بگو", "بگوید", "بگویم", "بگویند", "بگویی", "بگویید", "بگوییم", "بگیر", "بگیرد", "بگیرم", "بگیرند", "بگیری", "بگیرید", "بگیریم", "بی", "بیا", "بیاب", "بیابد", "بیابم", "بیابند", "بیابی", "بیابید", "بیابیم", "بیاور", "بیاورد", "بیاورم", "بیاورند", "بیاوری", "بیاورید", "بیاوریم", "بیاید", "بیایم", "بیایند", "بیایی", "بیایید", "بیاییم", "بیرون", "بیرونِ", "بیش", "بیشتر", "بیشتری", "بین", "ت", "تا", "تازه", "تاكنون", "تان", "تاکنون", "تحت", "تر", "تر  براساس", "ترين", "تقریبا", "تلویحا", "تمام", "تماما", "تمامي", "تنها", "تو", "تواند", "توانست", "توانستم", "توانستن", "توانستند", "توانسته", "توانستی", "توانستیم", "توانم", "توانند", "توانی", "توانید", "توانیم", "توسط", "تولِ", "تویِ", "ثانیا", "جا", "جاي", "جايي", "جای", "جدا", "جديد", "جدید", "جريان", "جریان", "جز", "جلوگيري", "جلویِ", "جمعا", "جناح", "جهت", "حاضر", "حال", "حالا", "حتما", "حتي", "حتی", "حداکثر", "حدودا", "حدودِ", "حق", "خارجِ", "خب", "خدمات", "خصوصا", "خلاصه", "خواست", "خواستم", "خواستن", "خواستند", "خواسته", "خواستی", "خواستید", "خواستیم", "خواهد", "خواهم", "خواهند", "خواهيم", "خواهی", "خواهید", "خواهیم", "خوب", "خود", "خودت", "خودتان", "خودش", "خودشان", "خودم", "خودمان", "خوشبختانه", "خويش", "خویش", "خویشتن", "خیاه", "خیر", "خیلی", "داد", "دادم", "دادن", "دادند", "داده", "دادی", "دادید", "دادیم", "دار", "دارد", "دارم", "دارند", "داريم", "داری", "دارید", "داریم", "داشت", "داشتم", "داشتن", "داشتند", "داشته", "داشتی", "داشتید", "داشتیم", "دانست", "دانند", "دایم", "دایما", "در", "درباره", "درمجموع", "درون", "دریغ", "دقیقا", "دنبالِ", "ده", "دهد", "دهم", "دهند", "دهی", "دهید", "دهیم", "دو", "دوباره", "دوم", "ديده", "ديروز", "ديگر", "ديگران", "ديگري", "دیر", "دیروز", "دیگر", "دیگران", "دیگری", "را", "راحت", "راسا", "راستی", "راه", "رسما", "رسید", "رفت", "رفته", "رو", "روب", "روز", "روزانه", "روزهاي", "روي", "روی", "رویِ", "ريزي", "زمان", "زمانی", "زمینه", "زود", "زياد", "زير", "زيرا", "زیر", "زیرِ", "سابق", "ساخته", "سازي", "سالانه", "سالیانه", "سایر", "سراسر", "سرانجام", "سریعا", "سریِ", "سعي", "سمتِ", "سوم", "سوي", "سوی", "سویِ", "سپس", "شان", "شايد", "شاید", "شخصا", "شد", "شدم", "شدن", "شدند", "شده", "شدی", "شدید", "شدیدا", "شدیم", "شش", "شش  نداشته", "شما", "شناسي", "شود", "شوم", "شوند", "شونده", "شوی", "شوید", "شویم", "صرفا", "صورت", "ضدِّ", "ضدِّ", "ضمن", "طبعا", "طبقِ", "طبیعتا", "طرف", "طريق", "طریق", "طور", "طي", "طی", "ظاهرا", "عدم", "عقبِ", "علّتِ", "علیه", "عمدا", "عمدتا", "عمل", "عملا", "عنوان", "عنوانِ", "غالبا", "غير", "غیر", "فردا", "فعلا", "فقط", "فكر", "فوق", "قابل", "قبل", "قبلا", "قدری", "قصدِ", "قطعا", "كرد", "كردم", "كردن", "كردند", "كرده", "كسي", "كل", "كمتر", "كند", "كنم", "كنند", "كنيد", "كنيم", "كه", "لااقل", "لطفا", "لطفاً", "ما", "مان", "مانند", "مانندِ", "مبادا", "متاسفانه", "متعاقبا", "مثل", "مثلا", "مثلِ", "مجانی", "مجددا", "مجموعا", "مختلف", "مدام", "مدت", "مدّتی", "مردم", "مرسی", "مستقیما", "مسلما", "مطمینا", "معمولا", "مقابل", "ممکن", "من", "موارد", "مورد", "موقتا", "مي", "ميليارد", "ميليون", "مگر", "می", "می شود", "میان", "می‌رسد", "می‌رود", "می‌شود", "می‌کنیم", "ناشي", "نام", "ناگاه", "ناگهان", "ناگهانی", "نبايد", "نباید", "نبود", "نخست", "نخستين", "نخواهد", "نخواهم", "نخواهند", "نخواهی", "نخواهید", "نخواهیم", "ندارد", "ندارم", "ندارند", "نداری", "ندارید", "نداریم", "نداشت", "نداشتم", "نداشتند", "نداشته", "نداشتی", "نداشتید", "نداشتیم", "نزديك", "نزدِ", "نزدیکِ", "نسبتا", "نشان", "نشده", "نظير", "نظیر", "نكرده", "نمايد", "نمي", "نمی", "نمی‌شود", "نه", "نهایتا", "نوع", "نوعي", "نوعی", "نيز", "نيست", "نگاه", "نیز", "نیست", "ها", "هاي", "هايي", "های", "هایی", "هبچ", "هر", "هرچه", "هرگز", "هزار", "هست", "هستم", "هستند", "هستيم", "هستی", "هستید", "هستیم", "هفت", "هم", "همان", "همه", "همواره", "همين", "همچنان", "همچنين", "همچنین", "همچون", "همیشه", "همین", "هنوز", "هنگام", "هنگامِ", "هنگامی", "هيچ", "هیچ", "هیچگاه", "و", "واقعا", "واقعی", "وجود", "وسطِ", "وضع", "وقتي", "وقتی", "وقتیکه", "ولی", "وي", "وگو", "وی", "ویژه", "يا", "يابد", "يك", "يكديگر", "يكي", "ّه", "٪", "پارسال", "پاعینِ", "پس", "پنج", "پيش", "پیدا", "پیش", "پیشاپیش", "پیشتر", "پیشِ", "چرا", "چطور", "چقدر", "چنان", "چنانچه", "چنانکه", "چند", "چندین", "چنين", "چنین", "چه", "چهار", "چو", "چون", "چيزي", "چگونه", "چیز", "چیزی", "چیست", "کاش", "کامل", "کاملا", "کتبا", "کجا", "کجاست", "کدام", "کرد", "کردم", "کردن", "کردند", "کرده", "کردی", "کردید", "کردیم", "کس", "کسانی", "کسی", "کل", "کلا", "کم", "کماکان", "کمتر", "کمتری", "کمی", "کن", "کنار", "کنارِ", "کند", "کنم", "کنند", "کننده", "کنون", "کنونی", "کنی", "کنید", "کنیم", "که", "کو", "کَی", "کی", "گاه", "گاهی", "گذاري", "گذاشته", "گذشته", "گردد", "گرفت", "گرفتم", "گرفتن", "گرفتند", "گرفته", "گرفتی", "گرفتید", "گرفتیم", "گروهي", "گفت", "گفتم", "گفتن", "گفتند", "گفته", "گفتی", "گفتید", "گفتیم", "گه", "گهگاه", "گو", "گويد", "گويند", "گویا", "گوید", "گویم", "گویند", "گویی", "گویید", "گوییم", "گيرد", "گيري", "گیرد", "گیرم", "گیرند", "گیری", "گیرید", "گیریم", "ی", "یا", "یابد", "یابم", "یابند", "یابی", "یابید", "یابیم", "یافت", "یافتم", "یافتن", "یافته", "یافتی", "یافتید", "یافتیم", "یعنی", "یقینا", "یه", "یک", "یکی", "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
  "pl": ["a", "aby", "ach", "acz", "aczkolwiek", "aj", "albo", "ale", "ależ", "ani", "aż", "bardziej", "bardzo", "bez", "bo", "bowiem", "by", "byli", "bym", "bynajmniej", "być", "był", "była", "było", "były", "będzie", "będą", "cali", "cała", "cały", "chce", "choć", "ci", "ciebie", "cię", "co", "cokolwiek", "coraz", "coś", "czasami", "czasem", "czemu", "czy", "czyli", "często", "daleko", "dla", "dlaczego", "dlatego", "do", "dobrze", "dokąd", "dość", "dr", "dużo", "dwa", "dwaj", "dwie", "dwoje", "dzisiaj", "dziś", "gdy", "gdyby", "gdyż", "gdzie", "gdziekolwiek", "gdzieś", "go", "godz", "hab", "i", "ich", "ii", "iii", "ile", "im", "inna", "inne", "inny", "innych", "inż", "iv", "ix", "iż", "ja", "jak", "jakaś", "jakby", "jaki", "jakichś", "jakie", "jakiś", "jakiż", "jakkolwiek", "jako", "jakoś", "je", "jeden", "jedna", "jednak", "jednakże", "jedno", "jednym", "jedynie", "jego", "jej", "jemu", "jest", "jestem", "jeszcze", "jeśli", "jeżeli", "już", "ją", "każdy", "kiedy", "kierunku", "kilka", "kilku", "kimś", "kto", "ktokolwiek", "ktoś", "która", "które", "którego", "której", "który", "których", "którym", "którzy", "ku", "lat", "lecz", "lub", "ma", "mają", "mam", "mamy", "mało", "mgr", "mi", "miał", "mimo", "między", "mnie", "mną", "mogą", "moi", "moim", "moja", "moje", "może", "możliwe", "można", "mu", "musi", "my", "mój", "na", "nad", "nam", "nami", "nas", "nasi", "nasz", "nasza", "nasze", "naszego", "naszych", "natomiast", "natychmiast", "nawet", "nic", "nich", "nie", "niech", "niego", "niej", "niemu", "nigdy", "nim", "nimi", "nią", "niż", "no", "nowe", "np", "nr", "o", "o.o.", "obok", "od", "ok", "około", "on", "ona", "one", "oni", "ono", "oraz", "oto", "owszem", "pan", "pana", "pani", "pl", "po", "pod", "podczas", "pomimo", "ponad", "ponieważ", "powinien", "powinna", "powinni", "powinno", "poza", "prawie", "prof", "przecież", "przed", "przede", "przedtem", "przez", "przy", "raz", "razie", "roku", "również", "sam", "sama", "się", "skąd", "sobie", "sobą", "sposób", "swoje", "są", "ta", "tak", "taka", "taki", "takich", "takie", "także", "tam", "te", "tego", "tej", "tel", "temu", "ten", "teraz", "też", "to", "tobie", "tobą", "toteż", "totobą", "trzeba", "tu", "tutaj", "twoi", "twoim", "twoja", "twoje", "twym", "twój", "ty", "tych", "tylko", "tym", "tys", "tzw", "tę", "u", "ul", "vi", "vii", "viii", "vol", "w", "wam", "wami", "was", "wasi", "wasz", "wasza", "wasze", "we", "według", "wie", "wiele", "wielu", "więc", "więcej", "wszyscy", "wszystkich", "wszystkie", "wszystkim", "wszystko", "wtedy", "www", "wy", "właśnie", "wśród", "xi", "xii", "xiii", "xiv", "xv", "z", "za", "zapewne", "zawsze", "zaś", "ze", "zeznowu", "znowu", "znów", "został", "zł", "żaden", "żadna", "żadne", "żadnych", "że", "żeby"],
  "pt": ["a", "acerca", "adeus", "agora", "ainda", "alem", "algmas", "algo", "algumas", "alguns", "ali", "além", "ambas", "ambos", "ano", "anos", "antes", "ao", "aonde", "aos", "apenas", "apoio", "apontar", "apos", "após", "aquela", "aquelas", "aquele", "aqueles", "aqui", "aquilo", "as", "assim", "através", "atrás", "até", "aí", "baixo", "bastante", "bem", "boa", "boas", "bom", "bons", "breve", "cada", "caminho", "catorze", "cedo", "cento", "certamente", "certeza", "cima", "cinco", "coisa", "com", "como", "comprido", "conhecido", "conselho", "contra", "contudo", "corrente", "cuja", "cujas", "cujo", "cujos", "custa", "cá", "da", "daquela", "daquelas", "daquele", "daqueles", "dar", "das", "de", "debaixo", "dela", "delas", "dele", "deles", "demais", "dentro", "depois", "desde", "desligado", "dessa", "dessas", "desse", "desses", "desta", "destas", "deste", "destes", "deve", "devem", "deverá", "dez", "dezanove", "dezasseis", "dezassete", "dezoito", "dia", "diante", "direita", "dispoe", "dispoem", "diversa", "diversas", "diversos", "diz", "dizem", "dizer", "do", "dois", "dos", "doze", "duas", "durante", "dá", "dão", "dúvida", "e", "ela", "elas", "ele", "eles", "em", "embora", "enquanto", "entao", "entre", "então", "era", "eram", "essa", "essas", "esse", "esses", "esta", "estado", "estamos", "estar", "estará", "estas", "estava", "estavam", "este", "esteja", "estejam", "estejamos", "estes", "esteve", "estive", "estivemos", "estiver", "estivera", "estiveram", "estiverem", "estivermos", "estivesse", "estivessem", "estiveste", "estivestes", "estivéramos", "estivéssemos", "estou", "está", "estás", "estávamos", "estão", "eu", "exemplo", "falta", "fará", "favor", "faz", "fazeis", "fazem", "fazemos", "fazer", "fazes", "fazia", "faço", "fez", "fim", "final", "foi", "fomos", "for", "fora", "foram", "forem", "forma", "formos", "fosse", "fossem", "foste", "fostes", "fui", "fôramos", "fôssemos", "geral", "grande", "grandes", "grupo", "ha", "haja", "hajam", "hajamos", "havemos", "havia", "hei", "hoje", "hora", "horas", "houve", "houvemos", "houver", "houvera", "houveram", "houverei", "houverem", "houveremos", "houveria", "houveriam", "houvermos", "houverá", "houverão", "houveríamos", "houvesse", "houvessem", "houvéramos", "houvéssemos", "há", "hão", "iniciar", "inicio", "ir", "irá", "isso", "ista", "iste", "isto", "já", "lado", "lhe", "lhes", "ligado", "local", "logo", "longe", "lugar", "lá", "maior", "maioria", "maiorias", "mais", "mal", "mas", "me", "mediante", "meio", "menor", "menos", "meses", "mesma", "mesmas", "mesmo", "mesmos", "meu", "meus", "mil", "minha", "minhas", "momento", "muito", "muitos", "máximo", "mês", "na", "nada", "nao", "naquela", "naquelas", "naquele", "naqueles", "nas", "nem", "nenhuma", "nessa", "nessas", "nesse", "nesses", "nesta", "nestas", "neste", "nestes", "no", "noite", "nome", "nos", "nossa", "nossas", "nosso", "nossos", "nova", "novas", "nove", "novo", "novos", "num", "numa", "numas", "nunca", "nuns", "não", "nível", "nós", "número", "o", "obra", "obrigada", "obrigado", "oitava", "oitavo", "oito", "onde", "ontem", "onze", "os", "ou", "outra", "outras", "outro", "outros", "para", "parece", "parte", "partir", "paucas", "pegar", "pela", "pelas", "pelo", "pelos", "perante", "perto", "pessoas", "pode", "podem", "poder", "poderá", "podia", "pois", "ponto", "pontos", "por", "porque", "porquê", "portanto", "posição", "possivelmente", "posso", "possível", "pouca", "pouco", "poucos", "povo", "primeira", "primeiras", "primeiro", "primeiros", "promeiro", "propios", "proprio", "própria", "próprias", "próprio", "próprios", "próxima", "próximas", "próximo", "próximos", "puderam", "pôde", "põe", "põem", "quais", "qual", "qualquer", "quando", "quanto", "quarta", "quarto", "quatro", "que", "quem", "quer", "quereis", "querem", "queremas", "queres", "quero", "questão", "quieto", "quinta", "quinto", "quinze", "quáis", "quê", "relação", "sabe", "sabem", "saber", "se", "segunda", "segundo", "sei", "seis", "seja", "sejam", "sejamos", "sem", "sempre", "sendo", "ser", "serei", "seremos", "seria", "seriam", "será", "serão", "seríamos", "sete", "seu", "seus", "sexta", "sexto", "sim", "sistema", "sob", "sobre", "sois", "somente", "somos", "sou", "sua", "suas", "são", "sétima", "sétimo", "só", "tal", "talvez", "tambem", "também", "tanta", "tantas", "tanto", "tarde", "te", "tem", "temos", "tempo", "tendes", "tenha", "tenham", "tenhamos", "tenho", "tens", "tentar", "tentaram", "tente", "tentei", "ter", "terceira", "terceiro", "terei", "teremos", "teria", "teriam", "terá", "terão", "teríamos", "teu", "teus", "teve", "tinha", "tinham", "tipo", "tive", "tivemos", "tiver", "tivera", "tiveram", "tiverem", "tivermos", "tivesse", "tivessem", "tiveste", "tivestes", "tivéramos", "tivéssemos", "toda", "todas", "todo", "todos", "trabalhar", "trabalho", "treze", "três", "tu", "tua", "tuas", "tudo", "tão", "tém", "têm", "tínhamos", "um", "uma", "umas", "uns", "usa", "usar", "vai", "vais", "valor", "veja", "vem", "vens", "ver", "verdade", "verdadeiro", "vez", "vezes", "viagem", "vindo", "vinte", "você", "vocês", "vos", "vossa", "vossas", "vosso", "vossos", "vários", "vão", "vêm", "vós", "zero", "à", "às", "área", "é", "éramos", "és", "último"],
  "ro": ["a", "abia", "acea", "aceasta", "această", "aceea", "aceeasi", "acei", "aceia", "acel", "acela", "acelasi", "acele", "acelea", "acest", "acesta", "aceste", "acestea", "acestei", "acestia", "acestui", "aceşti", "aceştia", "acolo", "acord", "acum", "adica", "ai", "aia", "aibă", "aici", "aiurea", "al", "ala", "alaturi", "ale", "alea", "alt", "alta", "altceva", "altcineva", "alte", "altfel", "alti", "altii", "altul", "am", "anume", "apoi", "ar", "are", "as", "asa", "asemenea", "asta", "astazi", "astea", "astfel", "astăzi", "asupra", "atare", "atat", "atata", "atatea", "atatia", "ati", "atit", "atita", "atitea", "atitia", "atunci", "au", "avea", "avem", "aveţi", "avut", "azi", "aş", "aşadar", "aţi", "b", "ba", "bine", "bucur", "bună", "c", "ca", "cam", "cand", "capat", "care", "careia", "carora", "caruia", "cat", "catre", "caut", "ce", "cea", "ceea", "cei", "ceilalti", "cel", "cele", "celor", "ceva", "chiar", "ci", "cinci", "cind", "cine", "cineva", "cit", "cita", "cite", "citeva", "citi", "citiva", "conform", "contra", "cu", "cui", "cum", "cumva", "curând", "curînd", "când", "cât", "câte", "câtva", "câţi", "cînd", "cît", "cîte", "cîtva", "cîţi", "că", "căci", "cărei", "căror", "cărui", "către", "d", "da", "daca", "dacă", "dar", "dat", "datorită", "dată", "dau", "de", "deasupra", "deci", "decit", "degraba", "deja", "deoarece", "departe", "desi", "despre", "deşi", "din", "dinaintea", "dintr", "dintr-", "dintre", "doar", "doi", "doilea", "două", "drept", "dupa", "după", "dă", "e", "ea", "ei", "el", "ele", "era", "eram", "este", "eu", "exact", "eşti", "f", "face", "fara", "fata", "fel", "fi", "fie", "fiecare", "fii", "fim", "fiu", "fiţi", "foarte", "fost", "frumos", "fără", "g", "geaba", "graţie", "h", "halbă", "i", "ia", "iar", "ieri", "ii", "il", "imi", "in", "inainte", "inapoi", "inca", "incit", "insa", "intr", "intre", "isi", "iti", "j", "k", "l", "la", "le", "li", "lor", "lui", "lângă", "lîngă", "m", "ma", "mai", "mare", "mea", "mei", "mele", "mereu", "meu", "mi", "mie", "mine", "mod", "mult", "multa", "multe", "multi", "multă", "mulţi", "mulţumesc", "mâine", "mîine", "mă", "n", "ne", "nevoie", "ni", "nici", "niciodata", "nicăieri", "nimeni", "nimeri", "nimic", "niste", "nişte", "noastre", "noastră", "noi", "noroc", "nostri", "nostru", "nou", "noua", "nouă", "noştri", "nu", "numai", "o", "opt", "or", "ori", "oricare", "orice", "oricine", "oricum", "oricând", "oricât", "oricînd", "oricît", "oriunde", "p", "pai", "parca", "patra", "patru", "patrulea", "pe", "pentru", "peste", "pic", "pina", "plus", "poate", "pot", "prea", "prima", "primul", "prin", "printr-", "putini", "puţin", "puţina", "puţină", "până", "pînă", "r", "rog", "s", "sa", "sa-mi", "sa-ti", "sai", "sale", "sau", "se", "si", "sint", "sintem", "spate", "spre", "sub", "sunt", "suntem", "sunteţi", "sus", "sută", "sînt", "sîntem", "sînteţi", "să", "săi", "său", "t", "ta", "tale", "te", "ti", "timp", "tine", "toata", "toate", "toată", "tocmai", "tot", "toti", "totul", "totusi", "totuşi", "toţi", "trei", "treia", "treilea", "tu", "tuturor", "tăi", "tău", "u", "ul", "ului", "un", "una", "unde", "undeva", "unei", "uneia", "unele", "uneori", "unii", "unor", "unora", "unu", "unui", "unuia", "unul", "v", "va", "vi", "voastre", "voastră", "voi", "vom", "vor", "vostru", "vouă", "voştri", "vreme", "vreo", "vreun", "vă", "x", "z", "zece", "zero", "zi", "zice", "îi", "îl", "îmi", "împotriva", "în", "înainte", "înaintea", "încotro", "încât", "încît", "între", "întrucât", "întrucît", "îţi", "ăla", "ălea", "ăsta", "ăstea", "ăştia", "şapte", "şase", "şi", "ştiu", "ţi", "ţie"],
  "ru": ["c", "а", "алло", "без", "белый", "близко", "более", "больше", "большой", "будем", "будет", "будете", "будешь", "будто", "буду", "будут", "будь", "бы", "бывает", "бывь", "был", "была", "были", "было", "быть", "в", "важная", "важное", "важные", "важный", "вам", "вами", "вас", "ваш", "ваша", "ваше", "ваши", "вверх", "вдали", "вдруг", "ведь", "везде", "вернуться", "весь", "вечер", "взгляд", "взять", "вид", "видел", "видеть", "вместе", "вне", "вниз", "внизу", "во", "вода", "война", "вокруг", "вон", "вообще", "вопрос", "восемнадцатый", "восемнадцать", "восемь", "восьмой", "вот", "впрочем", "времени", "время", "все", "все еще", "всегда", "всего", "всем", "всеми", "всему", "всех", "всею", "всю", "всюду", "вся", "всё", "второй", "вы", "выйти", "г", "где", "главный", "глаз", "говорил", "говорит", "говорить", "год", "года", "году", "голова", "голос", "город", "да", "давать", "давно", "даже", "далекий", "далеко", "дальше", "даром", "дать", "два", "двадцатый", "двадцать", "две", "двенадцатый", "двенадцать", "дверь", "двух", "девятнадцатый", "девятнадцать", "девятый", "девять", "действительно", "дел", "делал", "делать", "делаю", "дело", "день", "деньги", "десятый", "десять", "для", "до", "довольно", "долго", "должен", "должно", "должный", "дом", "дорога", "друг", "другая", "другие", "других", "друго", "другое", "другой", "думать", "душа", "е", "его", "ее", "ей", "ему", "если", "есть", "еще", "ещё", "ею", "её", "ж", "ждать", "же", "жена", "женщина", "жизнь", "жить", "за", "занят", "занята", "занято", "заняты", "затем", "зато", "зачем", "здесь", "земля", "знать", "значит", "значить", "и", "иди", "идти", "из", "или", "им", "имеет", "имел", "именно", "иметь", "ими", "имя", "иногда", "их", "к", "каждая", "каждое", "каждые", "каждый", "кажется", "казаться", "как", "какая", "какой", "кем", "книга", "когда", "кого", "ком", "комната", "кому", "конец", "конечно", "которая", "которого", "которой", "которые", "который", "которых", "кроме", "кругом", "кто", "куда", "лежать", "лет", "ли", "лицо", "лишь", "лучше", "любить", "люди", "м", "маленький", "мало", "мать", "машина", "между", "меля", "менее", "меньше", "меня", "место", "миллионов", "мимо", "минута", "мир", "мира", "мне", "много", "многочисленная", "многочисленное", "многочисленные", "многочисленный", "мной", "мною", "мог", "могу", "могут", "мож", "может", "может быть", "можно", "можхо", "мои", "мой", "мор", "москва", "мочь", "моя", "моё", "мы", "на", "наверху", "над", "надо", "назад", "наиболее", "найти", "наконец", "нам", "нами", "народ", "нас", "начала", "начать", "наш", "наша", "наше", "наши", "не", "него", "недавно", "недалеко", "нее", "ней", "некоторый", "нельзя", "нем", "немного", "нему", "непрерывно", "нередко", "несколько", "нет", "нею", "неё", "ни", "нибудь", "ниже", "низко", "никакой", "никогда", "никто", "никуда", "ним", "ними", "них", "ничего", "ничто", "но", "новый", "нога", "ночь", "ну", "нужно", "нужный", "нх", "о", "об", "оба", "обычно", "один", "одиннадцатый", "одиннадцать", "однажды", "однако", "одного", "одной", "оказаться", "окно", "около", "он", "она", "они", "оно", "опять", "особенно", "остаться", "от", "ответить", "отец", "откуда", "отовсюду", "отсюда", "очень", "первый", "перед", "писать", "плечо", "по", "под", "подойди", "подумать", "пожалуйста", "позже", "пойти", "пока", "пол", "получить", "помнить", "понимать", "понять", "пор", "пора", "после", "последний", "посмотреть", "посреди", "потом", "потому", "почему", "почти", "правда", "прекрасно", "при", "про", "просто", "против", "процентов", "путь", "пятнадцатый", "пятнадцать", "пятый", "пять", "работа", "работать", "раз", "разве", "рано", "раньше", "ребенок", "решить", "россия", "рука", "русский", "ряд", "рядом", "с", "с кем", "сам", "сама", "сами", "самим", "самими", "самих", "само", "самого", "самой", "самом", "самому", "саму", "самый", "свет", "свое", "своего", "своей", "свои", "своих", "свой", "свою", "сделать", "сеаой", "себе", "себя", "сегодня", "седьмой", "сейчас", "семнадцатый", "семнадцать", "семь", "сидеть", "сила", "сих", "сказал", "сказала", "сказать", "сколько", "слишком", "слово", "случай", "смотреть", "сначала", "снова", "со", "собой", "собою", "советский", "совсем", "спасибо", "спросить", "сразу", "стал", "старый", "стать", "стол", "сторона", "стоять", "страна", "суть", "считать", "т", "та", "так", "такая", "также", "таки", "такие", "такое", "такой", "там", "твои", "твой", "твоя", "твоё", "те", "тебе", "тебя", "тем", "теми", "теперь", "тех", "то", "тобой", "тобою", "товарищ", "тогда", "того", "тоже", "только", "том", "тому", "тот", "тою", "третий", "три", "тринадцатый", "тринадцать", "ту", "туда", "тут", "ты", "тысяч", "у", "увидеть", "уж", "уже", "улица", "уметь", "утро", "хороший", "хорошо", "хотел бы", "хотеть", "хоть", "хотя", "хочешь", "час", "часто", "часть", "чаще", "чего", "человек", "чем", "чему", "через", "четвертый", "четыре", "четырнадцатый", "четырнадцать", "что", "чтоб", "чтобы", "чуть", "шестнадцатый", "шестнадцать", "шестой", "шесть", "эта", "эти", "этим", "этими", "этих", "это", "этого", "этой", "этом", "этому", "этот", "эту", "я", "являюсь"],
  "sk": ["a", "aby", "aj", "ak", "akej", "akejže", "ako", "akom", "akomže", "akou", "akouže", "akože", "aká", "akáže", "aké", "akého", "akéhože", "akému", "akémuže", "akéže", "akú", "akúže", "aký", "akých", "akýchže", "akým", "akými", "akýmiže", "akýmže", "akýže", "ale", "alebo", "ani", "asi", "avšak", "až", "ba", "bez", "bezo", "bol", "bola", "boli", "bolo", "bude", "budem", "budeme", "budete", "budeš", "budú", "buď", "by", "byť", "cez", "cezo", "dnes", "do", "ešte", "ho", "hoci", "i", "iba", "ich", "im", "inej", "inom", "iná", "iné", "iného", "inému", "iní", "inú", "iný", "iných", "iným", "inými", "ja", "je", "jeho", "jej", "jemu", "ju", "k", "kam", "kamže", "každou", "každá", "každé", "každého", "každému", "každí", "každú", "každý", "každých", "každým", "každými", "kde", "kej", "kejže", "keď", "keďže", "kie", "kieho", "kiehože", "kiemu", "kiemuže", "kieže", "koho", "kom", "komu", "kou", "kouže", "kto", "ktorej", "ktorou", "ktorá", "ktoré", "ktorí", "ktorú", "ktorý", "ktorých", "ktorým", "ktorými", "ku", "ká", "káže", "ké", "kéže", "kú", "kúže", "ký", "kýho", "kýhože", "kým", "kýmu", "kýmuže", "kýže", "lebo", "leda", "ledaže", "len", "ma", "majú", "mal", "mala", "mali", "mať", "medzi", "mi", "mne", "mnou", "moja", "moje", "mojej", "mojich", "mojim", "mojimi", "mojou", "moju", "možno", "mu", "musia", "musieť", "musí", "musím", "musíme", "musíte", "musíš", "my", "má", "mám", "máme", "máte", "máš", "môcť", "môj", "môjho", "môže", "môžem", "môžeme", "môžete", "môžeš", "môžu", "mňa", "na", "nad", "nado", "najmä", "nami", "naša", "naše", "našej", "naši", "našich", "našim", "našimi", "našou", "ne", "nech", "neho", "nej", "nejakej", "nejakom", "nejakou", "nejaká", "nejaké", "nejakého", "nejakému", "nejakú", "nejaký", "nejakých", "nejakým", "nejakými", "nemu", "než", "nich", "nie", "niektorej", "niektorom", "niektorou", "niektorá", "niektoré", "niektorého", "niektorému", "niektorú", "niektorý", "niektorých", "niektorým", "niektorými", "nielen", "niečo", "nim", "nimi", "nič", "ničoho", "ničom", "ničomu", "ničím", "no", "nám", "nás", "náš", "nášho", "ním", "o", "od", "odo", "on", "ona", "oni", "ono", "ony", "oň", "oňho", "po", "pod", "podo", "podľa", "pokiaľ", "popod", "popri", "potom", "poza", "pre", "pred", "predo", "preto", "pretože", "prečo", "pri", "práve", "s", "sa", "seba", "sebe", "sebou", "sem", "si", "sme", "so", "som", "ste", "svoj", "svoja", "svoje", "svojho", "svojich", "svojim", "svojimi", "svojou", "svoju", "svojím", "sú", "ta", "tak", "takej", "takejto", "taká", "takáto", "také", "takého", "takéhoto", "takému", "takémuto", "takéto", "takí", "takú", "takúto", "taký", "takýto", "takže", "tam", "teba", "tebe", "tebou", "teda", "tej", "tejto", "ten", "tento", "ti", "tie", "tieto", "tiež", "to", "toho", "tohoto", "tohto", "tom", "tomto", "tomu", "tomuto", "toto", "tou", "touto", "tu", "tvoj", "tvoja", "tvoje", "tvojej", "tvojho", "tvoji", "tvojich", "tvojim", "tvojimi", "tvojím", "ty", "tá", "táto", "tí", "títo", "tú", "túto", "tých", "tým", "tými", "týmto", "u", "už", "v", "vami", "vaša", "vaše", "vašej", "vaši", "vašich", "vašim", "vaším", "veď", "viac", "vo", "vy", "vám", "vás", "váš", "vášho", "však", "všetci", "všetka", "všetko", "všetky", "všetok", "z", "za", "začo", "začože", "zo", "áno", "čej", "či", "čia", "čie", "čieho", "čiemu", "čiu", "čo", "čoho", "čom", "čomu", "čou", "čože", "čí", "čím", "čími", "ďalšia", "ďalšie", "ďalšieho", "ďalšiemu", "ďalšiu", "ďalšom", "ďalšou", "ďalší", "ďalších", "ďalším", "ďalšími", "ňom", "ňou", "ňu", "že"],
  "sl": ["a", "ali", "april", "avgust", "b", "bi", "bil", "bila", "bile", "bili", "bilo", "biti", "blizu", "bo", "bodo", "bojo", "bolj", "bom", "bomo", "boste", "bova", "boš", "brez", "c", "cel", "cela", "celi", "celo", "d", "da", "daleč", "dan", "danes", "datum", "december", "deset", "deseta", "deseti", "deseto", "devet", "deveta", "deveti", "deveto", "do", "dober", "dobra", "dobri", "dobro", "dokler", "dol", "dolg", "dolga", "dolgi", "dovolj", "drug", "druga", "drugi", "drugo", "dva", "dve", "e", "eden", "en", "ena", "ene", "eni", "enkrat", "eno", "etc.", "f", "februar", "g", "g.", "ga", "ga.", "gor", "gospa", "gospod", "h", "halo", "i", "idr.", "ii", "iii", "in", "iv", "ix", "iz", "j", "januar", "jaz", "je", "ji", "jih", "jim", "jo", "julij", "junij", "jutri", "k", "kadarkoli", "kaj", "kajti", "kako", "kakor", "kamor", "kamorkoli", "kar", "karkoli", "katerikoli", "kdaj", "kdo", "kdorkoli", "ker", "ki", "kje", "kjer", "kjerkoli", "ko", "koder", "koderkoli", "koga", "komu", "kot", "kratek", "kratka", "kratke", "kratki", "l", "lahka", "lahke", "lahki", "lahko", "le", "lep", "lepa", "lepe", "lepi", "lepo", "leto", "m", "maj", "majhen", "majhna", "majhni", "malce", "malo", "manj", "marec", "me", "med", "medtem", "mene", "mesec", "mi", "midva", "midve", "mnogo", "moj", "moja", "moje", "mora", "morajo", "moram", "moramo", "morate", "moraš", "morem", "mu", "n", "na", "nad", "naj", "najina", "najino", "najmanj", "naju", "največ", "nam", "narobe", "nas", "nato", "nazaj", "naš", "naša", "naše", "ne", "nedavno", "nedelja", "nek", "neka", "nekaj", "nekatere", "nekateri", "nekatero", "nekdo", "neke", "nekega", "neki", "nekje", "neko", "nekoga", "nekoč", "ni", "nikamor", "nikdar", "nikjer", "nikoli", "nič", "nje", "njega", "njegov", "njegova", "njegovo", "njej", "njemu", "njen", "njena", "njeno", "nji", "njih", "njihov", "njihova", "njihovo", "njiju", "njim", "njo", "njun", "njuna", "njuno", "no", "nocoj", "november", "npr.", "o", "ob", "oba", "obe", "oboje", "od", "odprt", "odprta", "odprti", "okoli", "oktober", "on", "onadva", "one", "oni", "onidve", "osem", "osma", "osmi", "osmo", "oz.", "p", "pa", "pet", "peta", "petek", "peti", "peto", "po", "pod", "pogosto", "poleg", "poln", "polna", "polni", "polno", "ponavadi", "ponedeljek", "ponovno", "potem", "povsod", "pozdravljen", "pozdravljeni", "prav", "prava", "prave", "pravi", "pravo", "prazen", "prazna", "prazno", "prbl.", "precej", "pred", "prej", "preko", "pri", "pribl.", "približno", "primer", "pripravljen", "pripravljena", "pripravljeni", "proti", "prva", "prvi", "prvo", "r", "ravno", "redko", "res", "reč", "s", "saj", "sam", "sama", "same", "sami", "samo", "se", "sebe", "sebi", "sedaj", "sedem", "sedma", "sedmi", "sedmo", "sem", "september", "seveda", "si", "sicer", "skoraj", "skozi", "slab", "smo", "so", "sobota", "spet", "sreda", "srednja", "srednji", "sta", "ste", "stran", "stvar", "sva", "t", "ta", "tak", "taka", "take", "taki", "tako", "takoj", "tam", "te", "tebe", "tebi", "tega", "težak", "težka", "težki", "težko", "ti", "tista", "tiste", "tisti", "tisto", "tj.", "tja", "to", "toda", "torek", "tretja", "tretje", "tretji", "tri", "tu", "tudi", "tukaj", "tvoj", "tvoja", "tvoje", "u", "v", "vaju", "vam", "vas", "vaš", "vaša", "vaše", "ve", "vedno", "velik", "velika", "veliki", "veliko", "vendar", "ves", "več", "vi", "vidva", "vii", "viii", "visok", "visoka", "visoke", "visoki", "vsa", "vsaj", "vsak", "vsaka", "vsakdo", "vsake", "vsaki", "vsakomur", "vse", "vsega", "vsi", "vso", "včasih", "včeraj", "x", "z", "za", "zadaj", "zadnji", "zakaj", "zaprta", "zaprti", "zaprto", "zdaj", "zelo", "zunaj", "č", "če", "često", "četrta", "četrtek", "četrti", "četrto", "čez", "čigav", "š", "šest", "šesta", "šesti", "šesto", "štiri", "ž", "že"],
  "so": ["aad", "albaabkii", "atabo", "ay", "ayaa", "ayee", "ayuu", "dhan", "hadana", "in", "inuu", "isku", "jiray", "jirtay", "ka", "kale", "kasoo", "ku", "kuu", "lakin", "markii", "oo", "si", "soo", "uga", "ugu", "uu", "waa", "waxa", "waxuu"],
  "st": ["a", "ba", "bane", "bona", "e", "ea", "eaba", "empa", "ena", "ha", "hae", "hape", "ho", "hore", "ka", "ke", "la", "le", "li", "me", "mo", "moo", "ne", "o", "oa", "re", "sa", "se", "tloha", "tsa", "tse"],
  "es": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "_", "a", "actualmente", "acuerdo", "adelante", "ademas", "además", "adrede", "afirmó", "agregó", "ahi", "ahora", "ahí", "al", "algo", "alguna", "algunas", "alguno", "algunos", "algún", "alli", "allí", "alrededor", "ambos", "ampleamos", "antano", "antaño", "ante", "anterior", "antes", "apenas", "aproximadamente", "aquel", "aquella", "aquellas", "aquello", "aquellos", "aqui", "aquél", "aquélla", "aquéllas", "aquéllos", "aquí", "arriba", "arribaabajo", "aseguró", "asi", "así", "atras", "aun", "aunque", "ayer", "añadió", "aún", "b", "bajo", "bastante", "bien", "breve", "buen", "buena", "buenas", "bueno", "buenos", "c", "cada", "casi", "cerca", "cierta", "ciertas", "cierto", "ciertos", "cinco", "claro", "comentó", "como", "con", "conmigo", "conocer", "conseguimos", "conseguir", "considera", "consideró", "consigo", "consigue", "consiguen", "consigues", "contigo", "contra", "cosas", "creo", "cual", "cuales", "cualquier", "cuando", "cuanta", "cuantas", "cuanto", "cuantos", "cuatro", "cuenta", "cuál", "cuáles", "cuándo", "cuánta", "cuántas", "cuánto", "cuántos", "cómo", "d", "da", "dado", "dan", "dar", "de", "debajo", "debe", "deben", "debido", "decir", "dejó", "del", "delante", "demasiado", "demás", "dentro", "deprisa", "desde", "despacio", "despues", "después", "detras", "detrás", "dia", "dias", "dice", "dicen", "dicho", "dieron", "diferente", "diferentes", "dijeron", "dijo", "dio", "donde", "dos", "durante", "día", "días", "dónde", "e", "ejemplo", "el", "ella", "ellas", "ello", "ellos", "embargo", "empleais", "emplean", "emplear", "empleas", "empleo", "en", "encima", "encuentra", "enfrente", "enseguida", "entonces", "entre", "era", "erais", "eramos", "eran", "eras", "eres", "es", "esa", "esas", "ese", "eso", "esos", "esta", "estaba", "estabais", "estaban", "estabas", "estad", "estada", "estadas", "estado", "estados", "estais", "estamos", "estan", "estando", "estar", "estaremos", "estará", "estarán", "estarás", "estaré", "estaréis", "estaría", "estaríais", "estaríamos", "estarían", "estarías", "estas", "este", "estemos", "esto", "estos", "estoy", "estuve", "estuviera", "estuvierais", "estuvieran", "estuvieras", "estuvieron", "estuviese", "estuvieseis", "estuviesen", "estuvieses", "estuvimos", "estuviste", "estuvisteis", "estuviéramos", "estuviésemos", "estuvo", "está", "estábamos", "estáis", "están", "estás", "esté", "estéis", "estén", "estés", "ex", "excepto", "existe", "existen", "explicó", "expresó", "f", "fin", "final", "fue", "fuera", "fuerais", "fueran", "fueras", "fueron", "fuese", "fueseis", "fuesen", "fueses", "fui", "fuimos", "fuiste", "fuisteis", "fuéramos", "fuésemos", "g", "general", "gran", "grandes", "gueno", "h", "ha", "haber", "habia", "habida", "habidas", "habido", "habidos", "habiendo", "habla", "hablan", "habremos", "habrá", "habrán", "habrás", "habré", "habréis", "habría", "habríais", "habríamos", "habrían", "habrías", "habéis", "había", "habíais", "habíamos", "habían", "habías", "hace", "haceis", "hacemos", "hacen", "hacer", "hacerlo", "haces", "hacia", "haciendo", "hago", "han", "has", "hasta", "hay", "haya", "hayamos", "hayan", "hayas", "hayáis", "he", "hecho", "hemos", "hicieron", "hizo", "horas", "hoy", "hube", "hubiera", "hubierais", "hubieran", "hubieras", "hubieron", "hubiese", "hubieseis", "hubiesen", "hubieses", "hubimos", "hubiste", "hubisteis", "hubiéramos", "hubiésemos", "hubo", "i", "igual", "incluso", "indicó", "informo", "informó", "intenta", "intentais", "intentamos", "intentan", "intentar", "intentas", "intento", "ir", "j", "junto", "k", "l", "la", "lado", "largo", "las", "le", "lejos", "les", "llegó", "lleva", "llevar", "lo", "los", "luego", "lugar", "m", "mal", "manera", "manifestó", "mas", "mayor", "me", "mediante", "medio", "mejor", "mencionó", "menos", "menudo", "mi", "mia", "mias", "mientras", "mio", "mios", "mis", "misma", "mismas", "mismo", "mismos", "modo", "momento", "mucha", "muchas", "mucho", "muchos", "muy", "más", "mí", "mía", "mías", "mío", "míos", "n", "nada", "nadie", "ni", "ninguna", "ningunas", "ninguno", "ningunos", "ningún", "no", "nos", "nosotras", "nosotros", "nuestra", "nuestras", "nuestro", "nuestros", "nueva", "nuevas", "nuevo", "nuevos", "nunca", "o", "ocho", "os", "otra", "otras", "otro", "otros", "p", "pais", "para", "parece", "parte", "partir", "pasada", "pasado", "paìs", "peor", "pero", "pesar", "poca", "pocas", "poco", "pocos", "podeis", "podemos", "poder", "podria", "podriais", "podriamos", "podrian", "podrias", "podrá", "podrán", "podría", "podrían", "poner", "por", "por qué", "porque", "posible", "primer", "primera", "primero", "primeros", "principalmente", "pronto", "propia", "propias", "propio", "propios", "proximo", "próximo", "próximos", "pudo", "pueda", "puede", "pueden", "puedo", "pues", "q", "qeu", "que", "quedó", "queremos", "quien", "quienes", "quiere", "quiza", "quizas", "quizá", "quizás", "quién", "quiénes", "qué", "r", "raras", "realizado", "realizar", "realizó", "repente", "respecto", "s", "sabe", "sabeis", "sabemos", "saben", "saber", "sabes", "sal", "salvo", "se", "sea", "seamos", "sean", "seas", "segun", "segunda", "segundo", "según", "seis", "ser", "sera", "seremos", "será", "serán", "serás", "seré", "seréis", "sería", "seríais", "seríamos", "serían", "serías", "seáis", "señaló", "si", "sido", "siempre", "siendo", "siete", "sigue", "siguiente", "sin", "sino", "sobre", "sois", "sola", "solamente", "solas", "solo", "solos", "somos", "son", "soy", "soyos", "su", "supuesto", "sus", "suya", "suyas", "suyo", "suyos", "sé", "sí", "sólo", "t", "tal", "tambien", "también", "tampoco", "tan", "tanto", "tarde", "te", "temprano", "tendremos", "tendrá", "tendrán", "tendrás", "tendré", "tendréis", "tendría", "tendríais", "tendríamos", "tendrían", "tendrías", "tened", "teneis", "tenemos", "tener", "tenga", "tengamos", "tengan", "tengas", "tengo", "tengáis", "tenida", "tenidas", "tenido", "tenidos", "teniendo", "tenéis", "tenía", "teníais", "teníamos", "tenían", "tenías", "tercera", "ti", "tiempo", "tiene", "tienen", "tienes", "toda", "todas", "todavia", "todavía", "todo", "todos", "total", "trabaja", "trabajais", "trabajamos", "trabajan", "trabajar", "trabajas", "trabajo", "tras", "trata", "través", "tres", "tu", "tus", "tuve", "tuviera", "tuvierais", "tuvieran", "tuvieras", "tuvieron", "tuviese", "tuvieseis", "tuviesen", "tuvieses", "tuvimos", "tuviste", "tuvisteis", "tuviéramos", "tuviésemos", "tuvo", "tuya", "tuyas", "tuyo", "tuyos", "tú", "u", "ultimo", "un", "una", "unas", "uno", "unos", "usa", "usais", "usamos", "usan", "usar", "usas", "uso", "usted", "ustedes", "v", "va", "vais", "valor", "vamos", "van", "varias", "varios", "vaya", "veces", "ver", "verdad", "verdadera", "verdadero", "vez", "vosotras", "vosotros", "voy", "vuestra", "vuestras", "vuestro", "vuestros", "w", "x", "y", "ya", "yo", "z", "él", "éramos", "ésa", "ésas", "ése", "ésos", "ésta", "éstas", "éste", "éstos", "última", "últimas", "último", "últimos"],
  "sw": ["akasema", "alikuwa", "alisema", "baada", "basi", "bila", "cha", "chini", "hadi", "hapo", "hata", "hivyo", "hiyo", "huku", "huo", "ili", "ilikuwa", "juu", "kama", "karibu", "katika", "kila", "kima", "kisha", "kubwa", "kutoka", "kuwa", "kwa", "kwamba", "kwenda", "kwenye", "la", "lakini", "mara", "mdogo", "mimi", "mkubwa", "mmoja", "moja", "muda", "mwenye", "na", "naye", "ndani", "ng", "ni", "nini", "nonkungu", "pamoja", "pia", "sana", "sasa", "sauti", "tafadhali", "tena", "tu", "vile", "wa", "wakati", "wake", "walikuwa", "wao", "watu", "wengine", "wote", "ya", "yake", "yangu", "yao", "yeye", "yule", "za", "zaidi", "zake"],
  "sv": ["aderton", "adertonde", "adjö", "aldrig", "alla", "allas", "allt", "alltid", "alltså", "andra", "andras", "annan", "annat", "artonde", "artonn", "att", "av", "bakom", "bara", "behöva", "behövas", "behövde", "behövt", "beslut", "beslutat", "beslutit", "bland", "blev", "bli", "blir", "blivit", "bort", "borta", "bra", "bäst", "bättre", "båda", "bådas", "dag", "dagar", "dagarna", "dagen", "de", "del", "delen", "dem", "den", "denna", "deras", "dess", "dessa", "det", "detta", "dig", "din", "dina", "dit", "ditt", "dock", "dom", "du", "där", "därför", "då", "e", "efter", "eftersom", "ej", "elfte", "eller", "elva", "emot", "en", "enkel", "enkelt", "enkla", "enligt", "ens", "er", "era", "ers", "ert", "ett", "ettusen", "fanns", "fem", "femte", "femtio", "femtionde", "femton", "femtonde", "fick", "fin", "finnas", "finns", "fjorton", "fjortonde", "fjärde", "fler", "flera", "flesta", "fram", "framför", "från", "fyra", "fyrtio", "fyrtionde", "få", "får", "fått", "följande", "för", "före", "förlåt", "förra", "första", "genast", "genom", "gick", "gjorde", "gjort", "god", "goda", "godare", "godast", "gott", "gälla", "gäller", "gällt", "gärna", "gå", "går", "gått", "gör", "göra", "ha", "hade", "haft", "han", "hans", "har", "heller", "hellre", "helst", "helt", "henne", "hennes", "hit", "hon", "honom", "hundra", "hundraen", "hundraett", "hur", "här", "hög", "höger", "högre", "högst", "i", "ibland", "icke", "idag", "igen", "igår", "imorgon", "in", "inför", "inga", "ingen", "ingenting", "inget", "innan", "inne", "inom", "inte", "inuti", "ja", "jag", "jo", "ju", "just", "jämfört", "kan", "kanske", "knappast", "kom", "komma", "kommer", "kommit", "kr", "kunde", "kunna", "kunnat", "kvar", "legat", "ligga", "ligger", "lika", "likställd", "likställda", "lilla", "lite", "liten", "litet", "länge", "längre", "längst", "lätt", "lättare", "lättast", "långsam", "långsammare", "långsammast", "långsamt", "långt", "låt", "man", "med", "mej", "mellan", "men", "mer", "mera", "mest", "mig", "min", "mina", "mindre", "minst", "mitt", "mittemot", "mot", "mycket", "många", "måste", "möjlig", "möjligen", "möjligt", "möjligtvis", "ned", "nederst", "nedersta", "nedre", "nej", "ner", "ni", "nio", "nionde", "nittio", "nittionde", "nitton", "nittonde", "nog", "noll", "nr", "nu", "nummer", "när", "nästa", "någon", "någonting", "något", "några", "nån", "nånting", "nåt", "nödvändig", "nödvändiga", "nödvändigt", "nödvändigtvis", "och", "också", "ofta", "oftast", "olika", "olikt", "om", "oss", "på", "rakt", "redan", "rätt", "sa", "sade", "sagt", "samma", "sedan", "senare", "senast", "sent", "sex", "sextio", "sextionde", "sexton", "sextonde", "sig", "sin", "sina", "sist", "sista", "siste", "sitt", "sitta", "sju", "sjunde", "sjuttio", "sjuttionde", "sjutton", "sjuttonde", "själv", "sjätte", "ska", "skall", "skulle", "slutligen", "små", "smått", "snart", "som", "stor", "stora", "stort", "större", "störst", "säga", "säger", "sämre", "sämst", "så", "sådan", "sådana", "sådant", "ta", "tack", "tar", "tidig", "tidigare", "tidigast", "tidigt", "till", "tills", "tillsammans", "tio", "tionde", "tjugo", "tjugoen", "tjugoett", "tjugonde", "tjugotre", "tjugotvå", "tjungo", "tolfte", "tolv", "tre", "tredje", "trettio", "trettionde", "tretton", "trettonde", "två", "tvåhundra", "under", "upp", "ur", "ursäkt", "ut", "utan", "utanför", "ute", "va", "vad", "var", "vara", "varför", "varifrån", "varit", "varje", "varken", "vars", "varsågod", "vart", "vem", "vems", "verkligen", "vi", "vid", "vidare", "viktig", "viktigare", "viktigast", "viktigt", "vilka", "vilkas", "vilken", "vilket", "vill", "väl", "vänster", "vänstra", "värre", "vår", "våra", "vårt", "än", "ännu", "är", "även", "åt", "åtminstone", "åtta", "åttio", "åttionde", "åttonde", "över", "övermorgon", "överst", "övre"],
  "th": ["กล่าว", "กว่า", "กัน", "กับ", "การ", "ก็", "ก่อน", "ขณะ", "ขอ", "ของ", "ขึ้น", "คง", "ครั้ง", "ความ", "คือ", "จะ", "จัด", "จาก", "จึง", "ช่วง", "ซึ่ง", "ดัง", "ด้วย", "ด้าน", "ตั้ง", "ตั้งแต่", "ตาม", "ต่อ", "ต่าง", "ต่างๆ", "ต้อง", "ถึง", "ถูก", "ถ้า", "ทั้ง", "ทั้งนี้", "ทาง", "ที่", "ที่สุด", "ทุก", "ทํา", "ทําให้", "นอกจาก", "นัก", "นั้น", "นี้", "น่า", "นํา", "บาง", "ผล", "ผ่าน", "พบ", "พร้อม", "มา", "มาก", "มี", "ยัง", "รวม", "ระหว่าง", "รับ", "ราย", "ร่วม", "ลง", "วัน", "ว่า", "สุด", "ส่ง", "ส่วน", "สําหรับ", "หนึ่ง", "หรือ", "หลัง", "หลังจาก", "หลาย", "หาก", "อยาก", "อยู่", "อย่าง", "ออก", "อะไร", "อาจ", "อีก", "เขา", "เข้า", "เคย", "เฉพาะ", "เช่น", "เดียว", "เดียวกัน", "เนื่องจาก", "เปิด", "เปิดเผย", "เป็น", "เป็นการ", "เพราะ", "เพื่อ", "เมื่อ", "เรา", "เริ่ม", "เลย", "เห็น", "เอง", "แต่", "แบบ", "แรก", "และ", "แล้ว", "แห่ง", "โดย", "ใน", "ให้", "ได้", "ไป", "ไม่", "ไว้", "้ง"],
  "tl": ["akin", "aking", "ako", "alin", "am", "amin", "aming", "ang", "ano", "anumang", "apat", "at", "atin", "ating", "ay", "bababa", "bago", "bakit", "bawat", "bilang", "dahil", "dalawa", "dapat", "din", "dito", "doon", "gagawin", "gayunman", "ginagawa", "ginawa", "ginawang", "gumawa", "gusto", "habang", "hanggang", "hindi", "huwag", "iba", "ibaba", "ibabaw", "ibig", "ikaw", "ilagay", "ilalim", "ilan", "inyong", "isa", "isang", "itaas", "ito", "iyo", "iyon", "iyong", "ka", "kahit", "kailangan", "kailanman", "kami", "kanila", "kanilang", "kanino", "kanya", "kanyang", "kapag", "kapwa", "karamihan", "katiyakan", "katulad", "kaya", "kaysa", "ko", "kong", "kulang", "kumuha", "kung", "laban", "lahat", "lamang", "likod", "lima", "maaari", "maaaring", "maging", "mahusay", "makita", "marami", "marapat", "masyado", "may", "mayroon", "mga", "minsan", "mismo", "mula", "muli", "na", "nabanggit", "naging", "nagkaroon", "nais", "nakita", "namin", "napaka", "narito", "nasaan", "ng", "ngayon", "ni", "nila", "nilang", "nito", "niya", "niyang", "noon", "o", "pa", "paano", "pababa", "paggawa", "pagitan", "pagkakaroon", "pagkatapos", "palabas", "pamamagitan", "panahon", "pangalawa", "para", "paraan", "pareho", "pataas", "pero", "pumunta", "pumupunta", "sa", "saan", "sabi", "sabihin", "sarili", "sila", "sino", "siya", "tatlo", "tayo", "tulad", "tungkol", "una", "walang"],
  "tr": ["acaba", "acep", "adamakıllı", "adeta", "ait", "altmýþ", "altmış", "altý", "altı", "ama", "amma", "anca", "ancak", "arada", "artýk", "aslında", "aynen", "ayrıca", "az", "açıkça", "açıkçası", "bana", "bari", "bazen", "bazý", "bazı", "başkası", "baţka", "belki", "ben", "benden", "beni", "benim", "beri", "beriki", "beþ", "beş", "beţ", "bilcümle", "bile", "bin", "binaen", "binaenaleyh", "bir", "biraz", "birazdan", "birbiri", "birden", "birdenbire", "biri", "birice", "birileri", "birisi", "birkaç", "birkaçı", "birkez", "birlikte", "birçok", "birçoğu", "birþey", "birþeyi", "birşey", "birşeyi", "birţey", "bitevi", "biteviye", "bittabi", "biz", "bizatihi", "bizce", "bizcileyin", "bizden", "bize", "bizi", "bizim", "bizimki", "bizzat", "boşuna", "bu", "buna", "bunda", "bundan", "bunlar", "bunları", "bunların", "bunu", "bunun", "buracıkta", "burada", "buradan", "burası", "böyle", "böylece", "böylecene", "böylelikle", "böylemesine", "böylesine", "büsbütün", "bütün", "cuk", "cümlesi", "da", "daha", "dahi", "dahil", "dahilen", "daima", "dair", "dayanarak", "de", "defa", "dek", "demin", "demincek", "deminden", "denli", "derakap", "derhal", "derken", "deđil", "değil", "değin", "diye", "diđer", "diğer", "diğeri", "doksan", "dokuz", "dolayı", "dolayısıyla", "doğru", "dört", "edecek", "eden", "ederek", "edilecek", "ediliyor", "edilmesi", "ediyor", "elbet", "elbette", "elli", "emme", "en", "enikonu", "epey", "epeyce", "epeyi", "esasen", "esnasında", "etmesi", "etraflı", "etraflıca", "etti", "ettiği", "ettiğini", "evleviyetle", "evvel", "evvela", "evvelce", "evvelden", "evvelemirde", "evveli", "eđer", "eğer", "fakat", "filanca", "gah", "gayet", "gayetle", "gayri", "gayrı", "gelgelelim", "gene", "gerek", "gerçi", "geçende", "geçenlerde", "gibi", "gibilerden", "gibisinden", "gine", "göre", "gırla", "hakeza", "halbuki", "halen", "halihazırda", "haliyle", "handiyse", "hangi", "hangisi", "hani", "hariç", "hasebiyle", "hasılı", "hatta", "hele", "hem", "henüz", "hep", "hepsi", "her", "herhangi", "herkes", "herkesin", "hiç", "hiçbir", "hiçbiri", "hoş", "hulasaten", "iken", "iki", "ila", "ile", "ilen", "ilgili", "ilk", "illa", "illaki", "imdi", "indinde", "inen", "insermi", "ise", "ister", "itibaren", "itibariyle", "itibarıyla", "iyi", "iyice", "iyicene", "için", "iş", "işte", "iţte", "kadar", "kaffesi", "kah", "kala", "kanýmca", "karşın", "katrilyon", "kaynak", "kaçı", "kelli", "kendi", "kendilerine", "kendini", "kendisi", "kendisine", "kendisini", "kere", "kez", "keza", "kezalik", "keşke", "keţke", "ki", "kim", "kimden", "kime", "kimi", "kimisi", "kimse", "kimsecik", "kimsecikler", "külliyen", "kýrk", "kýsaca", "kırk", "kısaca", "lakin", "leh", "lütfen", "maada", "madem", "mademki", "mamafih", "mebni", "međer", "meğer", "meğerki", "meğerse", "milyar", "milyon", "mu", "mü", "mý", "mı", "nasýl", "nasıl", "nasılsa", "nazaran", "naşi", "ne", "neden", "nedeniyle", "nedenle", "nedense", "nerde", "nerden", "nerdeyse", "nere", "nerede", "nereden", "neredeyse", "neresi", "nereye", "netekim", "neye", "neyi", "neyse", "nice", "nihayet", "nihayetinde", "nitekim", "niye", "niçin", "o", "olan", "olarak", "oldu", "olduklarını", "oldukça", "olduğu", "olduğunu", "olmadı", "olmadığı", "olmak", "olması", "olmayan", "olmaz", "olsa", "olsun", "olup", "olur", "olursa", "oluyor", "on", "ona", "onca", "onculayın", "onda", "ondan", "onlar", "onlardan", "onlari", "onlarýn", "onları", "onların", "onu", "onun", "oracık", "oracıkta", "orada", "oradan", "oranca", "oranla", "oraya", "otuz", "oysa", "oysaki", "pek", "pekala", "peki", "pekçe", "peyderpey", "rağmen", "sadece", "sahi", "sahiden", "sana", "sanki", "sekiz", "seksen", "sen", "senden", "seni", "senin", "siz", "sizden", "sizi", "sizin", "sonra", "sonradan", "sonraları", "sonunda", "tabii", "tam", "tamam", "tamamen", "tamamıyla", "tarafından", "tek", "trilyon", "tüm", "var", "vardı", "vasıtasıyla", "ve", "velev", "velhasıl", "velhasılıkelam", "veya", "veyahut", "ya", "yahut", "yakinen", "yakında", "yakından", "yakınlarda", "yalnız", "yalnızca", "yani", "yapacak", "yapmak", "yaptı", "yaptıkları", "yaptığı", "yaptığını", "yapılan", "yapılması", "yapıyor", "yedi", "yeniden", "yenilerde", "yerine", "yetmiþ", "yetmiş", "yetmiţ", "yine", "yirmi", "yok", "yoksa", "yoluyla", "yüz", "yüzünden", "zarfında", "zaten", "zati", "zira", "çabuk", "çabukça", "çeşitli", "çok", "çokları", "çoklarınca", "çokluk", "çoklukla", "çokça", "çoğu", "çoğun", "çoğunca", "çoğunlukla", "çünkü", "öbür", "öbürkü", "öbürü", "önce", "önceden", "önceleri", "öncelikle", "öteki", "ötekisi", "öyle", "öylece", "öylelikle", "öylemesine", "öz", "üzere", "üç", "þey", "þeyden", "þeyi", "þeyler", "þu", "þuna", "þunda", "þundan", "þunu", "şayet", "şey", "şeyden", "şeyi", "şeyler", "şu", "şuna", "şuncacık", "şunda", "şundan", "şunlar", "şunları", "şunu", "şunun", "şura", "şuracık", "şuracıkta", "şurası", "şöyle", "ţayet", "ţimdi", "ţu", "ţöyle"],
  "uk": ["авжеж", "адже", "але", "б", "без", "був", "була", "були", "було", "бути", "більш", "вам", "вас", "весь", "вздовж", "ви", "вниз", "внизу", "вона", "вони", "воно", "все", "всередині", "всіх", "від", "він", "да", "давай", "давати", "де", "дещо", "для", "до", "з", "завжди", "замість", "й", "коли", "ледве", "майже", "ми", "навколо", "навіть", "нам", "от", "отже", "отож", "поза", "про", "під", "та", "так", "такий", "також", "те", "ти", "тобто", "тож", "тощо", "хоча", "це", "цей", "чи", "чого", "що", "як", "який", "якої", "є", "із", "інших", "їх", "її"],
  "ur": ["آئی", "آئے", "آج", "آخر", "آخرکبر", "آدهی", "آًب", "آٹھ", "آیب", "اة", "اخبزت", "اختتبم", "ادھر", "ارد", "اردگرد", "ارکبى", "اش", "اضتعوبل", "اضتعوبلات", "اضطرذ", "اضکب", "اضکی", "اضکے", "اطراف", "اغیب", "افراد", "الگ", "اور", "اوًچب", "اوًچبئی", "اوًچی", "اوًچے", "اى", "اً", "اًذر", "اًہیں", "اٹھبًب", "اپٌب", "اپٌے", "اچھب", "اچھی", "اچھے", "اکثر", "اکٹھب", "اکٹھی", "اکٹھے", "اکیلا", "اکیلی", "اکیلے", "اگرچہ", "اہن", "ایطے", "ایک", "ب", "ت", "تبزٍ", "تت", "تر", "ترتیت", "تریي", "تعذاد", "تن", "تو", "توبم", "توہی", "توہیں", "تٌہب", "تک", "تھب", "تھوڑا", "تھوڑی", "تھوڑے", "تھی", "تھے", "تیي", "ثب", "ثبئیں", "ثبترتیت", "ثبری", "ثبرے", "ثبعث", "ثبلا", "ثبلترتیت", "ثبہر", "ثدبئے", "ثرآں", "ثراں", "ثرش", "ثعذ", "ثغیر", "ثلٌذ", "ثلٌذوثبلا", "ثلکہ", "ثي", "ثٌب", "ثٌبرہب", "ثٌبرہی", "ثٌبرہے", "ثٌبًب", "ثٌذ", "ثٌذکرو", "ثٌذکرًب", "ثٌذی", "ثڑا", "ثڑوں", "ثڑی", "ثڑے", "ثھر", "ثھرا", "ثھراہوا", "ثھرپور", "ثھی", "ثہت", "ثہتر", "ثہتری", "ثہتریي", "ثیچ", "ج", "خب", "خبرہب", "خبرہی", "خبرہے", "خبهوظ", "خبًب", "خبًتب", "خبًتی", "خبًتے", "خبًٌب", "خت", "ختن", "خجکہ", "خص", "خططرذ", "خلذی", "خو", "خواى", "خوًہی", "خوکہ", "خٌبة", "خگہ", "خگہوں", "خگہیں", "خیطب", "خیطبکہ", "در", "درخبت", "درخہ", "درخے", "درزقیقت", "درضت", "دش", "دفعہ", "دلچطپ", "دلچطپی", "دلچطپیبں", "دو", "دور", "دوراى", "دوضرا", "دوضروں", "دوضری", "دوضرے", "دوًوں", "دکھبئیں", "دکھبتب", "دکھبتی", "دکھبتے", "دکھبو", "دکھبًب", "دکھبیب", "دی", "دیب", "دیتب", "دیتی", "دیتے", "دیر", "دیٌب", "دیکھو", "دیکھٌب", "دیکھی", "دیکھیں", "دے", "ر", "راضتوں", "راضتہ", "راضتے", "رریعہ", "رریعے", "رکي", "رکھ", "رکھب", "رکھتب", "رکھتبہوں", "رکھتی", "رکھتے", "رکھی", "رکھے", "رہب", "رہی", "رہے", "ز", "زبصل", "زبضر", "زبل", "زبلات", "زبلیہ", "زصوں", "زصہ", "زصے", "زقبئق", "زقیتیں", "زقیقت", "زکن", "زکویہ", "زیبدٍ", "صبف", "صسیر", "صفر", "صورت", "صورتسبل", "صورتوں", "صورتیں", "ض", "ضبت", "ضبتھ", "ضبدٍ", "ضبرا", "ضبرے", "ضبل", "ضبلوں", "ضت", "ضرور", "ضرورت", "ضروری", "ضلطلہ", "ضوچ", "ضوچب", "ضوچتب", "ضوچتی", "ضوچتے", "ضوچو", "ضوچٌب", "ضوچی", "ضوچیں", "ضکب", "ضکتب", "ضکتی", "ضکتے", "ضکٌب", "ضکی", "ضکے", "ضیذھب", "ضیذھی", "ضیذھے", "ضیکٌڈ", "ضے", "طرف", "طریق", "طریقوں", "طریقہ", "طریقے", "طور", "طورپر", "ظبہر", "ع", "عذد", "عظین", "علاقوں", "علاقہ", "علاقے", "علاوٍ", "عووهی", "غبیذ", "غخص", "غذ", "غروع", "غروعبت", "غے", "فرد", "فی", "ق", "قجل", "قجیلہ", "قطن", "لئے", "لا", "لازهی", "لو", "لوجب", "لوجی", "لوجے", "لوسبت", "لوسہ", "لوگ", "لوگوں", "لڑکپي", "لگتب", "لگتی", "لگتے", "لگٌب", "لگی", "لگیں", "لگے", "لی", "لیب", "لیٌب", "لیں", "لے", "ه", "هتعلق", "هختلف", "هسترم", "هسترهہ", "هسطوش", "هسیذ", "هطئلہ", "هطئلے", "هطبئل", "هطتعول", "هطلق", "هعلوم", "هػتول", "هلا", "هوکي", "هوکٌبت", "هوکٌہ", "هٌبضت", "هڑا", "هڑًب", "هڑے", "هکول", "هگر", "هہرثبى", "هیرا", "هیری", "هیرے", "هیں", "و", "وار", "والے", "وٍ", "ًئی", "ًئے", "ًب", "ًبپطٌذ", "ًبگسیر", "ًطجت", "ًقطہ", "ًو", "ًوخواى", "ًکبلٌب", "ًکتہ", "ًہ", "ًہیں", "ًیب", "ًے", "ٓ آش", "ٹھیک", "پبئے", "پبش", "پبًب", "پبًچ", "پر", "پراًب", "پطٌذ", "پل", "پورا", "پوچھب", "پوچھتب", "پوچھتی", "پوچھتے", "پوچھو", "پوچھوں", "پوچھٌب", "پوچھیں", "پچھلا", "پھر", "پہلا", "پہلی", "پہلےضی", "پہلےضے", "پہلےضےہی", "پیع", "چبر", "چبہب", "چبہٌب", "چبہے", "چلا", "چلو", "چلیں", "چلے", "چکب", "چکی", "چکیں", "چکے", "چھوٹب", "چھوٹوں", "چھوٹی", "چھوٹے", "چھہ", "چیسیں", "ڈھوًڈا", "ڈھوًڈلیب", "ڈھوًڈو", "ڈھوًڈًب", "ڈھوًڈی", "ڈھوًڈیں", "ک", "کئی", "کئے", "کب", "کبفی", "کبم", "کت", "کجھی", "کرا", "کرتب", "کرتبہوں", "کرتی", "کرتے", "کرتےہو", "کررہب", "کررہی", "کررہے", "کرو", "کرًب", "کریں", "کرے", "کطی", "کل", "کن", "کوئی", "کوتر", "کورا", "کوروں", "کورٍ", "کورے", "کوطي", "کوى", "کوًطب", "کوًطی", "کوًطے", "کھولا", "کھولو", "کھولٌب", "کھولی", "کھولیں", "کھولے", "کہ", "کہب", "کہتب", "کہتی", "کہتے", "کہو", "کہوں", "کہٌب", "کہی", "کہیں", "کہے", "کی", "کیب", "کیطب", "کیطرف", "کیطے", "کیلئے", "کیوًکہ", "کیوں", "کیے", "کے", "کےثعذ", "کےرریعے", "گئی", "گئے", "گب", "گرد", "گروٍ", "گروپ", "گروہوں", "گٌتی", "گی", "گیب", "گے", "ہر", "ہن", "ہو", "ہوئی", "ہوئے", "ہوا", "ہوبرا", "ہوبری", "ہوبرے", "ہوتب", "ہوتی", "ہوتے", "ہورہب", "ہورہی", "ہورہے", "ہوضکتب", "ہوضکتی", "ہوضکتے", "ہوًب", "ہوًی", "ہوًے", "ہوچکب", "ہوچکی", "ہوچکے", "ہوگئی", "ہوگئے", "ہوگیب", "ہوں", "ہی", "ہیں", "ہے", "ی", "یقیٌی", "یہ", "یہبں"],
  "vi": ["a ha", "a-lô", "ai", "ai ai", "ai nấy", "alô", "amen", "anh", "bao giờ", "bao lâu", "bao nhiêu", "bao nả", "bay biến", "biết", "biết bao", "biết bao nhiêu", "biết chừng nào", "biết mấy", "biết đâu", "biết đâu chừng", "biết đâu đấy", "bà", "bài", "bác", "bây bẩy", "bây chừ", "bây giờ", "bây nhiêu", "bèn", "béng", "bông", "bạn", "bản", "bất chợt", "bất cứ", "bất giác", "bất kì", "bất kể", "bất kỳ", "bất luận", "bất nhược", "bất quá", "bất thình lình", "bất tử", "bất đồ", "bấy", "bấy chầy", "bấy chừ", "bấy giờ", "bấy lâu", "bấy lâu nay", "bấy nay", "bấy nhiêu", "bập bà bập bõm", "bập bõm", "bắt đầu từ", "bằng", "bằng không", "bằng nấy", "bằng ấy", "bển", "bệt", "bị", "bỏ mẹ", "bỗng", "bỗng chốc", "bỗng dưng", "bỗng không", "bỗng nhiên", "bỗng đâu", "bộ", "bội phần", "bớ", "bởi", "bởi chưng", "bởi nhưng", "bởi thế", "bởi vì", "bởi vậy", "bức", "cao", "cha", "cha chả", "chao ôi", "chiếc", "cho", "cho nên", "cho tới", "cho tới khi", "cho đến", "cho đến khi", "choa", "chu cha", "chui cha", "chung cục", "chung qui", "chung quy", "chung quy lại", "chuyện", "chành chạnh", "chí chết", "chính", "chính là", "chính thị", "chùn chùn", "chùn chũn", "chú", "chú mày", "chú mình", "chúng mình", "chúng ta", "chúng tôi", "chăn chắn", "chăng", "chưa", "chầm chập", "chậc", "chắc", "chắc hẳn", "chẳng lẽ", "chẳng những", "chẳng nữa", "chẳng phải", "chết nỗi", "chết thật", "chết tiệt", "chỉ", "chỉn", "chốc chốc", "chớ", "chớ chi", "chợt", "chủn", "chứ", "chứ lị", "coi bộ", "coi mòi", "con", "cu cậu", "cuốn", "cuộc", "càng", "các", "cái", "cây", "còn", "có", "có chăng là", "có dễ", "có thể", "có vẻ", "cóc khô", "cô", "cô mình", "công nhiên", "cùng", "cùng cực", "cùng nhau", "cùng với", "căn", "căn cắt", "cũng", "cũng như", "cũng vậy", "cũng vậy thôi", "cơ", "cơ chừng", "cơ hồ", "cơ mà", "cơn", "cả", "cả thảy", "cả thể", "cảm ơn", "cần", "cật lực", "cật sức", "cậu", "cổ lai", "của", "cứ", "cứ việc", "cực lực", "do", "do vì", "do vậy", "do đó", "duy", "dào", "dì", "dù cho", "dù rằng", "dưới", "dạ", "dần dà", "dần dần", "dầu sao", "dẫu", "dẫu sao", "dễ sợ", "dễ thường", "dở chừng", "dữ", "em", "giữa", "gì", "hay", "hoàn toàn", "hoặc", "hơn", "hầu hết", "họ", "hỏi", "khi", "khác", "không", "luôn", "là", "làm", "lên", "lúc", "lại", "lần", "lớn", "muốn", "mà", "mình", "mỗi", "một", "một cách", "mới", "mợ", "ngay", "ngay cả", "ngay khi", "ngay lúc", "ngay lập tức", "ngay tức khắc", "ngay từ", "nghe chừng", "nghe đâu", "nghen", "nghiễm nhiên", "nghỉm", "ngoài", "ngoài ra", "ngoải", "ngày", "ngày càng", "ngày ngày", "ngày xưa", "ngày xửa", "ngôi", "ngõ hầu", "ngăn ngắt", "ngươi", "người", "ngọn", "ngọt", "ngộ nhỡ", "nh", "nhau", "nhiên hậu", "nhiều", "nhiệt liệt", "nhung nhăng", "nhà", "nhân dịp", "nhân tiện", "nhé", "nhón nhén", "như", "như chơi", "như không", "như quả", "như thể", "như tuồng", "như vậy", "nhưng", "nhưng mà", "nhược bằng", "nhất", "nhất loạt", "nhất luật", "nhất mực", "nhất nhất", "nhất quyết", "nhất sinh", "nhất thiết", "nhất tâm", "nhất tề", "nhất đán", "nhất định", "nhận", "nhỉ", "nhỡ ra", "những", "những ai", "những như", "nào", "này", "nên", "nên chi", "nó", "nóc", "nói", "năm", "nơi", "nấy", "nếu", "nếu như", "nền", "nọ", "nớ", "nức nở", "nữa", "oai oái", "oái", "pho", "phè", "phóc", "phót", "phăn phắt", "phương chi", "phải", "phải chi", "phải chăng", "phắt", "phỉ phui", "phỏng", "phỏng như", "phốc", "phụt", "phứt", "qua", "qua quít", "qua quýt", "quyết", "quyết nhiên", "quyển", "quá", "quá chừng", "quá lắm", "quá sá", "quá thể", "quá trời", "quá xá", "quá đỗi", "quá độ", "quá ư", "quý hồ", "quả", "quả là", "quả tang", "quả thật", "quả tình", "quả vậy", "quả đúng", "ra", "ra phết", "ra sao", "ra trò", "ren rén", "riu ríu", "riêng", "riệt", "rày", "ráo", "ráo trọi", "rén", "rích", "rón rén", "rút cục", "răng", "rất", "rằng", "rằng là", "rốt cuộc", "rốt cục", "rồi", "rứa", "sa sả", "sao", "sau", "sau chót", "sau cuối", "sau cùng", "sau đó", "so", "song le", "suýt", "sì", "sạch", "sất", "sắp", "sẽ", "số", "số là", "sốt sột", "sở dĩ", "sự", "tanh", "tha hồ", "than ôi", "thanh", "theo", "thi thoảng", "thoạt", "thoạt nhiên", "thoắt", "thuần", "thà", "thà là", "thà rằng", "thành ra", "thành thử", "thái quá", "tháng", "thì", "thì thôi", "thình lình", "thím", "thôi", "thúng thắng", "thương ôi", "thường", "thảo hèn", "thảo nào", "thấy", "thẩy", "thậm", "thậm chí", "thật lực", "thật ra", "thật vậy", "thế", "thế là", "thế mà", "thế nào", "thế nên", "thế ra", "thế thì", "thế à", "thếch", "thỉnh thoảng", "thỏm", "thốc", "thốc tháo", "thốt", "thốt nhiên", "thộc", "thời gian", "thục mạng", "thửa", "thực ra", "thực sự", "thực vậy", "tiếp theo", "tiếp đó", "tiện thể", "toà", "toé khói", "toẹt", "trong", "trên", "trước", "trước kia", "trước nay", "trước tiên", "trước đây", "trước đó", "trếu tráo", "trển", "trệt", "trệu trạo", "trỏng", "trời đất ơi", "trừ phi", "tuy", "tuy nhiên", "tuy rằng", "tuy thế", "tuy vậy", "tuyệt nhiên", "tuần tự", "tuốt luốt", "tuốt tuồn tuột", "tuốt tuột", "tà tà", "tênh", "tít mù", "tò te", "tôi", "tông tốc", "tù tì", "tăm tắp", "tại", "tại vì", "tấm", "tấn", "tất cả", "tất thảy", "tất tần tật", "tất tật", "tắp", "tắp lự", "tọt", "tỏ ra", "tỏ vẻ", "tốc tả", "tối ư", "tột", "tớ", "tới", "tức thì", "tức tốc", "từ", "từng", "tự vì", "tựu trung", "veo", "veo veo", "việc", "vung thiên địa", "vung tàn tán", "vung tán tàn", "và", "vào", "vâng", "vèo", "vì", "vì chưng", "vì thế", "vì vậy", "ví bằng", "ví dù", "ví phỏng", "ví thử", "vô hình trung", "vô kể", "vô luận", "vô vàn", "văng tê", "vạn nhất", "vả chăng", "vả lại", "vẫn", "vậy", "vậy là", "vậy thì", "về", "vị tất", "vốn dĩ", "với", "với lại", "vở", "vụt", "vừa", "vừa mới", "xa xả", "xiết bao", "xon xón", "xoành xoạch", "xoét", "xoẳn", "xoẹt", "xuất kì bất ý", "xuất kỳ bất ý", "xuể", "xuống", "xăm xúi", "xăm xăm", "xăm xắm", "xềnh xệch", "xệp", "à", "à ơi", "ào", "á", "á à", "ái", "ái chà", "ái dà", "áng", "âu là", "ô hay", "ô hô", "ô kê", "ô kìa", "ôi chao", "ôi thôi", "ông", "úi", "úi chà", "úi dào", "ý", "ý chừng", "ý da", "đang", "đi", "điều", "đành đạch", "đáng lí", "đáng lý", "đáng lẽ", "đánh đùng", "đáo để", "đây", "đã", "đó", "được", "đại loại", "đại nhân", "đại phàm", "đại để", "đến", "đến nỗi", "đều", "để", "ơ", "ơ hay", "ơ kìa", "ơi", "ư", "ạ", "ạ ơi", "ấy", "ầu ơ", "ắt", "ắt hẳn", "ắt là", "ối dào", "ối giời", "ối giời ơi", "ồ", "ổng", "ớ", "ờ", "ở", "ở trên", "ủa", "ứ hự", "ứ ừ", "ừ", "ử"],
  "yo": ["a", "an", "bá", "bí", "bẹ̀rẹ̀", "fún", "fẹ́", "gbogbo", "inú", "jù", "jẹ", "jẹ́", "kan", "kì", "kí", "kò", "láti", "lè", "lọ", "mi", "mo", "máa", "mọ̀", "ni", "náà", "ní", "nígbà", "nítorí", "nǹkan", "o", "padà", "pé", "púpọ̀", "pẹ̀lú", "rẹ̀", "sì", "sí", "sínú", "ṣ", "ti", "tí", "wà", "wá", "wọn", "wọ́n", "yìí", "àti", "àwọn", "é", "í", "òun", "ó", "ń", "ńlá", "ṣe", "ṣé", "ṣùgbọ́n", "ẹmọ́", "ọjọ́", "ọ̀pọ̀lọpọ̀"],
  "zu": ["futhi", "kahle", "kakhulu", "kanye", "khona", "kodwa", "kungani", "kusho", "la", "lakhe", "lapho", "mina", "ngesikhathi", "nje", "phansi", "phezulu", "u", "ukuba", "ukuthi", "ukuze", "uma", "wahamba", "wakhe", "wami", "wase", "wathi", "yakhe", "zakhe", "zonke"]
};
},{}],"../taggy/node_modules/normalize-for-search/src/normalize.js":[function(require,module,exports) {
/* jshint maxcomplexity: 100 */

(function (window, undefined) {
    'use strict';

    var normalizeForSearch = function (s) {

        function filter(c) {
            switch (c) {
            case 'æ':
            case 'ä':
                return 'ae';

            case 'å':
                return 'aa';

            case 'á':
            case 'à':
            case 'ã':
            case 'â':
                return 'a';

            case 'ç':
            case 'č':
                return 'c';

            case 'é':
            case 'ê':
            case 'è':
            case 'ë':
            case 'ē':
                return 'e';

            case 'î':
            case 'ï':
            case 'í':
                return 'i';

            case 'œ':
            case 'ö':
                return 'oe';

            case 'ó':
            case 'õ':
            case 'ô':
                return 'o';

            case 'ś':
            case 'š':
                return 's';

            case 'ü':
                return 'ue';

            case 'ù':
            case 'ú':
            case 'ŭ':
                return 'u';

            case 'ß':
                return 'ss';

            case 'ё':
                return 'е';

            default:
                return c;
            }
        }

        var normalized = '', i, l;
        s = s.toLowerCase();
        for (i = 0, l = s.length; i < l; i = i + 1) {
            normalized = normalized + filter(s.charAt(i));
        }
        return normalized;
    };

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = normalizeForSearch;
    }
    else {
        window.normalizeForSearch = normalizeForSearch;
    }
}(this));

},{}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"../taggy/node_modules/lodash/lodash.js":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var define;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

},{"buffer":"node_modules/buffer/index.js"}],"../taggy/node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
var define;
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

},{}],"../taggy/node_modules/@yaireo/tagify/dist/tagify.min.js":[function(require,module,exports) {
var define;
/**
 * Tagify (v 4.16.4) - tags input component
 * By undefined
 * https://github.com/yairEO/tagify
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 * THE SOFTWARE IS NOT PERMISSIBLE TO BE SOLD.
 */
!function (t, e) {
  "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).Tagify = e();
}(this, function () {
  "use strict";

  function t(t, e) {
    var i = Object.keys(t);

    if (Object.getOwnPropertySymbols) {
      var s = Object.getOwnPropertySymbols(t);
      e && (s = s.filter(function (e) {
        return Object.getOwnPropertyDescriptor(t, e).enumerable;
      })), i.push.apply(i, s);
    }

    return i;
  }

  function e(e) {
    for (var s = 1; s < arguments.length; s++) {
      var a = null != arguments[s] ? arguments[s] : {};
      s % 2 ? t(Object(a), !0).forEach(function (t) {
        i(e, t, a[t]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(a)) : t(Object(a)).forEach(function (t) {
        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(a, t));
      });
    }

    return e;
  }

  function i(t, e, i) {
    return e in t ? Object.defineProperty(t, e, {
      value: i,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : t[e] = i, t;
  }

  const s = (t, e, i, s) => (t = "" + t, e = "" + e, s && (t = t.trim(), e = e.trim()), i ? t == e : t.toLowerCase() == e.toLowerCase()),
        a = (t, e) => t && Array.isArray(t) && t.map(t => n(t, e));

  function n(t, e) {
    var i,
        s = {};

    for (i in t) e.indexOf(i) < 0 && (s[i] = t[i]);

    return s;
  }

  function o(t) {
    var e = document.createElement("div");
    return t.replace(/\&#?[0-9a-z]+;/gi, function (t) {
      return e.innerHTML = t, e.innerText;
    });
  }

  function r(t) {
    return new DOMParser().parseFromString(t.trim(), "text/html").body.firstElementChild;
  }

  function l(t, e) {
    for (e = e || "previous"; t = t[e + "Sibling"];) if (3 == t.nodeType) return t;
  }

  function d(t) {
    return "string" == typeof t ? t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/`|'/g, "&#039;") : t;
  }

  function h(t) {
    var e = Object.prototype.toString.call(t).split(" ")[1].slice(0, -1);
    return t === Object(t) && "Array" != e && "Function" != e && "RegExp" != e && "HTMLUnknownElement" != e;
  }

  function g(t, e, i) {
    function s(t, e) {
      for (var i in e) if (e.hasOwnProperty(i)) {
        if (h(e[i])) {
          h(t[i]) ? s(t[i], e[i]) : t[i] = Object.assign({}, e[i]);
          continue;
        }

        if (Array.isArray(e[i])) {
          t[i] = Object.assign([], e[i]);
          continue;
        }

        t[i] = e[i];
      }
    }

    return t instanceof Object || (t = {}), s(t, e), i && s(t, i), t;
  }

  function p() {
    const t = [],
          e = {};

    for (let i of arguments) for (let s of i) h(s) ? e[s.value] || (t.push(s), e[s.value] = 1) : t.includes(s) || t.push(s);

    return t;
  }

  function c(t) {
    return String.prototype.normalize ? "string" == typeof t ? t.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : void 0 : t;
  }

  var u = () => /(?=.*chrome)(?=.*android)/i.test(navigator.userAgent);

  function m() {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, t => (t ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> t / 4).toString(16));
  }

  function v(t) {
    return t && t.classList && t.classList.contains(this.settings.classNames.tag);
  }

  var f = {
    delimiters: ",",
    pattern: null,
    tagTextProp: "value",
    maxTags: 1 / 0,
    callbacks: {},
    addTagOnBlur: !0,
    onChangeAfterBlur: !0,
    duplicates: !1,
    whitelist: [],
    blacklist: [],
    enforceWhitelist: !1,
    userInput: !0,
    keepInvalidTags: !1,
    createInvalidTags: !0,
    mixTagsAllowedAfter: /,|\.|\:|\s/,
    mixTagsInterpolator: ["[[", "]]"],
    backspace: !0,
    skipInvalid: !1,
    pasteAsTags: !0,
    editTags: {
      clicks: 2,
      keepInvalid: !0
    },
    transformTag: () => {},
    trim: !0,
    a11y: {
      focusableTags: !1
    },
    mixMode: {
      insertAfterTag: " "
    },
    autoComplete: {
      enabled: !0,
      rightKey: !1
    },
    classNames: {
      namespace: "tagify",
      mixMode: "tagify--mix",
      selectMode: "tagify--select",
      input: "tagify__input",
      focus: "tagify--focus",
      tagNoAnimation: "tagify--noAnim",
      tagInvalid: "tagify--invalid",
      tagNotAllowed: "tagify--notAllowed",
      scopeLoading: "tagify--loading",
      hasMaxTags: "tagify--hasMaxTags",
      hasNoTags: "tagify--noTags",
      empty: "tagify--empty",
      inputInvalid: "tagify__input--invalid",
      dropdown: "tagify__dropdown",
      dropdownWrapper: "tagify__dropdown__wrapper",
      dropdownHeader: "tagify__dropdown__header",
      dropdownFooter: "tagify__dropdown__footer",
      dropdownItem: "tagify__dropdown__item",
      dropdownItemActive: "tagify__dropdown__item--active",
      dropdownItemHidden: "tagify__dropdown__item--hidden",
      dropdownInital: "tagify__dropdown--initial",
      tag: "tagify__tag",
      tagText: "tagify__tag-text",
      tagX: "tagify__tag__removeBtn",
      tagLoading: "tagify__tag--loading",
      tagEditing: "tagify__tag--editable",
      tagFlash: "tagify__tag--flash",
      tagHide: "tagify__tag--hide"
    },
    dropdown: {
      classname: "",
      enabled: 2,
      maxItems: 10,
      searchKeys: ["value", "searchBy"],
      fuzzySearch: !0,
      caseSensitive: !1,
      accentedSearch: !0,
      includeSelectedTags: !1,
      highlightFirst: !1,
      closeOnSelect: !0,
      clearOnSelect: !0,
      position: "all",
      appendTarget: null
    },
    hooks: {
      beforeRemoveTag: () => Promise.resolve(),
      beforePaste: () => Promise.resolve(),
      suggestionClick: () => Promise.resolve()
    }
  };

  function T() {
    this.dropdown = {};

    for (let t in this._dropdown) this.dropdown[t] = "function" == typeof this._dropdown[t] ? this._dropdown[t].bind(this) : this._dropdown[t];

    this.dropdown.refs();
  }

  var w = {
    refs() {
      this.DOM.dropdown = this.parseTemplate("dropdown", [this.settings]), this.DOM.dropdown.content = this.DOM.dropdown.querySelector("[data-selector='tagify-suggestions-wrapper']");
    },

    getHeaderRef() {
      return this.DOM.dropdown.querySelector("[data-selector='tagify-suggestions-header']");
    },

    getFooterRef() {
      return this.DOM.dropdown.querySelector("[data-selector='tagify-suggestions-footer']");
    },

    getAllSuggestionsRefs() {
      return [...this.DOM.dropdown.content.querySelectorAll(this.settings.classNames.dropdownItemSelector)];
    },

    show(t) {
      var e,
          i,
          a,
          n = this.settings,
          o = "mix" == n.mode && !n.enforceWhitelist,
          r = !n.whitelist || !n.whitelist.length,
          l = "manual" == n.dropdown.position;

      if (t = void 0 === t ? this.state.inputText : t, !(r && !o && !n.templates.dropdownItemNoMatch || !1 === n.dropdown.enable || this.state.isLoading || this.settings.readonly)) {
        if (clearTimeout(this.dropdownHide__bindEventsTimeout), this.suggestedListItems = this.dropdown.filterListItems(t), t && !this.suggestedListItems.length && (this.trigger("dropdown:noMatch", t), n.templates.dropdownItemNoMatch && (a = n.templates.dropdownItemNoMatch.call(this, {
          value: t
        }))), !a) {
          if (this.suggestedListItems.length) t && o && !this.state.editing.scope && !s(this.suggestedListItems[0].value, t) && this.suggestedListItems.unshift({
            value: t
          });else {
            if (!t || !o || this.state.editing.scope) return this.input.autocomplete.suggest.call(this), void this.dropdown.hide();
            this.suggestedListItems = [{
              value: t
            }];
          }
          i = "" + (h(e = this.suggestedListItems[0]) ? e.value : e), n.autoComplete && i && 0 == i.indexOf(t) && this.input.autocomplete.suggest.call(this, e);
        }

        this.dropdown.fill(a), n.dropdown.highlightFirst && this.dropdown.highlightOption(this.DOM.dropdown.content.querySelector(n.classNames.dropdownItemSelector)), this.state.dropdown.visible || setTimeout(this.dropdown.events.binding.bind(this)), this.state.dropdown.visible = t || !0, this.state.dropdown.query = t, this.setStateSelection(), l || setTimeout(() => {
          this.dropdown.position(), this.dropdown.render();
        }), setTimeout(() => {
          this.trigger("dropdown:show", this.DOM.dropdown);
        });
      }
    },

    hide(t) {
      var e = this.DOM,
          i = e.scope,
          s = e.dropdown,
          a = "manual" == this.settings.dropdown.position && !t;
      if (s && document.body.contains(s) && !a) return window.removeEventListener("resize", this.dropdown.position), this.dropdown.events.binding.call(this, !1), i.setAttribute("aria-expanded", !1), s.parentNode.removeChild(s), setTimeout(() => {
        this.state.dropdown.visible = !1;
      }, 100), this.state.dropdown.query = this.state.ddItemData = this.state.ddItemElm = this.state.selection = null, this.state.tag && this.state.tag.value.length && (this.state.flaggedTags[this.state.tag.baseOffset] = this.state.tag), this.trigger("dropdown:hide", s), this;
    },

    toggle(t) {
      this.dropdown[this.state.dropdown.visible && !t ? "hide" : "show"]();
    },

    render() {
      var t,
          e,
          i,
          s = (t = this.DOM.dropdown, (i = t.cloneNode(!0)).style.cssText = "position:fixed; top:-9999px; opacity:0", document.body.appendChild(i), e = i.clientHeight, i.parentNode.removeChild(i), e),
          a = this.settings;
      return "number" == typeof a.dropdown.enabled && a.dropdown.enabled >= 0 ? (this.DOM.scope.setAttribute("aria-expanded", !0), document.body.contains(this.DOM.dropdown) || (this.DOM.dropdown.classList.add(a.classNames.dropdownInital), this.dropdown.position(s), a.dropdown.appendTarget.appendChild(this.DOM.dropdown), setTimeout(() => this.DOM.dropdown.classList.remove(a.classNames.dropdownInital))), this) : this;
    },

    fill(t) {
      t = "string" == typeof t ? t : this.dropdown.createListHTML(t || this.suggestedListItems);
      var e,
          i = this.settings.templates.dropdownContent.call(this, t);
      this.DOM.dropdown.content.innerHTML = (e = i) ? e.replace(/\>[\r\n ]+\</g, "><").replace(/(<.*?>)|\s+/g, (t, e) => e || " ") : "";
    },

    fillHeaderFooter() {
      this.settings.templates;
      var t = this.dropdown.filterListItems(this.state.dropdown.query),
          e = this.parseTemplate("dropdownHeader", [t]),
          i = this.parseTemplate("dropdownFooter", [t]),
          s = this.dropdown.getHeaderRef(),
          a = this.dropdown.getFooterRef();
      e && s?.parentNode.replaceChild(e, s), i && a?.parentNode.replaceChild(i, a);
    },

    refilter(t) {
      t = t || this.state.dropdown.query || "", this.suggestedListItems = this.dropdown.filterListItems(t), this.dropdown.fill(), this.suggestedListItems.length || this.dropdown.hide(), this.trigger("dropdown:updated", this.DOM.dropdown);
    },

    position(t) {
      var e = this.settings.dropdown;

      if ("manual" != e.position) {
        var i,
            s,
            a,
            n,
            o,
            r,
            l = this.DOM.dropdown,
            d = e.placeAbove,
            h = e.appendTarget === document.body,
            g = h ? window.pageYOffset : e.appendTarget.scrollTop,
            p = document.fullscreenElement || document.webkitFullscreenElement || document.documentElement,
            c = p.clientHeight,
            u = Math.max(p.clientWidth || 0, window.innerWidth || 0) > 480 ? e.position : "all",
            m = this.DOM["input" == u ? "input" : "scope"];

        if (t = t || l.clientHeight, this.state.dropdown.visible) {
          if ("text" == u ? (a = (i = this.getCaretGlobalPosition()).bottom, s = i.top, n = i.left, o = "auto") : (r = function (t) {
            for (var e = 0, i = 0; t && t != p;) e += t.offsetLeft || 0, i += t.offsetTop || 0, t = t.parentNode;

            return {
              left: e,
              top: i
            };
          }(e.appendTarget), s = (i = m.getBoundingClientRect()).top - r.top, a = i.bottom - 1 - r.top, n = i.left - r.left, o = i.width + "px"), !h) {
            let t = function () {
              for (var t = 0, i = e.appendTarget.parentNode; i;) t += i.scrollTop || 0, i = i.parentNode;

              return t;
            }();

            s += t, a += t;
          }

          s = Math.floor(s), a = Math.ceil(a), d = void 0 === d ? c - i.bottom < t : d, l.style.cssText = "left:" + (n + window.pageXOffset) + "px; width:" + o + ";" + (d ? "top: " + (s + g) + "px" : "top: " + (a + g) + "px"), l.setAttribute("placement", d ? "top" : "bottom"), l.setAttribute("position", u);
        }
      }
    },

    events: {
      binding() {
        let t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        var e = this.dropdown.events.callbacks,
            i = this.listeners.dropdown = this.listeners.dropdown || {
          position: this.dropdown.position.bind(this, null),
          onKeyDown: e.onKeyDown.bind(this),
          onMouseOver: e.onMouseOver.bind(this),
          onMouseLeave: e.onMouseLeave.bind(this),
          onClick: e.onClick.bind(this),
          onScroll: e.onScroll.bind(this)
        },
            s = t ? "addEventListener" : "removeEventListener";
        "manual" != this.settings.dropdown.position && (document[s]("scroll", i.position, !0), window[s]("resize", i.position), window[s]("keydown", i.onKeyDown)), this.DOM.dropdown[s]("mouseover", i.onMouseOver), this.DOM.dropdown[s]("mouseleave", i.onMouseLeave), this.DOM.dropdown[s]("mousedown", i.onClick), this.DOM.dropdown.content[s]("scroll", i.onScroll);
      },

      callbacks: {
        onKeyDown(t) {
          if (this.state.hasFocus && !this.state.composing) {
            var e = this.DOM.dropdown.querySelector(this.settings.classNames.dropdownItemActiveSelector),
                i = this.dropdown.getSuggestionDataByNode(e);

            switch (t.key) {
              case "ArrowDown":
              case "ArrowUp":
              case "Down":
              case "Up":
                t.preventDefault();
                var s = this.dropdown.getAllSuggestionsRefs(),
                    a = "ArrowUp" == t.key || "Up" == t.key;
                e && (e = this.dropdown.getNextOrPrevOption(e, !a)), e && e.matches(this.settings.classNames.dropdownItemSelector) || (e = s[a ? s.length - 1 : 0]), i = this.dropdown.getSuggestionDataByNode(e), this.dropdown.highlightOption(e, !0);
                break;

              case "Escape":
              case "Esc":
                this.dropdown.hide();
                break;

              case "ArrowRight":
                if (this.state.actions.ArrowLeft) return;

              case "Tab":
                if ("mix" != this.settings.mode && e && !this.settings.autoComplete.rightKey && !this.state.editing) {
                  t.preventDefault();
                  var n = this.dropdown.getMappedValue(i);
                  return this.input.autocomplete.set.call(this, n), !1;
                }

                return !0;

              case "Enter":
                t.preventDefault(), this.settings.hooks.suggestionClick(t, {
                  tagify: this,
                  tagData: i,
                  suggestionElm: e
                }).then(() => {
                  if (e) return this.dropdown.selectOption(e), e = this.dropdown.getNextOrPrevOption(e, !a), void this.dropdown.highlightOption(e);
                  this.dropdown.hide(), "mix" != this.settings.mode && this.addTags(this.state.inputText.trim(), !0);
                }).catch(t => t);
                break;

              case "Backspace":
                {
                  if ("mix" == this.settings.mode || this.state.editing.scope) return;
                  const t = this.input.raw.call(this);
                  "" != t && 8203 != t.charCodeAt(0) || (!0 === this.settings.backspace ? this.removeTags() : "edit" == this.settings.backspace && setTimeout(this.editTag.bind(this), 0));
                }
            }
          }
        },

        onMouseOver(t) {
          var e = t.target.closest(this.settings.classNames.dropdownItemSelector);
          e && this.dropdown.highlightOption(e);
        },

        onMouseLeave(t) {
          this.dropdown.highlightOption();
        },

        onClick(t) {
          if (0 == t.button && t.target != this.DOM.dropdown && t.target != this.DOM.dropdown.content) {
            var e = t.target.closest(this.settings.classNames.dropdownItemSelector),
                i = this.dropdown.getSuggestionDataByNode(e);
            this.state.actions.selectOption = !0, setTimeout(() => this.state.actions.selectOption = !1, 50), this.settings.hooks.suggestionClick(t, {
              tagify: this,
              tagData: i,
              suggestionElm: e
            }).then(() => {
              e ? this.dropdown.selectOption(e, t) : this.dropdown.hide();
            }).catch(t => console.warn(t));
          }
        },

        onScroll(t) {
          var e = t.target,
              i = e.scrollTop / (e.scrollHeight - e.parentNode.clientHeight) * 100;
          this.trigger("dropdown:scroll", {
            percentage: Math.round(i)
          });
        }

      }
    },

    getSuggestionDataByNode(t) {
      var e = t && t.getAttribute("value");
      return this.suggestedListItems.find(t => t.value == e) || null;
    },

    getNextOrPrevOption(t) {
      let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
      var i = this.dropdown.getAllSuggestionsRefs(),
          s = i.findIndex(e => e === t);
      return e ? i[s + 1] : i[s - 1];
    },

    highlightOption(t, e) {
      var i,
          s = this.settings.classNames.dropdownItemActive;
      if (this.state.ddItemElm && (this.state.ddItemElm.classList.remove(s), this.state.ddItemElm.removeAttribute("aria-selected")), !t) return this.state.ddItemData = null, this.state.ddItemElm = null, void this.input.autocomplete.suggest.call(this);
      i = this.dropdown.getSuggestionDataByNode(t), this.state.ddItemData = i, this.state.ddItemElm = t, t.classList.add(s), t.setAttribute("aria-selected", !0), e && (t.parentNode.scrollTop = t.clientHeight + t.offsetTop - t.parentNode.clientHeight), this.settings.autoComplete && (this.input.autocomplete.suggest.call(this, i), this.dropdown.position());
    },

    selectOption(t, e) {
      var i = this.settings.dropdown,
          s = i.clearOnSelect,
          a = i.closeOnSelect;
      if (!t) return this.addTags(this.state.inputText, !0), void (a && this.dropdown.hide());
      e = e || {};
      var n = t.getAttribute("value"),
          o = "noMatch" == n,
          r = this.suggestedListItems.find(t => (t.value || t) == n);
      this.trigger("dropdown:select", {
        data: r,
        elm: t,
        event: e
      }), n && (r || o) ? (this.state.editing ? this.onEditTagDone(null, g({
        __isValid: !0
      }, this.normalizeTags([r])[0])) : this["mix" == this.settings.mode ? "addMixTags" : "addTags"]([r || this.input.raw.call(this)], s), this.DOM.input.parentNode && (setTimeout(() => {
        this.DOM.input.focus(), this.toggleFocusClass(!0), this.setRangeAtStartEnd(!1);
      }), a && setTimeout(this.dropdown.hide.bind(this)), t.addEventListener("transitionend", () => {
        this.dropdown.fillHeaderFooter(), setTimeout(() => t.remove(), 100);
      }, {
        once: !0
      }), t.classList.add(this.settings.classNames.dropdownItemHidden))) : a && setTimeout(this.dropdown.hide.bind(this));
    },

    selectAll(t) {
      this.suggestedListItems.length = 0, this.dropdown.hide(), this.dropdown.filterListItems("");
      var e = this.dropdown.filterListItems("");
      return t || (e = this.state.dropdown.suggestions), this.addTags(e, !0), this;
    },

    filterListItems(t, e) {
      var i,
          s,
          a,
          n,
          o,
          r = this.settings,
          l = r.dropdown,
          d = (e = e || {}, []),
          g = [],
          p = r.whitelist,
          u = l.maxItems >= 0 ? l.maxItems : 1 / 0,
          m = l.searchKeys,
          v = 0;
      if (!(t = "select" == r.mode && this.value.length && this.value[0][r.tagTextProp] == t ? "" : t) || !m.length) return d = l.includeSelectedTags ? p : p.filter(t => !this.isTagDuplicate(h(t) ? t.value : t)), this.state.dropdown.suggestions = d, d.slice(0, u);

      function f(t, e) {
        return e.toLowerCase().split(" ").every(e => t.includes(e.toLowerCase()));
      }

      for (o = l.caseSensitive ? "" + t : ("" + t).toLowerCase(); v < p.length; v++) {
        let t, r;
        i = p[v] instanceof Object ? p[v] : {
          value: p[v]
        };
        let u = !Object.keys(i).some(t => m.includes(t)) ? ["value"] : m;
        l.fuzzySearch && !e.exact ? (a = u.reduce((t, e) => t + " " + (i[e] || ""), "").toLowerCase().trim(), l.accentedSearch && (a = c(a), o = c(o)), t = 0 == a.indexOf(o), r = a === o, s = f(a, o)) : (t = !0, s = u.some(t => {
          var s = "" + (i[t] || "");
          return l.accentedSearch && (s = c(s), o = c(o)), l.caseSensitive || (s = s.toLowerCase()), r = s === o, e.exact ? s === o : 0 == s.indexOf(o);
        })), n = !l.includeSelectedTags && this.isTagDuplicate(h(i) ? i.value : i), s && !n && (r && t ? g.push(i) : "startsWith" == l.sortby && t ? d.unshift(i) : d.push(i));
      }

      return this.state.dropdown.suggestions = g.concat(d), "function" == typeof l.sortby ? l.sortby(g.concat(d), o) : g.concat(d).slice(0, u);
    },

    getMappedValue(t) {
      var e = this.settings.dropdown.mapValueTo;
      return e ? "function" == typeof e ? e(t) : t[e] || t.value : t.value;
    },

    createListHTML(t) {
      return g([], t).map((t, i) => {
        "string" != typeof t && "number" != typeof t || (t = {
          value: t
        });
        var s = this.dropdown.getMappedValue(t);
        return s = "string" == typeof s ? d(s) : s, this.settings.templates.dropdownItem.apply(this, [e(e({}, t), {}, {
          mappedValue: s
        }), this]);
      }).join("");
    }

  };
  const b = "@yaireo/tagify/";
  var y,
      x = {
    empty: "empty",
    exceed: "number of tags exceeded",
    pattern: "pattern mismatch",
    duplicate: "already exists",
    notAllowed: "not allowed"
  },
      D = {
    wrapper: (t, e) => `<tags class="${e.classNames.namespace} ${e.mode ? `${e.classNames[e.mode + "Mode"]}` : ""} ${t.className}"\n                    ${e.readonly ? "readonly" : ""}\n                    ${e.disabled ? "disabled" : ""}\n                    ${e.required ? "required" : ""}\n                    ${"select" === e.mode ? "spellcheck='false'" : ""}\n                    tabIndex="-1">\n            <span ${!e.readonly && e.userInput ? "contenteditable" : ""} tabIndex="0" data-placeholder="${e.placeholder || "&#8203;"}" aria-placeholder="${e.placeholder || ""}"\n                class="${e.classNames.input}"\n                role="textbox"\n                aria-autocomplete="both"\n                aria-multiline="${"mix" == e.mode}"></span>\n                &#8203;\n        </tags>`,

    tag(t, e) {
      let i = e.settings;
      return `<tag title="${t.title || t.value}"\n                    contenteditable='false'\n                    spellcheck='false'\n                    tabIndex="${i.a11y.focusableTags ? 0 : -1}"\n                    class="${i.classNames.tag} ${t.class || ""}"\n                    ${this.getAttributes(t)}>\n            <x title='' class="${i.classNames.tagX}" role='button' aria-label='remove tag'></x>\n            <div>\n                <span class="${i.classNames.tagText}">${t[i.tagTextProp] || t.value}</span>\n            </div>\n        </tag>`;
    },

    dropdown(t) {
      var e = t.dropdown,
          i = "manual" == e.position,
          s = `${t.classNames.dropdown}`;
      return `<div class="${i ? "" : s} ${e.classname}" role="listbox" aria-labelledby="dropdown">\n                    <div data-selector='tagify-suggestions-wrapper' class="${t.classNames.dropdownWrapper}"></div>\n                </div>`;
    },

    dropdownContent(t) {
      var e = this.settings,
          i = this.state.dropdown.suggestions;
      return `\n            ${e.templates.dropdownHeader.call(this, i)}\n            ${t}\n            ${e.templates.dropdownFooter.call(this, i)}\n        `;
    },

    dropdownItem(t) {
      return `<div ${this.getAttributes(t)}\n                    class='${this.settings.classNames.dropdownItem} ${t.class ? t.class : ""}'\n                    tabindex="0"\n                    role="option">${t.mappedValue || t.value}</div>`;
    },

    dropdownHeader(t) {
      return `<header data-selector='tagify-suggestions-header' class="${this.settings.classNames.dropdownHeader}"></header>`;
    },

    dropdownFooter(t) {
      var e = t.length - this.settings.dropdown.maxItems;
      return e > 0 ? `<footer data-selector='tagify-suggestions-footer' class="${this.settings.classNames.dropdownFooter}">\n                ${e} more items. Refine your search.\n            </footer>` : "";
    },

    dropdownItemNoMatch: null
  };
  var O = {
    customBinding() {
      this.customEventsList.forEach(t => {
        this.on(t, this.settings.callbacks[t]);
      });
    },

    binding() {
      let t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
      var e,
          i = this.events.callbacks,
          s = t ? "addEventListener" : "removeEventListener";

      if (!this.state.mainEvents || !t) {
        for (var a in this.state.mainEvents = t, t && !this.listeners.main && (this.events.bindGlobal.call(this), this.settings.isJQueryPlugin && jQuery(this.DOM.originalInput).on("tagify.removeAllTags", this.removeAllTags.bind(this))), e = this.listeners.main = this.listeners.main || {
          focus: ["input", i.onFocusBlur.bind(this)],
          keydown: ["input", i.onKeydown.bind(this)],
          click: ["scope", i.onClickScope.bind(this)],
          dblclick: ["scope", i.onDoubleClickScope.bind(this)],
          paste: ["input", i.onPaste.bind(this)],
          drop: ["input", i.onDrop.bind(this)],
          compositionstart: ["input", i.onCompositionStart.bind(this)],
          compositionend: ["input", i.onCompositionEnd.bind(this)]
        }) this.DOM[e[a][0]][s](a, e[a][1]);

        clearInterval(this.listeners.main.originalInputValueObserverInterval), this.listeners.main.originalInputValueObserverInterval = setInterval(i.observeOriginalInputValue.bind(this), 500);
        var n = this.listeners.main.inputMutationObserver || new MutationObserver(i.onInputDOMChange.bind(this));
        n && n.disconnect(), "mix" == this.settings.mode && n.observe(this.DOM.input, {
          childList: !0
        });
      }
    },

    bindGlobal(t) {
      var e,
          i = this.events.callbacks,
          s = t ? "removeEventListener" : "addEventListener";
      if (t || !this.listeners.global) for (e of (this.listeners.global = this.listeners && this.listeners.global || [{
        type: this.isIE ? "keydown" : "input",
        target: this.DOM.input,
        cb: i[this.isIE ? "onInputIE" : "onInput"].bind(this)
      }, {
        type: "keydown",
        target: window,
        cb: i.onWindowKeyDown.bind(this)
      }, {
        type: "blur",
        target: this.DOM.input,
        cb: i.onFocusBlur.bind(this)
      }], this.listeners.global)) e.target[s](e.type, e.cb);
    },

    unbindGlobal() {
      this.events.bindGlobal.call(this, !0);
    },

    callbacks: {
      onFocusBlur(t) {
        var e = this.settings,
            i = t.target ? this.trim(t.target.textContent) : "",
            s = this.value?.[0]?.[e.tagTextProp],
            a = t.type,
            n = e.dropdown.enabled >= 0,
            o = {
          relatedTarget: t.relatedTarget
        },
            r = this.state.actions.selectOption && (n || !e.dropdown.closeOnSelect),
            l = this.state.actions.addNew && n,
            d = t.relatedTarget && v.call(this, t.relatedTarget) && this.DOM.scope.contains(t.relatedTarget);

        if ("blur" == a) {
          if (t.relatedTarget === this.DOM.scope) return this.dropdown.hide(), void this.DOM.input.focus();
          this.postUpdate(), e.onChangeAfterBlur && this.triggerChangeEvent();
        }

        if (!r && !l) if (this.state.hasFocus = "focus" == a && +new Date(), this.toggleFocusClass(this.state.hasFocus), "mix" != e.mode) {
          if ("focus" == a) return this.trigger("focus", o), void (0 !== e.dropdown.enabled && e.userInput || this.dropdown.show(this.value.length ? "" : void 0));
          "blur" == a && (this.trigger("blur", o), this.loading(!1), "select" == e.mode && (d && (this.removeTags(), i = ""), s === i && (i = "")), i && !this.state.actions.selectOption && e.addTagOnBlur && this.addTags(i, !0)), this.DOM.input.removeAttribute("style"), this.dropdown.hide();
        } else "focus" == a ? this.trigger("focus", o) : "blur" == t.type && (this.trigger("blur", o), this.loading(!1), this.dropdown.hide(), this.state.dropdown.visible = void 0, this.setStateSelection());
      },

      onCompositionStart(t) {
        this.state.composing = !0;
      },

      onCompositionEnd(t) {
        this.state.composing = !1;
      },

      onWindowKeyDown(t) {
        var e,
            i = document.activeElement;
        if (v.call(this, i) && this.DOM.scope.contains(document.activeElement)) switch (e = i.nextElementSibling, t.key) {
          case "Backspace":
            this.settings.readonly || (this.removeTags(i), (e || this.DOM.input).focus());
            break;

          case "Enter":
            setTimeout(this.editTag.bind(this), 0, i);
        }
      },

      onKeydown(t) {
        var e = this.settings;

        if (!this.state.composing && e.userInput) {
          "select" == e.mode && e.enforceWhitelist && this.value.length && "Tab" != t.key && t.preventDefault();
          var i = this.trim(t.target.textContent);

          if (this.trigger("keydown", {
            event: t
          }), "mix" == e.mode) {
            switch (t.key) {
              case "Left":
              case "ArrowLeft":
                this.state.actions.ArrowLeft = !0;
                break;

              case "Delete":
              case "Backspace":
                if (this.state.editing) return;
                var s,
                    a,
                    n,
                    r = document.getSelection(),
                    d = "Delete" == t.key && r.anchorOffset == (r.anchorNode.length || 0),
                    h = r.anchorNode.previousSibling,
                    g = 1 == r.anchorNode.nodeType || !r.anchorOffset && h && 1 == h.nodeType && r.anchorNode.previousSibling,
                    p = o(this.DOM.input.innerHTML),
                    c = this.getTagElms();
                if ("edit" == e.backspace && g) return s = 1 == r.anchorNode.nodeType ? null : r.anchorNode.previousElementSibling, setTimeout(this.editTag.bind(this), 0, s), void t.preventDefault();
                if (u() && g) return n = l(g), g.hasAttribute("readonly") || g.remove(), this.DOM.input.focus(), void setTimeout(() => {
                  this.placeCaretAfterNode(n), this.DOM.input.click();
                });
                if ("BR" == r.anchorNode.nodeName) return;
                if ((d || g) && 1 == r.anchorNode.nodeType ? a = 0 == r.anchorOffset ? d ? c[0] : null : c[Math.min(c.length, r.anchorOffset) - 1] : d ? a = r.anchorNode.nextElementSibling : g && (a = g), 3 == r.anchorNode.nodeType && !r.anchorNode.nodeValue && r.anchorNode.previousElementSibling && t.preventDefault(), (g || d) && !e.backspace) return void t.preventDefault();
                if ("Range" != r.type && !r.anchorOffset && r.anchorNode == this.DOM.input && "Delete" != t.key) return void t.preventDefault();
                if ("Range" != r.type && a && a.hasAttribute("readonly")) return void this.placeCaretAfterNode(l(a));
                clearTimeout(y), y = setTimeout(() => {
                  var t = document.getSelection(),
                      e = o(this.DOM.input.innerHTML),
                      i = !d && t.anchorNode.previousSibling;
                  if (e.length >= p.length && i) if (v.call(this, i) && !i.hasAttribute("readonly")) {
                    if (this.removeTags(i), this.fixFirefoxLastTagNoCaret(), 2 == this.DOM.input.children.length && "BR" == this.DOM.input.children[1].tagName) return this.DOM.input.innerHTML = "", this.value.length = 0, !0;
                  } else i.remove();
                  this.value = [].map.call(c, (t, e) => {
                    var i = this.tagData(t);
                    if (t.parentNode || i.readonly) return i;
                    this.trigger("remove", {
                      tag: t,
                      index: e,
                      data: i
                    });
                  }).filter(t => t);
                }, 20);
            }

            return !0;
          }

          switch (t.key) {
            case "Backspace":
              "select" == e.mode && e.enforceWhitelist && this.value.length ? this.removeTags() : this.state.dropdown.visible && "manual" != e.dropdown.position || "" != t.target.textContent && 8203 != i.charCodeAt(0) || (!0 === e.backspace ? this.removeTags() : "edit" == e.backspace && setTimeout(this.editTag.bind(this), 0));
              break;

            case "Esc":
            case "Escape":
              if (this.state.dropdown.visible) return;
              t.target.blur();
              break;

            case "Down":
            case "ArrowDown":
              this.state.dropdown.visible || this.dropdown.show();
              break;

            case "ArrowRight":
              {
                let t = this.state.inputSuggestion || this.state.ddItemData;
                if (t && e.autoComplete.rightKey) return void this.addTags([t], !0);
                break;
              }

            case "Tab":
              {
                let s = "select" == e.mode;
                if (!i || s) return !0;
                t.preventDefault();
              }

            case "Enter":
              if (this.state.dropdown.visible && "manual" != e.dropdown.position) return;
              t.preventDefault(), setTimeout(() => {
                this.state.actions.selectOption || this.addTags(i, !0);
              });
          }
        }
      },

      onInput(t) {
        this.postUpdate();
        var e = this.settings;
        if ("mix" == e.mode) return this.events.callbacks.onMixTagsInput.call(this, t);
        var i = this.input.normalize.call(this),
            s = i.length >= e.dropdown.enabled,
            a = {
          value: i,
          inputElm: this.DOM.input
        },
            n = this.validateTag({
          value: i
        });
        "select" == e.mode && this.toggleScopeValidation(n), a.isValid = n, this.state.inputText != i && (this.input.set.call(this, i, !1), -1 != i.search(e.delimiters) ? this.addTags(i) && this.input.set.call(this) : e.dropdown.enabled >= 0 && this.dropdown[s ? "show" : "hide"](i), this.trigger("input", a));
      },

      onMixTagsInput(t) {
        var e,
            i,
            s,
            a,
            n,
            o,
            r,
            l,
            d = this.settings,
            h = this.value.length,
            p = this.getTagElms(),
            c = document.createDocumentFragment(),
            m = window.getSelection().getRangeAt(0),
            v = [].map.call(p, t => this.tagData(t).value);
        if ("deleteContentBackward" == t.inputType && u() && this.events.callbacks.onKeydown.call(this, {
          target: t.target,
          key: "Backspace"
        }), this.value.slice().forEach(t => {
          t.readonly && !v.includes(t.value) && c.appendChild(this.createTagElem(t));
        }), c.childNodes.length && (m.insertNode(c), this.setRangeAtStartEnd(!1, c.lastChild)), p.length != h) return this.value = [].map.call(this.getTagElms(), t => this.tagData(t)), void this.update({
          withoutChangeEvent: !0
        });
        if (this.hasMaxTags()) return !0;

        if (window.getSelection && (o = window.getSelection()).rangeCount > 0 && 3 == o.anchorNode.nodeType) {
          if ((m = o.getRangeAt(0).cloneRange()).collapse(!0), m.setStart(o.focusNode, 0), s = (e = m.toString().slice(0, m.endOffset)).split(d.pattern).length - 1, (i = e.match(d.pattern)) && (a = e.slice(e.lastIndexOf(i[i.length - 1]))), a) {
            if (this.state.actions.ArrowLeft = !1, this.state.tag = {
              prefix: a.match(d.pattern)[0],
              value: a.replace(d.pattern, "")
            }, this.state.tag.baseOffset = o.baseOffset - this.state.tag.value.length, l = this.state.tag.value.match(d.delimiters)) return this.state.tag.value = this.state.tag.value.replace(d.delimiters, ""), this.state.tag.delimiters = l[0], this.addTags(this.state.tag.value, d.dropdown.clearOnSelect), void this.dropdown.hide();
            n = this.state.tag.value.length >= d.dropdown.enabled;

            try {
              r = (r = this.state.flaggedTags[this.state.tag.baseOffset]).prefix == this.state.tag.prefix && r.value[0] == this.state.tag.value[0], this.state.flaggedTags[this.state.tag.baseOffset] && !this.state.tag.value && delete this.state.flaggedTags[this.state.tag.baseOffset];
            } catch (t) {}

            (r || s < this.state.mixMode.matchedPatternCount) && (n = !1);
          } else this.state.flaggedTags = {};

          this.state.mixMode.matchedPatternCount = s;
        }

        setTimeout(() => {
          this.update({
            withoutChangeEvent: !0
          }), this.trigger("input", g({}, this.state.tag, {
            textContent: this.DOM.input.textContent
          })), this.state.tag && this.dropdown[n ? "show" : "hide"](this.state.tag.value);
        }, 10);
      },

      onInputIE(t) {
        var e = this;
        setTimeout(function () {
          e.events.callbacks.onInput.call(e, t);
        });
      },

      observeOriginalInputValue() {
        this.DOM.originalInput.parentNode || this.destroy(), this.DOM.originalInput.value != this.DOM.originalInput.tagifyValue && this.loadOriginalValues();
      },

      onClickScope(t) {
        var e = this.settings,
            i = t.target.closest("." + e.classNames.tag),
            s = +new Date() - this.state.hasFocus;

        if (t.target != this.DOM.scope) {
          if (!t.target.classList.contains(e.classNames.tagX)) return i ? (this.trigger("click", {
            tag: i,
            index: this.getNodeIndex(i),
            data: this.tagData(i),
            event: t
          }), void (1 !== e.editTags && 1 !== e.editTags.clicks || this.events.callbacks.onDoubleClickScope.call(this, t))) : void (t.target == this.DOM.input && ("mix" == e.mode && this.fixFirefoxLastTagNoCaret(), s > 500) ? this.state.dropdown.visible ? this.dropdown.hide() : 0 === e.dropdown.enabled && "mix" != e.mode && this.dropdown.show(this.value.length ? "" : void 0) : "select" == e.mode && !this.state.dropdown.visible && this.dropdown.show());
          this.removeTags(t.target.parentNode);
        } else this.state.hasFocus || this.DOM.input.focus();
      },

      onPaste(t) {
        t.preventDefault();
        var e,
            i,
            s = this.settings;
        if ("select" == s.mode && s.enforceWhitelist || !s.userInput) return !1;
        s.readonly || (e = t.clipboardData || window.clipboardData, i = e.getData("Text"), s.hooks.beforePaste(t, {
          tagify: this,
          pastedText: i,
          clipboardData: e
        }).then(e => {
          void 0 === e && (e = i), e && (this.injectAtCaret(e, window.getSelection().getRangeAt(0)), "mix" == this.settings.mode ? this.events.callbacks.onMixTagsInput.call(this, t) : this.settings.pasteAsTags ? this.addTags(this.state.inputText + e, !0) : this.state.inputText = e);
        }).catch(t => t));
      },

      onDrop(t) {
        t.preventDefault();
      },

      onEditTagInput(t, e) {
        var i = t.closest("." + this.settings.classNames.tag),
            s = this.getNodeIndex(i),
            a = this.tagData(i),
            n = this.input.normalize.call(this, t),
            o = {
          [this.settings.tagTextProp]: n,
          __tagId: a.__tagId
        },
            r = this.validateTag(o);
        this.editTagChangeDetected(g(a, o)) || !0 !== t.originalIsValid || (r = !0), i.classList.toggle(this.settings.classNames.tagInvalid, !0 !== r), a.__isValid = r, i.title = !0 === r ? a.title || a.value : r, n.length >= this.settings.dropdown.enabled && (this.state.editing && (this.state.editing.value = n), this.dropdown.show(n)), this.trigger("edit:input", {
          tag: i,
          index: s,
          data: g({}, this.value[s], {
            newValue: n
          }),
          event: e
        });
      },

      onEditTagFocus(t) {
        this.state.editing = {
          scope: t,
          input: t.querySelector("[contenteditable]")
        };
      },

      onEditTagBlur(t) {
        if (this.state.hasFocus || this.toggleFocusClass(), this.DOM.scope.contains(t)) {
          var e,
              i,
              s = this.settings,
              a = t.closest("." + s.classNames.tag),
              n = this.input.normalize.call(this, t),
              o = this.tagData(a),
              r = o.__originalData,
              l = this.editTagChangeDetected(o),
              d = this.validateTag({
            [s.tagTextProp]: n,
            __tagId: o.__tagId
          });
          if (n) {
            if (l) {
              if (e = this.hasMaxTags(), i = g({}, r, {
                [s.tagTextProp]: this.trim(n),
                __isValid: d
              }), s.transformTag.call(this, i, r), !0 !== (d = (!e || !0 === r.__isValid) && this.validateTag(i))) {
                if (this.trigger("invalid", {
                  data: i,
                  tag: a,
                  message: d
                }), s.editTags.keepInvalid) return;
                s.keepInvalidTags ? i.__isValid = d : i = r;
              } else s.keepInvalidTags && (delete i.title, delete i["aria-invalid"], delete i.class);

              this.onEditTagDone(a, i);
            } else this.onEditTagDone(a, r);
          } else this.onEditTagDone(a);
        }
      },

      onEditTagkeydown(t, e) {
        if (!this.state.composing) switch (this.trigger("edit:keydown", {
          event: t
        }), t.key) {
          case "Esc":
          case "Escape":
            e.parentNode.replaceChild(e.__tagifyTagData.__originalHTML, e), this.state.editing = !1;

          case "Enter":
          case "Tab":
            t.preventDefault(), t.target.blur();
        }
      },

      onDoubleClickScope(t) {
        var e,
            i,
            s = t.target.closest("." + this.settings.classNames.tag),
            a = this.tagData(s),
            n = this.settings;
        s && n.userInput && !1 !== a.editable && (e = s.classList.contains(this.settings.classNames.tagEditing), i = s.hasAttribute("readonly"), "select" == n.mode || n.readonly || e || i || !this.settings.editTags || this.editTag(s), this.toggleFocusClass(!0), this.trigger("dblclick", {
          tag: s,
          index: this.getNodeIndex(s),
          data: this.tagData(s)
        }));
      },

      onInputDOMChange(t) {
        t.forEach(t => {
          t.addedNodes.forEach(t => {
            if ("<div><br></div>" == t.outerHTML) t.replaceWith(document.createElement("br"));else if (1 == t.nodeType && t.querySelector(this.settings.classNames.tagSelector)) {
              let e = document.createTextNode("");
              3 == t.childNodes[0].nodeType && "BR" != t.previousSibling.nodeName && (e = document.createTextNode("\n")), t.replaceWith(e, ...[...t.childNodes].slice(0, -1)), this.placeCaretAfterNode(e);
            } else if (v.call(this, t) && (3 != t.previousSibling?.nodeType || t.previousSibling.textContent || t.previousSibling.remove(), t.previousSibling && "BR" == t.previousSibling.nodeName)) {
              t.previousSibling.replaceWith("\n​");
              let e = t.nextSibling,
                  i = "";

              for (; e;) i += e.textContent, e = e.nextSibling;

              i.trim() && this.placeCaretAfterNode(t.previousSibling);
            }
          }), t.removedNodes.forEach(t => {
            t && "BR" == t.nodeName && v.call(this, e) && (this.removeTags(e), this.fixFirefoxLastTagNoCaret());
          });
        });
        var e = this.DOM.input.lastChild;
        e && "" == e.nodeValue && e.remove(), e && "BR" == e.nodeName || this.DOM.input.appendChild(document.createElement("br"));
      }

    }
  };

  function M(t, e) {
    if (!t) {
      console.warn("Tagify:", "input element not found", t);
      const e = new Proxy(this, {
        get: () => () => e
      });
      return e;
    }

    if (t.__tagify) return console.warn("Tagify: ", "input element is already Tagified - Same instance is returned.", t), t.__tagify;
    var i;
    g(this, function (t) {
      var e = document.createTextNode("");

      function i(t, i, s) {
        s && i.split(/\s+/g).forEach(i => e[t + "EventListener"].call(e, i, s));
      }

      return {
        off(t, e) {
          return i("remove", t, e), this;
        },

        on(t, e) {
          return e && "function" == typeof e && i("add", t, e), this;
        },

        trigger(i, s, a) {
          var n;
          if (a = a || {
            cloneData: !0
          }, i) if (t.settings.isJQueryPlugin) "remove" == i && (i = "removeTag"), jQuery(t.DOM.originalInput).triggerHandler(i, [s]);else {
            try {
              var o = "object" == typeof s ? s : {
                value: s
              };
              if ((o = a.cloneData ? g({}, o) : o).tagify = this, s.event && (o.event = this.cloneEvent(s.event)), s instanceof Object) for (var r in s) s[r] instanceof HTMLElement && (o[r] = s[r]);
              n = new CustomEvent(i, {
                detail: o
              });
            } catch (t) {
              console.warn(t);
            }

            e.dispatchEvent(n);
          }
        }

      };
    }(this)), this.isFirefox = "undefined" != typeof InstallTrigger, this.isIE = window.document.documentMode, e = e || {}, this.getPersistedData = (i = e.id, t => {
      let e,
          s = "/" + t;
      if (1 == localStorage.getItem(b + i + "/v", 1)) try {
        e = JSON.parse(localStorage[b + i + s]);
      } catch (t) {}
      return e;
    }), this.setPersistedData = (t => t ? (localStorage.setItem(b + t + "/v", 1), (e, i) => {
      let s = "/" + i,
          a = JSON.stringify(e);
      e && i && (localStorage.setItem(b + t + s, a), dispatchEvent(new Event("storage")));
    }) : () => {})(e.id), this.clearPersistedData = (t => e => {
      const i = b + "/" + t + "/";
      if (e) localStorage.removeItem(i + e);else for (let t in localStorage) t.includes(i) && localStorage.removeItem(t);
    })(e.id), this.applySettings(t, e), this.state = {
      inputText: "",
      editing: !1,
      composing: !1,
      actions: {},
      mixMode: {},
      dropdown: {},
      flaggedTags: {}
    }, this.value = [], this.listeners = {}, this.DOM = {}, this.build(t), T.call(this), this.getCSSVars(), this.loadOriginalValues(), this.events.customBinding.call(this), this.events.binding.call(this), t.autofocus && this.DOM.input.focus(), t.__tagify = this;
  }

  return M.prototype = {
    _dropdown: w,
    helpers: {
      sameStr: s,
      removeCollectionProp: a,
      omit: n,
      isObject: h,
      parseHTML: r,
      escapeHTML: d,
      extend: g,
      concatWithoutDups: p,
      getUID: m,
      isNodeTag: v
    },
    customEventsList: ["change", "add", "remove", "invalid", "input", "click", "keydown", "focus", "blur", "edit:input", "edit:beforeUpdate", "edit:updated", "edit:start", "edit:keydown", "dropdown:show", "dropdown:hide", "dropdown:select", "dropdown:updated", "dropdown:noMatch", "dropdown:scroll"],
    dataProps: ["__isValid", "__removed", "__originalData", "__originalHTML", "__tagId"],

    trim(t) {
      return this.settings.trim && t && "string" == typeof t ? t.trim() : t;
    },

    parseHTML: r,
    templates: D,

    parseTemplate(t, e) {
      return t = this.settings.templates[t] || t, this.parseHTML(t.apply(this, e));
    },

    set whitelist(t) {
      const e = t && Array.isArray(t);
      this.settings.whitelist = e ? t : [], this.setPersistedData(e ? t : [], "whitelist");
    },

    get whitelist() {
      return this.settings.whitelist;
    },

    generateClassSelectors(t) {
      for (let e in t) {
        let i = e;
        Object.defineProperty(t, i + "Selector", {
          get() {
            return "." + this[i].split(" ")[0];
          }

        });
      }
    },

    applySettings(t, i) {
      f.templates = this.templates;
      var s = this.settings = g({}, f, i);
      if (s.disabled = t.hasAttribute("disabled"), s.readonly = s.readonly || t.hasAttribute("readonly"), s.placeholder = d(t.getAttribute("placeholder") || s.placeholder || ""), s.required = t.hasAttribute("required"), this.generateClassSelectors(s.classNames), void 0 === s.dropdown.includeSelectedTags && (s.dropdown.includeSelectedTags = s.duplicates), this.isIE && (s.autoComplete = !1), ["whitelist", "blacklist"].forEach(e => {
        var i = t.getAttribute("data-" + e);
        i && (i = i.split(s.delimiters)) instanceof Array && (s[e] = i);
      }), "autoComplete" in i && !h(i.autoComplete) && (s.autoComplete = f.autoComplete, s.autoComplete.enabled = i.autoComplete), "mix" == s.mode && (s.autoComplete.rightKey = !0, s.delimiters = i.delimiters || null, s.tagTextProp && !s.dropdown.searchKeys.includes(s.tagTextProp) && s.dropdown.searchKeys.push(s.tagTextProp)), t.pattern) try {
        s.pattern = new RegExp(t.pattern);
      } catch (t) {}

      if (s.delimiters) {
        s._delimiters = s.delimiters;

        try {
          s.delimiters = new RegExp(this.settings.delimiters, "g");
        } catch (t) {}
      }

      s.disabled && (s.userInput = !1), this.TEXTS = e(e({}, x), s.texts || {}), "select" != s.mode && s.userInput || (s.dropdown.enabled = 0), s.dropdown.appendTarget = i.dropdown && i.dropdown.appendTarget ? i.dropdown.appendTarget : document.body;
      let a = this.getPersistedData("whitelist");
      Array.isArray(a) && (this.whitelist = Array.isArray(s.whitelist) ? p(s.whitelist, a) : a);
    },

    getAttributes(t) {
      var e,
          i = this.getCustomAttributes(t),
          s = "";

      for (e in i) s += " " + e + (void 0 !== t[e] ? `="${i[e]}"` : "");

      return s;
    },

    getCustomAttributes(t) {
      if (!h(t)) return "";
      var e,
          i = {};

      for (e in t) "__" != e.slice(0, 2) && "class" != e && t.hasOwnProperty(e) && void 0 !== t[e] && (i[e] = d(t[e]));

      return i;
    },

    setStateSelection() {
      var t = window.getSelection(),
          e = {
        anchorOffset: t.anchorOffset,
        anchorNode: t.anchorNode,
        range: t.getRangeAt && t.rangeCount && t.getRangeAt(0)
      };
      return this.state.selection = e, e;
    },

    getCaretGlobalPosition() {
      const t = document.getSelection();

      if (t.rangeCount) {
        const e = t.getRangeAt(0),
              i = e.startContainer,
              s = e.startOffset;
        let a, n;
        if (s > 0) return n = document.createRange(), n.setStart(i, s - 1), n.setEnd(i, s), a = n.getBoundingClientRect(), {
          left: a.right,
          top: a.top,
          bottom: a.bottom
        };
        if (i.getBoundingClientRect) return i.getBoundingClientRect();
      }

      return {
        left: -9999,
        top: -9999
      };
    },

    getCSSVars() {
      var t = getComputedStyle(this.DOM.scope, null);
      var e;
      this.CSSVars = {
        tagHideTransition: (t => {
          let e = t.value;
          return "s" == t.unit ? 1e3 * e : e;
        })(function (t) {
          if (!t) return {};
          var e = (t = t.trim().split(" ")[0]).split(/\d+/g).filter(t => t).pop().trim();
          return {
            value: +t.split(e).filter(t => t)[0].trim(),
            unit: e
          };
        }((e = "tag-hide-transition", t.getPropertyValue("--" + e))))
      };
    },

    build(t) {
      var e = this.DOM;
      this.settings.mixMode.integrated ? (e.originalInput = null, e.scope = t, e.input = t) : (e.originalInput = t, e.originalInput_tabIndex = t.tabIndex, e.scope = this.parseTemplate("wrapper", [t, this.settings]), e.input = e.scope.querySelector(this.settings.classNames.inputSelector), t.parentNode.insertBefore(e.scope, t), t.tabIndex = -1);
    },

    destroy() {
      this.events.unbindGlobal.call(this), this.DOM.scope.parentNode.removeChild(this.DOM.scope), this.DOM.originalInput.tabIndex = this.DOM.originalInput_tabIndex, delete this.DOM.originalInput.__tagify, this.dropdown.hide(!0), clearTimeout(this.dropdownHide__bindEventsTimeout), clearInterval(this.listeners.main.originalInputValueObserverInterval);
    },

    loadOriginalValues(t) {
      var e,
          i = this.settings;

      if (this.state.blockChangeEvent = !0, void 0 === t) {
        const e = this.getPersistedData("value");
        t = e && !this.DOM.originalInput.value ? e : i.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value;
      }

      if (this.removeAllTags(), t) {
        if ("mix" == i.mode) this.parseMixTags(this.trim(t)), (e = this.DOM.input.lastChild) && "BR" == e.tagName || this.DOM.input.insertAdjacentHTML("beforeend", "<br>");else {
          try {
            JSON.parse(t) instanceof Array && (t = JSON.parse(t));
          } catch (t) {}

          this.addTags(t, !0).forEach(t => t && t.classList.add(i.classNames.tagNoAnimation));
        }
      } else this.postUpdate();
      this.state.lastOriginalValueReported = i.mixMode.integrated ? "" : this.DOM.originalInput.value, this.state.blockChangeEvent = !1;
    },

    cloneEvent(t) {
      var e = {};

      for (var i in t) "path" != i && (e[i] = t[i]);

      return e;
    },

    loading(t) {
      return this.state.isLoading = t, this.DOM.scope.classList[t ? "add" : "remove"](this.settings.classNames.scopeLoading), this;
    },

    tagLoading(t, e) {
      return t && t.classList[e ? "add" : "remove"](this.settings.classNames.tagLoading), this;
    },

    toggleClass(t, e) {
      "string" == typeof t && this.DOM.scope.classList.toggle(t, e);
    },

    toggleScopeValidation(t) {
      var e = !0 === t || void 0 === t;
      !this.settings.required && t && t === this.TEXTS.empty && (e = !0), this.toggleClass(this.settings.classNames.tagInvalid, !e), this.DOM.scope.title = e ? "" : t;
    },

    toggleFocusClass(t) {
      this.toggleClass(this.settings.classNames.focus, !!t);
    },

    triggerChangeEvent: function () {
      if (!this.settings.mixMode.integrated) {
        var t = this.DOM.originalInput,
            e = this.state.lastOriginalValueReported !== t.value,
            i = new CustomEvent("change", {
          bubbles: !0
        });
        e && (this.state.lastOriginalValueReported = t.value, i.simulated = !0, t._valueTracker && t._valueTracker.setValue(Math.random()), t.dispatchEvent(i), this.trigger("change", this.state.lastOriginalValueReported), t.value = this.state.lastOriginalValueReported);
      }
    },
    events: O,

    fixFirefoxLastTagNoCaret() {},

    placeCaretAfterNode(t) {
      if (t && t.parentNode) {
        var e = t,
            i = window.getSelection(),
            s = i.getRangeAt(0);
        i.rangeCount && (s.setStartAfter(e || t), s.collapse(!0), i.removeAllRanges(), i.addRange(s));
      }
    },

    insertAfterTag(t, e) {
      if (e = e || this.settings.mixMode.insertAfterTag, t && t.parentNode && e) return e = "string" == typeof e ? document.createTextNode(e) : e, t.parentNode.insertBefore(e, t.nextSibling), e;
    },

    editTagChangeDetected(t) {
      var e = t.__originalData;

      for (var i in e) if (!this.dataProps.includes(i) && t[i] != e[i]) return !0;

      return !1;
    },

    getTagTextNode(t) {
      return t.querySelector(this.settings.classNames.tagTextSelector);
    },

    setTagTextNode(t, e) {
      this.getTagTextNode(t).innerHTML = d(e);
    },

    editTag(t, e) {
      t = t || this.getLastTag(), e = e || {}, this.dropdown.hide();
      var i = this.settings,
          s = this.getTagTextNode(t),
          a = this.getNodeIndex(t),
          n = this.tagData(t),
          o = this.events.callbacks,
          r = this,
          l = !0;

      if (s) {
        if (!(n instanceof Object && "editable" in n) || n.editable) return n = this.tagData(t, {
          __originalData: g({}, n),
          __originalHTML: t.cloneNode(!0)
        }), this.tagData(n.__originalHTML, n.__originalData), s.setAttribute("contenteditable", !0), t.classList.add(i.classNames.tagEditing), s.addEventListener("focus", o.onEditTagFocus.bind(this, t)), s.addEventListener("blur", function () {
          setTimeout(() => o.onEditTagBlur.call(r, r.getTagTextNode(t)));
        }), s.addEventListener("input", o.onEditTagInput.bind(this, s)), s.addEventListener("keydown", e => o.onEditTagkeydown.call(this, e, t)), s.addEventListener("compositionstart", o.onCompositionStart.bind(this)), s.addEventListener("compositionend", o.onCompositionEnd.bind(this)), e.skipValidation || (l = this.editTagToggleValidity(t)), s.originalIsValid = l, this.trigger("edit:start", {
          tag: t,
          index: a,
          data: n,
          isValid: l
        }), s.focus(), this.setRangeAtStartEnd(!1, s), this;
      } else console.warn("Cannot find element in Tag template: .", i.classNames.tagTextSelector);
    },

    editTagToggleValidity(t, e) {
      var i;
      if (e = e || this.tagData(t)) return (i = !("__isValid" in e) || !0 === e.__isValid) || this.removeTagsFromValue(t), this.update(), t.classList.toggle(this.settings.classNames.tagNotAllowed, !i), e.__isValid;
      console.warn("tag has no data: ", t, e);
    },

    onEditTagDone(t, e) {
      e = e || {};
      var i = {
        tag: t = t || this.state.editing.scope,
        index: this.getNodeIndex(t),
        previousData: this.tagData(t),
        data: e
      };
      this.trigger("edit:beforeUpdate", i, {
        cloneData: !1
      }), this.state.editing = !1, delete e.__originalData, delete e.__originalHTML, t && e[this.settings.tagTextProp] ? (t = this.replaceTag(t, e), this.editTagToggleValidity(t, e), this.settings.a11y.focusableTags ? t.focus() : this.placeCaretAfterNode(t)) : t && this.removeTags(t), this.trigger("edit:updated", i), this.dropdown.hide(), this.settings.keepInvalidTags && this.reCheckInvalidTags();
    },

    replaceTag(t, e) {
      e && e.value || (e = t.__tagifyTagData), e.__isValid && 1 != e.__isValid && g(e, this.getInvalidTagAttrs(e, e.__isValid));
      var i = this.createTagElem(e);
      return t.parentNode.replaceChild(i, t), this.updateValueByDOMTags(), i;
    },

    updateValueByDOMTags() {
      this.value.length = 0, [].forEach.call(this.getTagElms(), t => {
        t.classList.contains(this.settings.classNames.tagNotAllowed.split(" ")[0]) || this.value.push(this.tagData(t));
      }), this.update();
    },

    setRangeAtStartEnd(t, e) {
      t = "number" == typeof t ? t : !!t, e = (e = e || this.DOM.input).lastChild || e;
      var i = document.getSelection();

      try {
        i.rangeCount >= 1 && ["Start", "End"].forEach(s => i.getRangeAt(0)["set" + s](e, t || e.length));
      } catch (t) {}
    },

    injectAtCaret(t, e) {
      return !(e = e || this.state.selection?.range) && t ? (this.appendMixTags(t), this) : ("string" == typeof t && (t = document.createTextNode(t)), e.deleteContents(), e.insertNode(t), this.setRangeAtStartEnd(!1, t), this.updateValueByDOMTags(), this.update(), this);
    },

    input: {
      set() {
        let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        var i = this.settings.dropdown.closeOnSelect;
        this.state.inputText = t, e && (this.DOM.input.innerHTML = d("" + t)), !t && i && this.dropdown.hide.bind(this), this.input.autocomplete.suggest.call(this), this.input.validate.call(this);
      },

      raw() {
        return this.DOM.input.textContent;
      },

      validate() {
        var t = !this.state.inputText || !0 === this.validateTag({
          value: this.state.inputText
        });
        return this.DOM.input.classList.toggle(this.settings.classNames.inputInvalid, !t), t;
      },

      normalize(t) {
        var e = t || this.DOM.input,
            i = [];
        e.childNodes.forEach(t => 3 == t.nodeType && i.push(t.nodeValue)), i = i.join("\n");

        try {
          i = i.replace(/(?:\r\n|\r|\n)/g, this.settings.delimiters.source.charAt(0));
        } catch (t) {}

        return i = i.replace(/\s/g, " "), this.trim(i);
      },

      autocomplete: {
        suggest(t) {
          if (this.settings.autoComplete.enabled) {
            "string" == typeof (t = t || {}) && (t = {
              value: t
            });
            var e = t.value ? "" + t.value : "",
                i = e.substr(0, this.state.inputText.length).toLowerCase(),
                s = e.substring(this.state.inputText.length);
            e && this.state.inputText && i == this.state.inputText.toLowerCase() ? (this.DOM.input.setAttribute("data-suggest", s), this.state.inputSuggestion = t) : (this.DOM.input.removeAttribute("data-suggest"), delete this.state.inputSuggestion);
          }
        },

        set(t) {
          var e = this.DOM.input.getAttribute("data-suggest"),
              i = t || (e ? this.state.inputText + e : null);
          return !!i && ("mix" == this.settings.mode ? this.replaceTextWithNode(document.createTextNode(this.state.tag.prefix + i)) : (this.input.set.call(this, i), this.setRangeAtStartEnd()), this.input.autocomplete.suggest.call(this), this.dropdown.hide(), !0);
        }

      }
    },

    getTagIdx(t) {
      return this.value.findIndex(e => e.__tagId == (t || {}).__tagId);
    },

    getNodeIndex(t) {
      var e = 0;
      if (t) for (; t = t.previousElementSibling;) e++;
      return e;
    },

    getTagElms() {
      for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++) e[i] = arguments[i];

      var s = "." + [...this.settings.classNames.tag.split(" "), ...e].join(".");
      return [].slice.call(this.DOM.scope.querySelectorAll(s));
    },

    getLastTag() {
      var t = this.DOM.scope.querySelectorAll(`${this.settings.classNames.tagSelector}:not(.${this.settings.classNames.tagHide}):not([readonly])`);
      return t[t.length - 1];
    },

    tagData: (t, e, i) => t ? (e && (t.__tagifyTagData = i ? e : g({}, t.__tagifyTagData || {}, e)), t.__tagifyTagData) : (console.warn("tag element doesn't exist", t, e), e),

    isTagDuplicate(t, e, i) {
      var a = 0;
      if ("select" == this.settings.mode) return !1;

      for (let n of this.value) {
        s(this.trim("" + t), n.value, e) && i != n.__tagId && a++;
      }

      return a;
    },

    getTagIndexByValue(t) {
      var e = [];
      return this.getTagElms().forEach((i, a) => {
        s(this.trim(i.textContent), t, this.settings.dropdown.caseSensitive) && e.push(a);
      }), e;
    },

    getTagElmByValue(t) {
      var e = this.getTagIndexByValue(t)[0];
      return this.getTagElms()[e];
    },

    flashTag(t) {
      t && (t.classList.add(this.settings.classNames.tagFlash), setTimeout(() => {
        t.classList.remove(this.settings.classNames.tagFlash);
      }, 100));
    },

    isTagBlacklisted(t) {
      return t = this.trim(t.toLowerCase()), this.settings.blacklist.filter(e => ("" + e).toLowerCase() == t).length;
    },

    isTagWhitelisted(t) {
      return !!this.getWhitelistItem(t);
    },

    getWhitelistItem(t, e, i) {
      e = e || "value";
      var a,
          n = this.settings;
      return (i = i || n.whitelist).some(i => {
        var o = "string" == typeof i ? i : i[e] || i.value;
        if (s(o, t, n.dropdown.caseSensitive, n.trim)) return a = "string" == typeof i ? {
          value: i
        } : i, !0;
      }), a || "value" != e || "value" == n.tagTextProp || (a = this.getWhitelistItem(t, n.tagTextProp, i)), a;
    },

    validateTag(t) {
      var e = this.settings,
          i = "value" in t ? "value" : e.tagTextProp,
          s = this.trim(t[i] + "");
      return (t[i] + "").trim() ? e.pattern && e.pattern instanceof RegExp && !e.pattern.test(s) ? this.TEXTS.pattern : !e.duplicates && this.isTagDuplicate(s, e.dropdown.caseSensitive, t.__tagId) ? this.TEXTS.duplicate : this.isTagBlacklisted(s) || e.enforceWhitelist && !this.isTagWhitelisted(s) ? this.TEXTS.notAllowed : !e.validate || e.validate(t) : this.TEXTS.empty;
    },

    getInvalidTagAttrs(t, e) {
      return {
        "aria-invalid": !0,
        class: `${t.class || ""} ${this.settings.classNames.tagNotAllowed}`.trim(),
        title: e
      };
    },

    hasMaxTags() {
      return this.value.length >= this.settings.maxTags && this.TEXTS.exceed;
    },

    setReadonly(t, e) {
      var i = this.settings;
      document.activeElement.blur(), i[e || "readonly"] = t, this.DOM.scope[(t ? "set" : "remove") + "Attribute"](e || "readonly", !0), this.setContentEditable(!t);
    },

    setContentEditable(t) {
      this.settings.userInput && (this.DOM.input.contentEditable = t, this.DOM.input.tabIndex = t ? 0 : -1);
    },

    setDisabled(t) {
      this.setReadonly(t, "disabled");
    },

    normalizeTags(t) {
      var e = this.settings,
          i = e.whitelist,
          s = e.delimiters,
          a = e.mode,
          n = e.tagTextProp;
      e.enforceWhitelist;

      var o = [],
          r = !!i && i[0] instanceof Object,
          l = Array.isArray(t),
          d = l && t[0].value,
          h = t => (t + "").split(s).filter(t => t).map(t => ({
        [n]: this.trim(t),
        value: this.trim(t)
      }));

      if ("number" == typeof t && (t = t.toString()), "string" == typeof t) {
        if (!t.trim()) return [];
        t = h(t);
      } else l && (t = [].concat(...t.map(t => t.value ? t : h(t))));

      return r && !d && (t.forEach(t => {
        var e = o.map(t => t.value),
            i = this.dropdown.filterListItems.call(this, t[n], {
          exact: !0
        });
        this.settings.duplicates || (i = i.filter(t => !e.includes(t.value)));
        var s = i.length > 1 ? this.getWhitelistItem(t[n], n, i) : i[0];
        s && s instanceof Object ? o.push(s) : "mix" != a && (null == t.value && (t.value = t[n]), o.push(t));
      }), o.length && (t = o)), t;
    },

    parseMixTags(t) {
      var e = this.settings,
          i = e.mixTagsInterpolator,
          s = e.duplicates,
          a = e.transformTag,
          n = e.enforceWhitelist,
          o = e.maxTags,
          r = e.tagTextProp,
          l = [];
      return t = t.split(i[0]).map((t, e) => {
        var d,
            h,
            g,
            p = t.split(i[1]),
            c = p[0],
            u = l.length == o;

        try {
          if (c == +c) throw Error;
          h = JSON.parse(c);
        } catch (t) {
          h = this.normalizeTags(c)[0] || {
            value: c
          };
        }

        if (a.call(this, h), u || !(p.length > 1) || n && !this.isTagWhitelisted(h.value) || !s && this.isTagDuplicate(h.value)) {
          if (t) return e ? i[0] + t : t;
        } else h[d = h[r] ? r : "value"] = this.trim(h[d]), g = this.createTagElem(h), l.push(h), g.classList.add(this.settings.classNames.tagNoAnimation), p[0] = g.outerHTML, this.value.push(h);

        return p.join("");
      }).join(""), this.DOM.input.innerHTML = t, this.DOM.input.appendChild(document.createTextNode("")), this.DOM.input.normalize(), this.getTagElms().forEach((t, e) => this.tagData(t, l[e])), this.update({
        withoutChangeEvent: !0
      }), t;
    },

    replaceTextWithNode(t, e) {
      if (this.state.tag || e) {
        e = e || this.state.tag.prefix + this.state.tag.value;
        var i,
            s,
            a = this.state.selection || window.getSelection(),
            n = a.anchorNode,
            o = this.state.tag.delimiters ? this.state.tag.delimiters.length : 0;
        return n.splitText(a.anchorOffset - o), -1 == (i = n.nodeValue.lastIndexOf(e)) ? !0 : (s = n.splitText(i), t && n.parentNode.replaceChild(t, s), !0);
      }
    },

    selectTag(t, e) {
      var i = this.settings;

      if (!i.enforceWhitelist || this.isTagWhitelisted(e.value)) {
        this.input.set.call(this, e[i.tagTextProp] || e.value, !0), this.state.actions.selectOption && setTimeout(this.setRangeAtStartEnd.bind(this));
        var s = this.getLastTag();
        return s ? this.replaceTag(s, e) : this.appendTag(t), this.value[0] = e, this.update(), this.trigger("add", {
          tag: t,
          data: e
        }), [t];
      }
    },

    addEmptyTag(t) {
      var e = g({
        value: ""
      }, t || {}),
          i = this.createTagElem(e);
      this.tagData(i, e), this.appendTag(i), this.editTag(i, {
        skipValidation: !0
      });
    },

    addTags(t, e, i) {
      var s = [],
          a = this.settings,
          n = [],
          o = document.createDocumentFragment();
      if (i = i || a.skipInvalid, !t || 0 == t.length) return s;

      switch (t = this.normalizeTags(t), a.mode) {
        case "mix":
          return this.addMixTags(t);

        case "select":
          e = !1, this.removeAllTags();
      }

      return this.DOM.input.removeAttribute("style"), t.forEach(t => {
        var e,
            r = {},
            l = Object.assign({}, t, {
          value: t.value + ""
        });

        if (t = Object.assign({}, l), a.transformTag.call(this, t), t.__isValid = this.hasMaxTags() || this.validateTag(t), !0 !== t.__isValid) {
          if (i) return;
          if (g(r, this.getInvalidTagAttrs(t, t.__isValid), {
            __preInvalidData: l
          }), t.__isValid == this.TEXTS.duplicate && this.flashTag(this.getTagElmByValue(t.value)), !a.createInvalidTags) return void n.push(t.value);
        }

        if ("readonly" in t && (t.readonly ? r["aria-readonly"] = !0 : delete t.readonly), e = this.createTagElem(t, r), s.push(e), "select" == a.mode) return this.selectTag(e, t);
        o.appendChild(e), t.__isValid && !0 === t.__isValid ? (this.value.push(t), this.trigger("add", {
          tag: e,
          index: this.value.length - 1,
          data: t
        })) : (this.trigger("invalid", {
          data: t,
          index: this.value.length,
          tag: e,
          message: t.__isValid
        }), a.keepInvalidTags || setTimeout(() => this.removeTags(e, !0), 1e3)), this.dropdown.position();
      }), this.appendTag(o), this.update(), t.length && e && (this.input.set.call(this, a.createInvalidTags ? "" : n.join(a._delimiters)), this.setRangeAtStartEnd()), a.dropdown.enabled && this.dropdown.refilter(), s;
    },

    addMixTags(t) {
      if ((t = this.normalizeTags(t))[0].prefix || this.state.tag) return this.prefixedTextToTag(t[0]);
      "string" == typeof t && (t = [{
        value: t
      }]), this.state.selection;
      var e = document.createDocumentFragment();
      return t.forEach(t => {
        var i = this.createTagElem(t);
        e.appendChild(i), this.insertAfterTag(i);
      }), this.appendMixTags(e), e;
    },

    appendMixTags(t) {
      var e = !!this.state.selection;
      e ? this.injectAtCaret(t) : (this.DOM.input.focus(), (e = this.setStateSelection()).range.setStart(this.DOM.input, e.range.endOffset), e.range.setEnd(this.DOM.input, e.range.endOffset), this.DOM.input.appendChild(t), this.updateValueByDOMTags(), this.update());
    },

    prefixedTextToTag(t) {
      var e,
          i = this.settings,
          s = this.state.tag.delimiters;

      if (i.transformTag.call(this, t), t.prefix = t.prefix || this.state.tag ? this.state.tag.prefix : (i.pattern.source || i.pattern)[0], e = this.createTagElem(t), this.replaceTextWithNode(e) || this.DOM.input.appendChild(e), setTimeout(() => e.classList.add(this.settings.classNames.tagNoAnimation), 300), this.value.push(t), this.update(), !s) {
        var a = this.insertAfterTag(e) || e;
        this.placeCaretAfterNode(a);
      }

      return this.state.tag = null, this.trigger("add", g({}, {
        tag: e
      }, {
        data: t
      })), e;
    },

    appendTag(t) {
      var e = this.DOM,
          i = e.input;
      i === e.input ? e.scope.insertBefore(t, i) : e.scope.appendChild(t);
    },

    createTagElem(t, i) {
      t.__tagId = m();
      var s,
          a = g({}, t, e({
        value: d(t.value + "")
      }, i));
      return function (t) {
        for (var e, i = document.createNodeIterator(t, NodeFilter.SHOW_TEXT, null, !1); e = i.nextNode();) e.textContent.trim() || e.parentNode.removeChild(e);
      }(s = this.parseTemplate("tag", [a, this])), this.tagData(s, t), s;
    },

    reCheckInvalidTags() {
      var t = this.settings;
      this.getTagElms(t.classNames.tagNotAllowed).forEach((e, i) => {
        var s = this.tagData(e),
            a = this.hasMaxTags(),
            n = this.validateTag(s),
            o = !0 === n && !a;
        if ("select" == t.mode && this.toggleScopeValidation(n), o) return s = s.__preInvalidData ? s.__preInvalidData : {
          value: s.value
        }, this.replaceTag(e, s);
        e.title = a || n;
      });
    },

    removeTags(t, e, i) {
      var s,
          a = this.settings;
      if (t = t && t instanceof HTMLElement ? [t] : t instanceof Array ? t : t ? [t] : [this.getLastTag()], s = t.reduce((t, e) => {
        e && "string" == typeof e && (e = this.getTagElmByValue(e));
        var i = this.tagData(e);
        return e && i && !i.readonly && t.push({
          node: e,
          idx: this.getTagIdx(i),
          data: this.tagData(e, {
            __removed: !0
          })
        }), t;
      }, []), i = "number" == typeof i ? i : this.CSSVars.tagHideTransition, "select" == a.mode && (i = 0, this.input.set.call(this)), 1 == s.length && "select" != a.mode && s[0].node.classList.contains(a.classNames.tagNotAllowed) && (e = !0), s.length) return a.hooks.beforeRemoveTag(s, {
        tagify: this
      }).then(() => {
        function t(t) {
          t.node.parentNode && (t.node.parentNode.removeChild(t.node), e ? a.keepInvalidTags && this.trigger("remove", {
            tag: t.node,
            index: t.idx
          }) : (this.trigger("remove", {
            tag: t.node,
            index: t.idx,
            data: t.data
          }), this.dropdown.refilter(), this.dropdown.position(), this.DOM.input.normalize(), a.keepInvalidTags && this.reCheckInvalidTags()));
        }

        i && i > 10 && 1 == s.length ? function (e) {
          e.node.style.width = parseFloat(window.getComputedStyle(e.node).width) + "px", document.body.clientTop, e.node.classList.add(a.classNames.tagHide), setTimeout(t.bind(this), i, e);
        }.call(this, s[0]) : s.forEach(t.bind(this)), e || (this.removeTagsFromValue(s.map(t => t.node)), this.update(), "select" == a.mode && this.setContentEditable(!0));
      }).catch(t => {});
    },

    removeTagsFromDOM() {
      [].slice.call(this.getTagElms()).forEach(t => t.parentNode.removeChild(t));
    },

    removeTagsFromValue(t) {
      (t = Array.isArray(t) ? t : [t]).forEach(t => {
        var e = this.tagData(t),
            i = this.getTagIdx(e);
        i > -1 && this.value.splice(i, 1);
      });
    },

    removeAllTags(t) {
      t = t || {}, this.value = [], "mix" == this.settings.mode ? this.DOM.input.innerHTML = "" : this.removeTagsFromDOM(), this.dropdown.refilter(), this.dropdown.position(), this.state.dropdown.visible && setTimeout(() => {
        this.DOM.input.focus();
      }), "select" == this.settings.mode && (this.input.set.call(this), this.setContentEditable(!0)), this.update(t);
    },

    postUpdate() {
      var t = this.settings,
          e = t.classNames,
          i = "mix" == t.mode ? t.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value.trim() : this.value.length + this.input.raw.call(this).length;
      this.toggleClass(e.hasMaxTags, this.value.length >= t.maxTags), this.toggleClass(e.hasNoTags, !this.value.length), this.toggleClass(e.empty, !i), "select" == t.mode && this.toggleScopeValidation(this.value?.[0]?.__isValid);
    },

    setOriginalInputValue(t) {
      var e = this.DOM.originalInput;
      this.settings.mixMode.integrated || (e.value = t, e.tagifyValue = e.value, this.setPersistedData(t, "value"));
    },

    update(t) {
      var e = this.getInputValue();
      this.setOriginalInputValue(e), this.postUpdate(), this.settings.onChangeAfterBlur && (t || {}).withoutChangeEvent || this.state.blockChangeEvent || this.triggerChangeEvent();
    },

    getInputValue() {
      var t = this.getCleanValue();
      return "mix" == this.settings.mode ? this.getMixedTagsAsString(t) : t.length ? this.settings.originalInputValueFormat ? this.settings.originalInputValueFormat(t) : JSON.stringify(t) : "";
    },

    getCleanValue(t) {
      return a(t || this.value, this.dataProps);
    },

    getMixedTagsAsString() {
      var t = "",
          e = this,
          i = this.settings,
          s = i.originalInputValueFormat || JSON.stringify,
          a = i.mixTagsInterpolator;
      return function i(o) {
        o.childNodes.forEach(o => {
          if (1 == o.nodeType) {
            const r = e.tagData(o);

            if ("BR" == o.tagName && (t += "\r\n"), r && v.call(e, o)) {
              if (r.__removed) return;
              t += a[0] + s(n(r, e.dataProps)) + a[1];
            } else o.getAttribute("style") || ["B", "I", "U"].includes(o.tagName) ? t += o.textContent : "DIV" != o.tagName && "P" != o.tagName || (t += "\r\n", i(o));
          } else t += o.textContent;
        });
      }(this.DOM.input), t;
    }

  }, M.prototype.removeTag = M.prototype.removeTags, M;
});
},{}],"../taggy/node_modules/node-fetch/browser.js":[function(require,module,exports) {

"use strict"; // ref: https://github.com/tc39/proposal-global

var getGlobal = function () {
  // the only reliable means to get the global object is
  // `Function('return this')()`
  // However, this causes CSP violations in Chrome apps.
  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof global !== 'undefined') {
    return global;
  }

  throw new Error('unable to locate global object');
};

var global = getGlobal();
module.exports = exports = global.fetch; // Needed for TypeScript and Webpack.

if (global.fetch) {
  exports.default = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;
},{}],"../taggy/node_modules/openthesaurus/dist/index.js":[function(require,module,exports) {
"use strict";
/**
 * openthesaurus
 * Copyright (c) 2021 Marvin Schopf
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @copyright 2021 Marvin Schopf
 * @license Apache-2.0
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.get = void 0;
var node_fetch_1 = require("node-fetch");
function asyncForEach(array, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var index;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    index = 0;
                    _a.label = 1;
                case 1:
                    if (!(index < array.length)) return [3 /*break*/, 4];
                    return [4 /*yield*/, callback(array[index], index, array)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    index++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function get(word, options) {
    return __awaiter(this, void 0, void 0, function () {
        var baseUrl, returnSimilar, returnBaseforms, response, responseJson, synsets, responseObject;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    baseUrl = options != null &&
                        options != undefined &&
                        options.baseUrl != null &&
                        options.baseUrl.length >= 1
                        ? options.baseUrl
                        : "https://www.openthesaurus.de/synonyme/search";
                    returnSimilar = options != null &&
                        options != undefined &&
                        options.similar != null &&
                        options.similar != true
                        ? false
                        : true;
                    returnBaseforms = options != null &&
                        options != undefined &&
                        options.baseform != null &&
                        options.baseform != true
                        ? false
                        : true;
                    return [4 /*yield*/, node_fetch_1["default"](baseUrl + "?format=application/json&similar=" + returnSimilar.toString() + "&baseform=" + returnBaseforms.toString() + "&q=" + word)];
                case 1:
                    response = _a.sent();
                    if (response.status != 200) {
                        throw new Error("Error: " + response.status + " " + response.statusText);
                    }
                    return [4 /*yield*/, response.json()];
                case 2:
                    responseJson = _a.sent();
                    synsets = [];
                    return [4 /*yield*/, asyncForEach(responseJson.synsets, function (synset) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                synsets.push(synset);
                                return [2 /*return*/];
                            });
                        }); })];
                case 3:
                    _a.sent();
                    responseObject = {
                        copyright: responseJson.metaData.copyright,
                        warning: responseJson.metaData.warning,
                        license: responseJson.metaData.license,
                        source: responseJson.metaData.source,
                        synsets: synsets,
                        similarTerms: responseJson.similarterms != null &&
                            responseJson.similarterms != undefined &&
                            responseJson.similarterms.length >= 1
                            ? responseJson.similarterms
                            : [],
                        baseforms: responseJson.baseforms != null &&
                            responseJson.baseforms != undefined &&
                            responseJson.baseforms.length >= 1
                            ? responseJson.baseforms
                            : []
                    };
                    return [2 /*return*/, responseObject];
            }
        });
    });
}
exports.get = get;

},{"node-fetch":"../taggy/node_modules/node-fetch/browser.js"}],"../taggy/data/glossar-energy.json":[function(require,module,exports) {
module.exports = {
  "tags": [{
    "name": "Energy Production and Transmission",
    "words": ["abatement options", "abatement plans", "abrasion resistance", "absence of ethanol production", "absence of oxygen", "absence of sulfur", "absorption chillers", "absorption reactions", "absorption vessel", "acacia plantations", "acacia slashes", "acacia species", "acacia stands", "acacia trees", "acacia wood pellet", "acacia woods", "acceptable viscosity", "access cost", "access to carbon financing", "access to electricity use", "Access to energy", "access to energy services", "access to federal land", "access to grid electricity", "access to lighting", "access to modern energy", "access to modern energy project", "access to ocean water", "access to power line", "access to renewable energy resource", "accidental kerosene poisoning", "accumulator", "acid battery charging", "acid battery", "acid car battery", "acid damage", "acid dew point", "acid enzyme", "acid enzyme processes", "acid enzyme process", "acid forest soil", "acid formation", "acid gas", "acid gas removal", "acid gasses", "acid hydrolyses", "acid hydrolysis", "acid hydrolysis processes", "acid hydrolysis process", "acidic agricultural soil", "acidic condensate", "acidic soil", "acid material", "acid mine drainage into groundwater", "acid processes", "acid process", "acid rain affect", "acid rain allowance program", "acid rain deposition", "acid rain occurrence frequency", "acid rain precursor", "acid rain problems", "acid recovery", "acid removal", "active reforestation", "Activities", "Adaptation to climate change", "adaptation to climate changes", "adiabatic coefficient", "adiabatic compression equation", "adiabatic compression", "adiabatic compression of hydrogen", "adiabatic compression work for hydrogen", "adiabatic saturation temperature", "adverse biomass losses", "adverse biomass loss", "agricultural biomass power plant", "agricultural byproduct", "agricultural crop", "agricultural feedstock collection", "agricultural residue emission", "agricultural residue", "agricultural residue lignin", "agricultural residue removal", "air-conditioning contractor", "air drilling", "air-dry", "air emission reduction", "air emissions from power plant", "air feed", "air flow control", "air flow", "air flowing", "Air flows", "air handler", "air handling duct", "air handling", "air handling unit", "air heater by ammonia sulfate salt", "air heater exit temperature", "air heater fouling", "air heater outlet", "air injection", "air leakage", "air leak", "air level", "air mass", "air pollutant environmental impact", "air pollutants for thermal", "air pollutants from coal", "air pollution control equipment", "air pollution damage", "air pollution reduction", "Air Pollution Reductions", "air pollution resulting", "air port", "air preheating", "air quality assessment of cost", "air quality attainment outside", "air quality", "air quality indexes", "Air Quality Index", "air quality indices", "air quality regulation", "air register", "air resource", "air separation", "air separation unit", "air sparger", "air staging", "air staging technology", "air supply compressor", "air supply", "air transport systems", "air zone", "alcohol addition", "alcohol blend", "alcohol distillation", "alcohol fuel plant design", "alcohol plant", "alcohol productions", "alfalfa foliage", "algae need", "algae of sulfur", "algal biomasses", "algal biomass", "algal biotechnology", "algal oil", "algal photosynthesises", "algal photosynthesis", "algal physiology", "algal strain", "algal system", "algorithm development", "aliphatic alcohol", "alkali addition", "alkali content", "alkali level", "alkali material", "alkali metal hydride", "alkaline fly ashes", "alkaline fly ash", "alkaline reagent", "alkaline spent liquor", "alkaline stream", "alkali processing", "alkali-sulfur solid product", "alkali system", "alkali utilization", "alkali vapor removal", "allocation of coal", "allowable ammonia", "allowable amount of ammonia slip", "allowable emission limit", "allowable particulate emission", "alloy content", "alloy liner", "alloy steels", "alpha-plaster", "alternate fuel feed system", "alternate fuel", "alternate fuel vehicle", "alternate price", "alternate production from gases", "alternate production from gas", "alternate production from gasses", "alternative diesel fuel", "alternative electric heater", "alternative energy carrier", "alternative energy power", "alternative energy programs", "alternative energy strategy", "Alternative energy technology", "alternative environmental control", "alternative ethanol fuel industry", "alternative feedstock burning", "alternative-fuel motor fleet program", "alternative gypsum board processes", "alternative gypsum board process", "alternative heating method", "alternative industrial strategy", "alternative methods", "alternative particulate control", "alternative power source", "Alternative power sources", "alternative sustainable energy production", "alternative types of energy production", "alternative valuation", "alternative water flow routing", "alumina content", "aluminous component", "aluminum can", "aluminum from bauxite ore", "aluminum in fly ashes", "aluminum in fly ash", "aluminum trihydrate", "ambient air concentration", "ambient air concentrations of particulate", "ambient air", "Ambient air quality standard", "Ambient Air Quality Standards", "ambient air standard", "Ambient air standards", "ambient concentration", "ambient condition", "american coalition for ethanol", "american coalition on ethanol", "american solar energy society", "ammonia conditioning", "ammonia conditioning system", "ammonia contamination", "ammonia injection", "ammonia injection ratio", "ammonia leaving", "ammonia losses", "ammonia loss", "ammonia manufacture", "ammonia reagent", "ammonia salt", "ammonia slip", "ammonia slip increase", "ammonia stoichiometry", "ammonia sulfate fertilizer", "ammonia sulfate", "ammonia vapor", "ammonium bisulfate", "ammonium nitrite", "ammonium sulfate-nitrate", "amorphous silicon", "amount of power", "amp-hour", "ample cost-competitive option", "ample organic matter", "Anaerobic condition", "anaerobic conditions", "anaerobic digester", "anaerobic digester proposal", "anaerobic digestion system", "anaerobic digestion system proposal", "anaerobic tank digester", "anhydrous alcohol", "anhydrous calcium sulfate", "anhydrous ethanol", "anhydrous ethanol product", "animal fat", "animal manure capacity", "animal manure gasification", "animal waste digester", "animal waste digestion", "animal waste management activity", "animal waste management", "animal waste management system", "anion exchanges", "annual wind speed", "annular combustion chamber", "annular stream", "annular twin vertical", "annulus area", "anthracite culm pile", "anthracite production", "appliance efficiency", "appliance standard", "application efficiency", "application equipment", "approaches", "approach", "aquatic habitat", "aqueous glucose", "arbovirus encephalitises", "arbovirus encephalitis", "arc process welding", "arc welding machine", "areas without electricity", "aromatic extract", "artificial reconstitution system", "artificial reef", "artificial want", "asbestos material", "asbestos removal", "ash characteristic", "ash chemistry", "ash composition", "ash content", "ash deformation", "ash deposit", "ash deposition", "Ash disposal", "ash disposals", "ash figure", "ash flow", "ash flow rate", "ash-free fuel", "ash fusion temperature", "ash impurity", "ash inflow", "ash pond", "ash removal system", "ash resistivity", "ash sale", "ash temperature", "ash transport", "ash variability", "asphalt content of emulsion", "assessment of emission impact", "atmospheric biomass gasification fuel", "atmospheric concentration", "atmospheric conditions", "atmospheric gasification systems", "atmospheric processes", "atmospheric process", "atomic masses", "atomic mass", "atomic methane", "atomization testing", "atomizer system", "automatic control technology", "automatic manufacturing", "automatic shut down", "automatic welder", "automatic wire feeding", "automobile mileage", "automotive sectors", "autonomous state enterprise", "auxiliary boiler equipment", "auxiliary electric cost", "auxiliary electricity cost", "auxiliary energy consumption", "auxiliary equipment", "auxiliary facility", "auxiliary power consumption", "auxiliary power", "auxiliary power requirement", "auxiliary steam generator", "auxiliary truck", "auxiliary use", "availability", "availability of electricity", "aviation gasoline blending component", "back pressure turbine", "back pressure turbo-generators", "backup power", "bacterial decay", "bacterial decomposition", "bacterial fermentation mechanism", "bagasse ash analysis ash mineral", "bagasse cane", "bagasse drying", "bagasse heating", "bagasse moisture", "bagasse shredder", "bagasse surpluses", "bagasse surplus", "bag-filter technology", "bag life", "bag lives", "bag material", "bag tube sheet", "balance", "baling rice straw", "balsam poplar", "barrel oil", "barrels of bitumen", "barrels per day of petroleum", "base gas volume", "baseline emission", "baseline energy demand", "baseline energy demand scenario", "baseline kerosene consumption", "baseline kerosene usage", "base load demand", "base load heat", "base load manner", "basic pyrolysis liquid", "battery charging", "battery charging station", "battery recycling program", "bearing capacity", "bearing compound", "bearing construction material", "bearing fuel", "bearing part", "bearing zone", "bed ashes", "bed ash", "bed boiler", "bed boiler tube", "bed circulating", "bed combustion boiler", "bed combustion businesses", "bed combustion business", "Bed combustion", "bed combustions", "bed combustion system", "bed combustion technology", "bed combustor", "bed counterpart", "bed design", "bed gasification processes", "bed gasification process", "bed height", "bed inventory control", "bed level", "bed masses", "bed mass", "bed material", "bed material in place of limestone", "bed of solid", "bed pressure vessel", "bed quality", "bed system", "bed technology", "bed temperature", "benefits from cleaner air", "benefits of biomass power", "benefit stream", "benign energy", "binary cycle system", "bio-crude-oil", "bio crude oil", "biodegradable material", "bio-diesel", "bio diesel", "Bio-energy", "bio energy", "bio-energy production", "bio-fuel system material testing", "bio-gas pit", "Biogas production", "biogas recovery system", "biogas supply", "biogas technology", "biogas-to-energy generation", "Biogeochemical prospecting", "biological energy production", "biological feedstock", "biological hydrogen production methodology", "biological land reclamation", "biological methane production", "biological nitrogen fixation", "biological process", "biological reduction", "biological waste material", "biomass accumulation", "biomass analyses", "biomass analysis", "biomass availability", "biomass boiler", "biomass capacity", "biomass case", "biomass collection effort", "biomass collection", "biomass collection industry", "biomass combustion", "biomass component", "biomass conversion processes", "biomass conversion process", "biomass conversions", "biomass density", "biomass digester gases", "biomass digester gas", "biomass digester gasses", "biomass electricity production", "biomass electric power plant", "biomass energy generation", "biomass energy producer", "biomass energy production", "biomass energy project", "Biomass energy projects", "biomass energy use", "biomass equivalent", "biomass-ethanol conversion processes", "biomass-ethanol conversion process", "biomass ethanol demonstration plant", "biomass ethanol industry", "biomass ethanol plant", "biomass-ethanol plant location", "biomass-ethanol production facility", "biomass ethanol production", "biomass ethanols", "biomass facility", "biomass fast pyrolysis liquid", "biomass feedstock collection", "biomass feedstock consumption", "biomass feedstock", "biomass feedstock potential", "biomass for cogeneration", "biomass for energy", "biomass-for-energy plantation", "biomass for energy production", "biomass for ethanol production", "biomass-for-ethanol removal", "biomass for power generation", "biomass fuel producer", "biomass fuel production", "biomass gases", "biomass gas", "biomass gasification technology", "biomass gasses", "biomass generation", "biomass harvest", "biomass harvesting foci", "biomass harvesting focuses", "biomass harvesting focus", "biomass harvesting", "biomass-harvesting scenario", "biomass harvesting scenario", "biomass industry", "biomass in energy", "biomass liquefaction product", "biomass liquefaction test facility", "biomass losses", "biomass loss", "biomass material", "biomass operation", "biomass plant", "biomass power capacity", "biomass power emission", "biomass power ethanol", "biomass power facility", "biomass power generation", "biomass-power", "biomass power", "biomass power industry", "biomass power plant", "biomass power production", "biomass power program", "biomass price", "biomass processing", "biomass production facility", "biomass production from sugarcane", "biomass program home", "biomass program", "biomass pyrolysises", "biomass pyrolysis", "biomass pyrolysis liquid property", "biomass pyrolysis oil combustion", "biomass removal", "biomass researches", "biomass research", "biomass residue", "Biomass residues", "biomass residue supply", "biomass resources", "biomass solid", "biomass source", "biomass stock", "biomass substitute", "biomass supply curve", "biomass supply for ethanol", "biomass technology", "biomass-to-energy conversion efficiency", "biomass to energy", "biomass-to-ethanol conversion", "biomass-to-ethanol conversion technology", "biomass-to-ethanol fuel potential", "biomass to ethanol fuel potential", "biomass-to-ethanol", "biomass-to-ethanol industry", "biomass-to-ethanol plant", "biomass-to-ethanol production", "biomass-to-ethanol production industry", "biomass-to-ethanol technology", "biomass-to-ethanol technology statuses", "biomass-to-ethanol technology status", "biomass usage", "biomass using", "biomass utilization", "biomass yield", "bio-oil", "bio oil", "bird", "bisulfate formation", "bituminous coal blend ratio", "bituminous coal corporation", "bituminous coal firing", "bituminous coal industrial corporation", "bituminous coal plant", "bituminous coal power plant", "bituminous coal with ash content", "bituminous crude oil", "bituminous production", "black liquor gasification", "black liquor", "black liquor recovery boiler", "black liquor solid", "blackouts", "black rock", "blade airfoil shape", "bladed rotor", "blade length", "blade profile", "blade strength", "blade vibration frequency calculation", "blenders of gasohol", "blend ratio of anthracite", "blends of ethanol", "blends with methanol", "block production", "block rebate", "block rotor", "block rotors in turbine", "blower door", "blower door test", "blown fluid bed processes", "blown fluid bed process", "boiler auxiliary", "boiler burning", "boiler capacity", "boiler change", "boiler code", "boiler company", "boiler component", "boiler design", "boiler differential", "boiler drum", "boiler efficiency", "boiler equipment", "boiler firing", "boiler furnace", "boiler furnace parameter", "boiler geometry", "boiler house", "boiler in businesses", "boiler in business", "boiler increase", "boiler injection point", "boiler inspection interval", "boiler installation", "boiler island", "boiler issue", "boiler load capacity", "boiler load", "boiler load swing", "boiler load unless injector", "boiler manufacturer", "boiler material", "boiler materials for superheater", "boiler materials selection", "boiler operating condition", "boiler operating factor", "boiler operating parameter", "boiler operation", "boiler owner", "boiler plant component", "boiler plant equipment", "boiler plant", "boiler plant investment", "boiler plant rehabilitation", "boiler pressure", "boiler protection", "boiler retrofit", "boilers burning anthracite coal", "boiler size", "boiler standard", "boiler startup", "boiler supplier", "boiler supply", "boiler technology", "boiler temperature profile", "boiler tube failure", "boiler tuning", "boiler type", "boiler unit", "boiler upgrading", "boiler vessel", "boiler work", "bonded warehouse", "bond payment", "bond proceeds", "bond purchase", "bond reimbursement", "bone dry ton", "bone dry tons of biomass per year", "bone dry tons of biomass residue", "booster pumping station", "border price", "border trade", "border transmission", "bottom ashes", "bottom boiler", "bottom furnace", "bottom line", "bottom quartile", "bridge heating", "briquette fabrication", "briquette production", "briquettes in household", "brown coal combustion", "bubbling bed configuration", "bubbling bed", "bubbling bed regime", "buffers soil", "building code inspector", "building code official", "building code reform", "building code requirement", "building efficiency improvement", "building energy requirement", "building energy use", "built dam", "bulk chemical", "bulk density", "bulk fuel distribution", "bulk fuel", "bulk market trading", "bulky solid fuel handling", "bum fuel", "bundle of energy service", "burn combustion", "burner component", "burner control modification for t", "burner control modification for t's", "burner control modification", "burner design", "burner", "burner ignitor", "burner opening", "burner outlet", "burner region", "burner supplier", "burner system", "burner tuning", "burner type", "burner zone", "burning bagasse", "burning biomasses", "Burning biomass", "burning bituminous coal", "burning characteristic", "burning coal combustor", "burning gases", "burning gas fuel", "burning gas", "burning gasoline", "burning gasses", "burning high-sulfur", "burning lower-sulfur", "burning low sulfur coal", "burning low-sulfur", "burning oil", "burning pellet", "burning power plant", "burning power station", "burning produces emission", "burning rice straw", "burnout air", "bushel", "bushel per acre", "bushels per acre", "calcination method", "calcination reaction", "calcination temperature", "calcium chloride", "calcium chloride spiking", "calcium component", "calcium duct injection", "calcium ion", "calcium salt", "calcium sulfate", "calcium sulfate slurry", "calcium sulfite", "calcium-sulfur reaction", "calorific content", "candidate control technology", "candidate for power production", "cane-ethanol", "cane ethanol", "cane ethanol-water mixture", "cane harvest losses", "cane harvest loss", "cane", "cane industry", "cane juice", "cane knife", "cane knives", "cane leftover", "cane mill", "cane processing", "cane production", "cane stalk", "cane stem yield", "cane sugar factory", "cane sugar industry", "capacity boiler", "capacity expansion rate", "capacity factor", "capacity factor increase", "capacity for electricity generation", "capacity for ethanol production", "capacity investment", "capacity of electricity", "capacity of heat", "capacity shortage", "capacity utilization", "Car batteries", "car battery", "carbon abatement", "carbonaceous material", "carbon assimilation", "carbon atom", "carbon balance", "Carbon balances", "carbon burnout", "carbon capture", "carbon conversion", "carbon cycle researches", "carbon cycle research", "carbon deposit", "carbon dioxide capture", "carbon dioxide cause", "carbon dioxide closer", "carbon dioxide concentration", "carbon dioxide emission quota", "carbon dioxide reduction policy", "carbon dioxide right", "carbon emission result", "carbon emissions coefficient", "carbon energy", "carbon equivalent", "carbon facility", "carbon finance", "carbon finance operation", "carbon financing", "carbon from biomasses", "carbon from biomass", "carbon glucose", "carbon intensities", "Carbon intensity", "carbon intermediate", "carbon loss", "carbon market", "Carbon neutral", "carbon neutrals", "carbon offset", "carbon path", "carbon problem", "carbon ratios", "carbon reduction", "carbon reduction study", "carbon residue", "carbon source", "carbon structure", "carbon sugar", "carbon trading", "carbon xylose", "carbonyl sulfide", "carboxylase reaction", "catalytic conversion", "catalytic reaction", "catalytic reduction", "cellulase enzyme", "cellulase enzyme researches", "cellulase enzyme research", "cellulose ethanol", "cellulose ethanol industry", "cellulose ethanol production", "cellulose feedstock", "cellulose residue", "cellulosic biomasses", "cellulosic biomass", "cellulosic biomass-to-ethanol production", "cellulosic cell wall material", "cellulosic conversion cost issue", "cellulosic conversion", "cellulosic conversion technology", "cellulosic ethanol", "cellulosic ethanol production", "cellulosic ethanol use", "cellulosic feedstock", "cellulosic feedstock supply", "cellulosic material", "cellulosic municipal solid waste residue", "cellulosic nature", "cellulosic residues from crop", "cellulosic waste", "celsius ambient temperature", "cement additive", "cement content", "cement-fly ash mixture", "cement manufacturing industry", "cement particle", "cement paste", "cement production", "cement replacement", "central heating", "central heating thermostat", "central station power plant", "central supply of heat", "central wood pellet factory", "centripetal turbine", "ceramic candle filter", "ceramic filter", "ceramic hot gases", "ceramic hot gas", "ceramic hot gasses", "ceramic tile", "cerium dioxide", "certificate of registration", "certification before production", "certified emission reduction", "certified energy rater", "certified project activity", "certified steel supplier", "cetane level", "charges for district heating", "charges for electricity", "charging car battery", "char nitrogen conversion", "char nitrogen", "char nitrogen using", "cheating", "chemical biomass conversion conference", "chemical biomass conversion", "chemical buffer", "chemical catalysis standard", "chemical catalyst", "chemical composition", "chemical content", "chemical conversion", "chemical criteria", "chemical criterion", "chemical energy carrier", "chemical energy", "chemical energy of hydrocarbon", "chemical energy of hydrogen", "chemical extraction process", "chemical feedstock crop demonstration program", "chemical feedstock", "chemical filler", "Chemical formulae", "chemical formula", "chemical interaction", "chemical manufacturing", "chemical manufacturing industry", "chemical material", "chemical nature", "chemical path", "chemical property", "chemical reactivity", "chemical reforming", "chemical remains", "chemical site preparation", "chemical solution", "chemical species", "Chemical stabilization", "chemical test equipment", "circuit breaker", "circuit during startup", "circular burner technology", "city heat supply", "clarification processes", "clarification process", "clarifier technology", "class c fly ashes", "class c fly ash", "class f coal ashes", "class f coal ash", "class f fly ashes", "class f fly ash", "class f material", "class gas turbine", "classification of gasoline", "classification of plant", "classification of waste", "class of liquid hydrocarbon mixture", "clean air", "clean bagasse", "clean coal combustion", "clean coal combustion technology", "clean coal generation technology", "clean coal power initiative", "clean coal technologies generation", "clean coal technology byproducts", "clean coal technology information system", "clean combustion technology", "clean electricity", "clean energies", "clean energy biomasses", "clean energy biomass", "clean energy future", "clean energy generation", "clean energy industry", "clean energy initiative", "clean energy plan", "cleaner coal", "cleaner emission", "cleaner energies", "Cleaner energy", "cleaner energy system", "cleaner", "cleaner production technology", "clean flue gases", "clean flue gas", "clean flue gasses", "clean gas saturation yeses", "clean gas saturation yes", "clean household cooking fuel", "clean hydrocarbon", "clean hydrogen", "clean hydrogen transportation", "cleaning processes", "cleaning rotor blade", "clean liquid", "cleanly burn high-ash", "clean power case", "clean power", "clean power plan demand", "clean power plan", "clean secondary energy", "clean technologies", "Clean Transport", "clean transports", "cleanup project", "clean use of coal", "clean utilization", "clean water act", "clean water blue", "climate change framework convention", "climate change information", "climate change issue", "climate change mitigations", "climate change negotiation", "Climate change negotiations", "climate change site", "climate change strategies", "climate-friendly program", "climate policy expert", "climate protections", "Climate system", "climate systems", "climate treaty negotiation", "climate zone", "climatic condition", "closed loop biomasses", "closed loop biomass", "closed-loop system", "cloud covers", "cloudy day", "cloudy period", "coal ash fusion temperature", "coal ash", "coal ash well", "coal barge shipment", "coal blend", "coal briquetting", "coal characteristic", "coal coal production", "coal combustion magnetic fluid generation", "coal combustion technology", "coal companies", "coal composition", "coal constituent", "coal consumption mixes", "coal consumption mix", "coal control", "coal data", "coal deposition rate", "coal discharge pipe", "coal dust waste", "Coal endowment", "coal endowments", "coal energy", "coal-exporting country", "coal extraction", "coal extraction site", "coal firing", "coal flow distributor", "coal flow", "coal fly ashes", "coal fly ash", "coal fuel ratio", "coal gasification concept worth", "coal gasification processes", "coal gasification process", "coal generating plant", "coal generation", "coal grind", "coal-handling equipment", "coal heat content", "coal injector", "coal inlet", "coal market module", "coal mine explosion", "coal mineralogy", "coal mud", "coal nozzle clustering", "coal nozzle", "coal oil", "coal outputs", "coal particle", "coal pipelines", "coal pit", "coal pit water utilization rate", "coal planning", "Coal plant", "coal plant owner", "coal plant retirement", "coal plants", "coal power plant", "coal prices", "coal processing", "coal producers", "coal-producing nation", "coal production", "coal properties", "coal pulverizer", "coal quality", "coal quantity", "coal refuse", "coal retirement", "coal rich state", "coal seam methane resource", "coal station", "coal stock", "coal substitute", "coal sulfur content", "coal sulfur level", "coal technology", "coal-to-electricity energy conversion system", "coal-to-electricity source", "coal transportation", "coal type", "coal type lignite", "coal unit", "coal usage", "coal use", "coal utilization", "coal utilization standard", "coal utilization technology", "Coal washing", "coal washings", "coal washing technology", "coated carbon steel", "cod concentration", "cod value", "cogeneration application", "cogeneration efficiency", "cogeneration facility", "cogeneration", "cogeneration of electric power &amp; heat", "cogeneration systems", "coke-making oven", "coke oven gases", "coke oven gas", "coke oven gasses", "coke plant", "cold gas efficiency", "cold reserve constraint", "cold term", "cold water down", "cold water network", "cold water supply", "collection capacity", "collection cost", "collection data", "collection datum", "collection efficiency", "collection method", "collection of heat", "collection of slashes", "collection of slash", "collection of turbine", "collection plate area", "collection plate", "collection system", "collocation of ethanol plant", "collocation synergy", "combustible biomasses", "combustible biomass", "combustion air", "combustion behaviour", "combustion chamber", "combustion change", "combustion characteristic", "combustion control", "combustion control system", "Combustion efficiency", "combustion engineering", "combustion for electricity", "combustion fuel", "combustion in diesel engine", "combustion liner", "combustion meeting", "combustion modification control", "combustion modification", "combustion of biofuel", "combustion of biomasses", "combustion of biomass", "combustion of bio oil", "combustion of briquettes", "combustion of hydrogen", "combustion of lignin", "combustion of pyrolysis liquid", "combustion output", "combustion power company", "combustion power design", "combustion power", "combustion power technology", "combustion processes", "combustion process", "combustion product", "combustion stability", "combustion staging", "combustion stoichiometry", "combustion system", "combustion technology", "combustion temperature", "combustion temperature increase", "combustion test facility", "combustion test", "combustion tuning", "combustion turbine capacity", "combustion turbine", "Combustion turbines", "combustion turbine technology", "combustion turbine unit", "combustor design", "combustors for pyrolysis liquid", "combustor temperature", "combustor vessel", "commercial diesel-engine", "commercial drilling operation", "commercial electricity", "commercial energy efficiency", "commercial energy use per capita", "commercial ethanol fuel", "commercial forest thinning", "commercial furnace", "commercial gas turbine", "commercial hexane", "commercially available gas turbine", "commercial propane", "commercial raw coal", "commercial solar energy industry", "commercial timber harvesting", "commercial timberland", "commercial unit", "compact fluorescent bulb", "compact fluorescent light bulb", "Compact fluorescent light bulbs", "compatible feedstock", "compensatory fertilization", "competition in energy supply", "composition of sugarcane", "comprehensive energy plan", "comprehensive energy planning", "comprehensive energy policy", "compressed air energy use", "compression energy", "compression heat to cooler wall", "compression of hydrogen", "compression ratio", "compression work", "compressive strength", "compressor failure", "concentrations of trace element", "concentric coil", "concentric firing", "concentric firing system", "condensable organic matter", "condensate pump", "condensation processes", "condensation process", "condenser efficiency", "condenser outlet", "condenser pressure as low", "condenser pressure", "condensers during pyrolysises", "condensers during pyrolysis", "condensers use large airflow", "condensing extraction turbine", "condensing type turbo-generator", "congestion", "coniferous boreal forest", "connected household", "constant output fluxes", "constant output flux", "constant-pressure boiler", "constant-pressure operation", "constant quality fuel atomization", "constituent gases", "constituent gas", "constituent gasses", "construction cost", "construction of new coal facility", "construction of power grid", "construction of power network", "consumer acceptance", "consumer energy center list", "consumer energy education", "consumer expenditures for fuel", "consumer fuel cost", "consumer fuel", "consumer fuel price", "consumer of coal", "consumer of energy", "consumption in ethanol distillation", "consumption in ethanol production", "consumption in steam drying", "consumption in sugarcane", "consumption of petroleum", "consumption of power", "consumption of world energy", "continuous fuel combustion", "continuous heat delivery", "contract price of power", "contracts with refinery", "contracts with utility", "convective cooler", "convective heat transfer", "conventional air staging technique", "conventional boiler", "conventional coal combustion fly ashes", "conventional coal combustion fly ash", "conventional coal", "conventional coal power plant", "conventional condensate production", "conventional crude", "conventional crude oil", "conventional diesel fuel", "conventional diesel", "conventional distillation operation", "conventional dry esp", "conventional dry fly ash handling system", "conventional electricity generation", "conventional electricity", "conventional electrostatic precipitator", "conventional energy conversion technology", "conventional energy generating technology", "conventional ethanol feedstock", "conventional ethanol", "conventional ethanol production", "conventional ethanol production using corn", "conventional ethanol project proposal", "conventional fluorescent light fixture", "conventional fly ashes", "conventional fly ash", "conventional fossil fuel", "conventional fossil system", "conventional gases", "conventional gas", "conventional gasoline blending", "Conventional gasoline", "conventional gasolines", "conventional gasses", "conventional gas turbine", "conventional generation", "conventional geothermal energy technology", "conventional heavy-duty combustion turbine", "conventional hydroelectric power", "conventional lighting", "conventional oil production", "conventional onshore field", "conventional petroleum drilling", "conventional power boiler", "Conventional power generation technologies", "conventional power generation technology", "conventional power plant", "conventional spray dryer processes", "conventional spray dryer process", "conventional spray drying", "conventional spray drying system", "conventional steam turbine", "conventional thermoelectric plant", "conventional vertical absorber", "conventional water heating system", "conventional wet alkali system", "conventional wet esps", "conventional wet scrubbing", "conversion efficiencies", "conversion equipment", "conversion facilities", "conversion from gas to liquid", "conversion of biomasses", "conversion of biomass", "conversion of biomass to fuel", "conversion of cellulose to ethanol", "conversion of wood", "conversion of wood to ethanol", "conversion plant processes", "conversion plant process", "conversion processes", "conversion process", "conversion rate", "conversion to ethanol fuel", "conversion to ethanol", "conversion to operation", "conversion yield", "convertible energy", "conveyor pulleys", "conveyor systems", "cook stove", "Cook stoves", "cooling energy requirement", "Cooling system", "cooling tower design", "cooling water system", "cooling water temperature range", "corn cob", "corn conversion processes", "corn conversion process", "corn crop", "corn-ethanol", "corn ethanol", "corn-ethanol yield", "corn feedstock", "corn feedstock price", "corn field", "corn gluten", "corn grain", "corn industry", "corn oil", "corn price", "corn-processing belt", "corn production", "corn refiners association", "corn state", "corn stover", "corn stover inventory", "corn supply", "corn-to-ethanol facility", "corn-to-ethanol production processes", "corn-to-ethanol production process", "corn use for ethanol", "corn utilization", "corrosion product", "corrosion resistance", "corrosive nature", "cost of electricity", "cost of electricity production", "cost of electrolyses", "cost of electrolysis", "cost of emission offset", "cost of energy efficiency measure", "cost of energy-efficient technology", "cost of energy supply", "cost of enzyme", "cost of ethanol", "cost of ethanol production decrease", "cost of ethanol production", "cost of feedstock collection", "cost of feedstock", "cost of forest thinning", "cost of fossil fuel import", "cost of gasoline", "cost of heat", "cost of hydrogen generation", "cost of hydrogen power plant", "cost of hydrogen remains", "cost of particulate", "cost of plant operation", "cost of power production", "cost of production facility", "cost of production much lower", "cost of sugarcane", "cost of wind power", "cost per barrel", "cost per kilowatt", "costs of electricity", "costs of energy production", "costs of energy supply", "costs of ethanol production", "costs of externality", "costs of fuel", "costs of heat production", "costs of hydrogen generation", "cross-border electricity trade", "crude oil blend", "crude oil consumption", "crude oil import shipper", "crude oil input to refinery", "crude oil lease", "crude oil losses", "crude oil loss", "crude oil port", "crude oil production", "crude oil production pluses", "crude oil production plus", "crude oil production plusses", "crude oil refinery input", "crude oil refining capacity", "crude oil stock", "crude oil supply", "crude oil use", "crude production", "crude scale", "crude stream", "cryogenic cold boxes", "cryogenic cold box", "cryogenic container", "cryogenic equipment", "cryogenic liquid", "customer education program", "customer electricity demand", "cycle battery", "cycle chemistry", "cycle power generation plant", "cycles for power production", "cycle system", "cycle technology", "cyclone ash removal", "cyclone boiler", "cyclone efficiency", "cyclone liner life", "cyclone liner lives", "cyclone-type boiler", "cylinder diesel-engine", "cylinders on pyrolysis liquid", "cylindrical pole", "cylindrical tube", "daytime demand peak", "decline in coal production", "decline in energy consumption", "decline in personal consumption expenditure", "declining ethanol demand", "decomposition of manure", "decrease in coal consumption", "dedicated hydrogen infrastructure", "deeper reservoir drilling", "deeper water", "deficit of bagasse fuel", "deficit of heat production", "degree of energy waste", "demand curve", "demand deficit", "demand densities", "demand density", "demand for chemical", "demand forecast", "demand for electricity with supplies", "demand for electricity with supply", "demand for energies", "demand for ethanol feedstock", "demand for ethanol", "demand for factor input", "demand for gas", "demand for gasoline fall", "demand for gasolines", "demand for heat", "demand for low-sulfur coal", "demand for power", "demand for residual fuel oil", "demand for rice straw", "demand for steam", "demand management", "demand peak", "demand stemming", "demonstration power plant", "density of air-dry acacia wood", "density of biomasses", "density of biomass", "dependable power", "dependence on petroleum import", "dependent on fuel source", "depletion allowance", "depletion of energy resource", "depletion rate", "depreciation measure", "depreciation method", "depreciation schedule", "detrital biomasses", "detrital biomass", "dew point corrosion", "dew point mean", "dew point temperatures", "diesel emulsion", "diesel engine combustion chamber", "diesel engine combustion", "diesel engine environment", "diesel for feedstock collection", "diesel fuel consumption", "diesel fuel use", "diesel generator market", "diesel international", "diesel mode", "diesel oil diesel oil", "diesel oil emulsification", "diesel oil emulsion", "diesel oil mixture", "diesel operation", "diesel power", "diesel power plant concepts", "diesel preheating", "diesel tanker", "diesel transportation", "diesel use", "diesel vehicle", "diethyl glycol dimethyl ether", "digester gases", "digester gas", "digester gasses", "digester system", "digital control system", "dilute acid facilities", "dilute acid facility", "dilute acid hydrolyses", "dilute acid hydrolysis", "dilute acid hydrolysis of cellulose", "dilute acid hydrolysis processes", "dilute acid hydrolysis process", "dilute acid pilot", "dilute acid processes", "dilute acid process", "dilute acid process source", "dilute acid technologies", "dilute acid technology", "dilute alcohol brew", "dilute limestone", "dilute phase transfer", "dilute sulfuric acid", "dilute sulfuric acid hydrolysis technologies", "dilute sulfuric acid hydrolysis technology", "dilute sulfuric acid processes", "dilute sulfuric acid process", "direct heating", "direct injection diesel engine", "direct injection single-cylinder", "direct lipid extraction", "direct methanol fuel cell", "dirty power plant", "discharge electrode", "discharge facilities", "discharge facility", "discharge of coal pit water", "discharge port", "discharge profile", "discharging well", "dispersion analyses", "dispersion analysis", "Dispersion model", "dispersion modeling", "dispersion models", "displacement of nutrient", "displacement per kilowatt-hour", "distillate demand", "distillate fuel", "distillate fuel oil consumption", "distillate fuel oil", "distillate sale", "distillery unit", "distillery wastewater", "distilling column maker", "distilling column manufacturer", "distilling column sale", "distribution facilities", "distribution grid", "distribution losses", "distribution loss", "Distribution networks", "distribution of coal", "distribution of coal plant", "distribution of consumer product", "distribution of cost", "distribution of electron", "distribution of energies", "distribution of energy", "distribution of energy supplies", "distribution of energy supply", "distribution of hydrocarbon reserve", "distribution of oil", "distribution of space heating", "distribution of sucrose", "district heating circulation", "district heating networks", "diversion of biomasses", "diversion of biomass", "domestic boiler manufacturer", "domestic boiler supplier", "domestic briquettes industries", "domestic briquettes industry", "domestic capacity in place", "domestic electricity demand", "domestic emission", "domestic emissions reduction commitment", "domestic energy conservation", "domestic energy resource", "domestic energy source", "domestic energy supplier", "domestic ethanol industry expansion", "domestic ethanol production", "domestic exploration", "domestic gases", "domestic gas", "domestic gasses", "domestic heating", "domestic hot water system", "domestic lighting", "domestic natural gas exploration", "domestic natural gas production", "domestic oil consumption", "domestic oil", "domestic oil production", "domestic petroleum", "domestic refinery operation", "domestic refining", "domestic renewable energies", "domestic renewable energy", "domestic renewable energy resource", "domestic supplies", "Domestic supply", "domestic upstream oil", "dominant energy source", "dominant fuel", "drilling activities", "drilling activity", "drilling debris", "drilling platform", "drum boiler", "dry ashes", "dry ash", "dry bagasse capture", "dry bagasse", "dry biomasses", "dry biomass", "dry bulb temperatures", "dry cell batteries", "dry cell battery", "dry cell", "dry coal feeding system", "dry esp", "dry eucalyptus wood", "dry feed system", "dry fly ashes", "dry fly ash", "dry gases", "dry gas filter", "dry gas", "dry gas production", "dry gasses", "dry natural gas production", "dry raw acacia wood", "dry scrubbing", "dry scrubbing system", "dry steam field", "dry steam", "dry steam power plant", "dry steam power plant schematic pipe", "dry steam power plants use", "dry tons of biomasses", "dry tons of biomass", "dry tons of biomass per year", "dry tons per year of biomasses", "dry tons per year of biomass", "dry wood", "dry wood masses", "dry wood mass", "durability of gas turbine", "dust content", "dust spraying", "dynamics of power production", "e-beam dosage", "e-beam dose necessaries", "e-beam dose necessary", "e-beam", "e-beam process chamber", "e-beam processes", "e-beam process", "e-beam system", "e-beam technologies", "e-beam technology", "effect of emission", "effect of ethanol plant operating capacities", "effect of ethanol plant operating capacity", "effect of ethanol price", "effect of ethanol sale", "effect of fuel oil properties", "effect of fuel oil property", "efficiency improvement", "efficiency investment", "efficiency of energy conversion", "efficiency of energy facilities", "efficiency of energy facility", "efficiency of energy production", "efficiency of energy utilization", "efficiency of esps", "efficiency of hydrogen fuel cell", "efficiency of hydrogen production", "efficiency potential", "efficient black liquor", "efficient burner", "efficient electrical generation technologies", "efficient electrical generation technology", "efficient electrical power plant", "efficient electrical power station", "efficient electric power plant", "efficient energy conversion", "efficient energy future", "efficient esp operation", "efficient fluorescent light", "efficient fuel cell", "efficient fuel cell option", "efficient fuel cell vehicle", "efficient internal combustion engine drying", "efficient internal combustion engine", "efficient internal combustion", "efficient lighting", "efficient power plant", "efficient power station", "efficient power station using", "efficient use of biomass fuel", "electrical capacities", "electrical cooperative", "electrical generation capacities", "electrical generation capacity", "electrical generation", "electrical generator", "Electrical output", "electrical outputs", "electrical power generation", "electrical power production", "electrical power sector", "electrical production", "electrical property", "electrical rating", "electrical resistivities", "electrical storage device", "Electrical storage devices", "electrical systems", "electrical technologies", "electrical technology", "electrical transmission", "electric bill", "electric converters", "electric end-uses", "electric energies", "electric energy", "electric engine", "electric furnace", "electric generating capacities", "electric generating capacity", "electric generation capacities", "electric generation capacity", "electric grid", "electric heater bear", "electric heater", "electric industry", "electricity capacity", "electricity cogeneration", "electricity-consuming equipment", "electricity demand reduction", "electricity exchange", "electricity for sale", "electricity from biomasses", "electricity from biomass", "electricity from lignin combustion", "electricity from wind energy system", "electricity from wind", "electricity generation capacity", "electricity generation costs", "electricity generation efficiencies", "electricity generation efficiency", "electricity generation market", "electricity generation mixes", "electricity generation mix", "electricity generation plant", "electricity generation technologies", "electricity generation technology", "electricity grid development", "electricity option", "electricity outages", "electricity plant conversion", "electricity plant equipment industry", "electricity producer", "electricity rates", "electricity reliability", "electricity sales", "electricity saving", "Electricity supplies", "Electricity supply", "Electricity trade", "electricity trades", "electricity usage", "electric lines", "electric line siting", "electric market", "Electric networks", "electric output", "electric plant", "Electric Plants", "electric power demands", "electric power development", "electric power generator", "electric power interconnection", "Electric power plant conversion", "Electric power plants", "electric power requirement", "electric power shortage", "electric power substations", "electric power system", "electric power transmission lines", "electric production", "electric sale", "electric service", "electric supplies", "electric supply", "electric system", "electric tariff", "electric transformers", "electric transmission", "electric water heating", "electrolyses", "electron donor", "emergency ash storage", "emergency battery storage", "emergency oil stockpile", "emission abatement", "emission abatement strategies", "emission abatement strategy", "emission cap", "emission cap program", "emission control option", "emission control requirement", "emission controls", "emission control strategies", "emission control strategy", "emission control system", "emission control technique", "emission factor", "Emission factors", "emission impact", "Emission level", "emission limitation", "emission performance", "emission rate", "Emission rates", "emission reduction", "Emission regulation", "emission regulations", "emission release", "emission release rate", "emissions allowance", "emissions calculation", "emissions data", "emissions datum", "emissions due to ethanol transport", "emissions due to feedstock transport", "emissions due to lignin", "emissions from coal combustion", "emissions from coal", "emissions from coal plant", "emissions from coke oven", "emissions from energies", "emissions from energy generation", "emissions from energy", "emissions from ethanol transportation", "emissions from feedstock", "emissions from fire", "emissions from power plant", "Emissions from transport", "emissions from transports", "emissions of coal", "emissions of methanes", "emissions of nitrogen oxide", "emissions of sulfur dioxide", "emissions reduction calculation", "emissions reduction", "emissions reduction potential", "emissions regulation", "emission standards for coal", "emissions with limitation", "employee earnings", "emulsification of pyrolysises", "emulsification of pyrolysis", "emulsifications", "emulsion production", "emulsion system", "emulsion use in diesel engine", "end-use energy activities", "end-use energy activity", "energy alternative", "energy assessment", "energy authority", "energy buyers", "energy carrier", "Energy carriers", "energy center", "energy components", "energy conservation management system", "energy conservation rate", "energy conservation studies", "Energy consumers", "energy-consuming industrial", "energy consumption for plant", "energy consumption statistic", "energy content of ethanol", "energy convergence", "energy conversion efficiencies", "energy conversion efficiency", "energy conversion management", "energy conversion system", "energy cost saving", "energy costs", "energy creditors", "energy crop production", "energy demand", "energy departments", "energy development divisions", "energy distribution systems", "energy diversification", "energy efficiency", "energy efficiency investment", "Energy efficiency investments", "energy efficiency plans", "energy expenditure", "Energy expenditures", "energy exploration", "energy extraction", "energy facilities", "energy facility sites", "energy forms", "Energy generation", "energy generation system", "energy-guzzling computer device", "energy industries", "energy inefficiency", "energy in ethanol", "energy input", "Energy Intensity", "energy intensive appliance", "energy interventions", "energy investment", "energy loss reduction facility", "energy management authorities", "energy management authority", "energy market development", "energy marketing", "Energy markets", "Energy metering", "energy mineral", "energy mix", "energy office", "energy official", "Energy operations", "energy outcomes", "energy outlook", "energy outputs", "energy payback ratio", "energy payments", "energy planner", "energy plantation", "Energy plantations", "Energy plants", "energy policy analyses", "energy policy analysis", "energy ponds", "energy price projection", "energy pricing", "energy problems", "energy processes", "Energy producers", "energy producing enterprise", "energy production activities", "energy production activity", "energy production capabilities", "energy production capability", "energy production capacities", "energy production capacity", "energy production chain comprising", "energy production coefficient", "energy production conversion", "energy production cost", "energy production cost saving", "energy production cutback", "energy production effort", "energy production equation", "energy production excise tax credit", "energy production expenditure", "energy production facility construction", "energy production field", "energy production fluid", "energy production from biomasses", "energy production from biomass", "energy production from lignin", "energy production function coefficient", "energy production function", "energy production gain", "energy production", "energy production incentive", "energy production increase", "energy production manager", "energy production of ethanol", "energy production operation", "energy production per capita", "energy production plant", "energy production processes", "energy production process", "energy production rate", "energy production requirement", "energy production run", "energy production scenario", "energy production site", "energy production strategies", "energy production strategy", "energy production system", "energy production technique", "energy production technologies", "energy production technology", "energy production volume", "energy production zone", "energy products", "energy program office", "energy programs", "energy purchase costs", "energy purchases", "energy rationalization", "energy recycling system", "energy regulatory commissions", "energy reserve", "energy resource", "energy review", "energy-saving technologies", "energy-saving technology", "Energy scenarios", "Energy sector", "energy sector networks", "energy sector reviews", "energy sectors", "energy services", "Energy shortages", "Energy storage devices", "energy strategies", "energy structure", "energy suppliers", "energy supply capacities", "energy supply capacity", "energy supply industries", "energy supply interruption", "Energy systems", "energy tariffs", "energy tax credits", "energy traders", "energy trading managers", "Energy transmission", "energy transport", "energy upgrade", "Energy usage", "energy usages", "energy utilization rate", "engine reconstruction", "Environmental consequence", "environmental consequences", "environmental downside", "environmental impact", "environmental performance", "Environmental technologies", "enzymatic hydrolyses", "enzymatic hydrolysis", "enzymatic hydrolysis processes", "enzymatic hydrolysis process", "enzyme cellulase", "enzyme processes", "enzyme process", "enzymes for carbohydrate conversion", "enzyme technologies", "enzyme technology", "equilibrium prices for ethanol", "esp buildup", "esp collecting", "esp collection efficiencies", "esp collection efficiency", "esp design", "esp efficiencies", "esp efficiency", "esp fly ashes", "esp fly ash", "esp improvement", "esp performance", "esp performance problem", "esp power supplies", "esp power supply", "esp problem", "esp rehabilitation", "esp size", "ester fuel", "ethanol alternative", "ethanol blending", "ethanol capacities", "ethanol capacity", "ethanol case", "ethanol consumption", "ethanol conversion", "ethanol conversion system", "ethanol data", "ethanol datum", "ethanol demand growth", "ethanol demand", "ethanol dissolve", "ethanol distillation", "ethanol distribution", "ethanol diversion", "ethanol emission", "ethanol expenditure", "ethanol facilities", "ethanol facility", "ethanol feedstock", "ethanol fermentation", "ethanol from biomasses", "ethanol from biomass", "ethanol from biomass source", "ethanol from cellulose", "ethanol from corn", "ethanol-gasoline blend", "ethanol-gasoline blending", "ethanol gasoline", "ethanol ignition", "ethanol import", "ethanol incentive", "ethanol industries", "ethanol industry expansion", "ethanol industry", "ethanol in gasoline", "ethanol investment", "ethanol manufacturing", "ethanol market", "ethanol market price", "ethanol operation", "ethanol output", "ethanol parallel", "ethanol plant capacities", "ethanol plant capacity", "ethanol plant construction", "ethanol plant construction project", "ethanol plant emission", "ethanol plant", "ethanol plant location", "ethanol plant modeling", "ethanol plant model land", "ethanol plant operation", "ethanol plant personnel", "ethanol plant type", "ethanol power", "ethanol power plant", "ethanol price", "ethanol price projection", "ethanol processing", "ethanol producer", "ethanol-producing mill", "ethanol product", "ethanol production activities", "ethanol production activity", "ethanol production analyses", "ethanol production analysis", "ethanol production capacities", "ethanol production capacity", "ethanol production cost function", "ethanol production cost", "ethanol production emission", "ethanol production facilities", "ethanol production facility", "ethanol production feasibilities", "ethanol production feasibility", "ethanol production feedstock", "ethanol production from corn", "ethanol production", "ethanol production increase", "ethanol production industries", "ethanol production industry", "ethanol production infrastructure", "ethanol production operation", "ethanol production per year", "ethanol production processes", "ethanol production process", "ethanol production supply chain", "ethanol production yield", "ethanol program", "ethanol raw material", "ethanol sale", "ethanol shortage", "ethanol storage", "ethanol studies", "ethanol study", "ethanol supplies", "ethanol supply", "ethanol target price", "ethanol tax credit", "ethanol tax incentive", "ethanol tax subsidies", "ethanol tax subsidy", "ethanol to petroleum", "ethanol to storage terminal", "ethanol to wastewater volume", "ethanol transportation", "ethanol transport", "ethanol with gasoline", "ethanol yield", "ethylene propylene", "eucalypt capture efficiencies", "eucalypt capture efficiency", "eucalypt harvest", "eucalypt planation", "eucalypt plantation", "eucalypt plantation maintenance", "eucalypt species", "eucalypt stand", "eucalypt tree biomasses", "eucalypt tree biomass", "eucalypt tree plantation", "eucalyptus plantation", "eucalyptus species", "eucalyptus stand", "eucalyptus tree", "eucalyptus wood", "eucalypt wood", "evaluation of biomasses", "evaluation of biomass", "evaporative emission", "excess electrical energies", "excess electrical energy", "excess electricities", "excess electricity", "exchange rate conversion factor", "exothermic hydration", "exploitable gas reserves", "exploratory drilling program", "external heat exchanger", "external heating", "externality analyses", "externality analysis", "external silo combustor", "external tank", "extraction of landfill gases", "extraction of landfill gas", "extraction of landfill gasses", "extraction of lignite", "extraction of silica", "extraction turbo-generators", "extractive operation", "extractive petroleum sector", "facilities", "facility", "factory power", "fair transmission access", "fair transmission policies", "fair transmission policy", "fan power", "fan power requirement", "fan speed", "farm-grown biomasses", "farm-grown biomass", "faster wind", "fast pyrolysises", "fast pyrolysis fuel", "fast pyrolysis", "fast pyrolysis liquid", "fast pyrolysis of biomasses", "fast pyrolysis of biomass", "fast pyrolysis of cellulose", "fast pyrolysis of forestry residue", "fast pyrolysis oil in turbine", "fast rotating wind turbine", "federal ethanol subsidies", "federal ethanol subsidy", "federal ethanol tax credit", "federal ethanol tax incentive", "federal fuel tax exemption for ethanol", "federal fuel tax exemption", "federal gasoline excise taxes", "federal gasoline excise tax", "federal power act", "federal power commission", "feedstock availabilities", "feedstock availability", "feedstock availability report", "feedstock categories", "feedstock category", "feedstock collection", "feedstock collection region", "feedstock competition", "feedstock consumption", "feedstock cost", "feedstock credit", "feedstock demand", "feedstock development program", "feedstock for ethanol", "feedstock for ethanol production", "feedstock handling", "feedstock handling state", "feedstock", "feedstock incentives incentive", "feedstock material", "feedstock price", "feedstock processing system", "feedstock recycling", "feedstock removal", "feedstock resource", "feedstocks collection equipment", "feedstock selection", "feedstocks for ethanol production", "feedstock source", "feedstock supplement for ethanol plant", "feedstock supplement for ethanol production", "feedstock supplies", "feedstock supply", "feedstock to ethanol plant", "feedstock to power plant", "feedstock transportation", "feedstock transport", "feedstock truck transport activities", "feedstock truck transport activity", "feedstock usage", "fermentable sugar content", "fermentation efficiencies", "fermentation efficiency", "fermentation industries", "fermentation industry", "fermentation of corn", "fermentation of sugar by enzyme", "fermentation processing technologies", "fermentation processing technology", "fermentation temperature", "fermentation yield of ethanol", "fermentative organism", "ferric oxide hydrate", "fertilizer treatment", "financial covenant", "firewood-saving stove", "first-stage unburned fuel", "fiscal year electricity production", "fiscal year eligibility window", "flame coal nozzle", "flame radiation", "flame-retarding filler", "flame scanner", "flame speed", "flame stabilities", "flame stability", "flame stabilization component", "flame stabilization", "flame stabilizer", "flame temperature", "flame tunnel test", "flame zone", "flash steam", "flash steam power plant", "flow mechanics", "flue gas conditioning", "flue gas desulfurizations", "Flue gas emission", "flue gas emissions", "flue gas entering", "flue gas environment", "flue gas exiting", "flue gas flow circuit", "Flue gas", "flue gas residence time", "flue gas temperature", "fluorescent ballast", "fluorescent fixture", "fluorescent lamp", "Fluorescent lamps", "fly ash alkalies", "fly ash alkali", "fly ash characteristic", "fly ash contamination", "fly ash erosion", "fly ashes", "fly ash in concrete", "fly ash particle", "fly ash properties", "fly ash property", "fly ash removal", "fly ash solid", "foreign conservation technologies", "foreign conservation technology", "forest biomasses", "forest health problem", "forest material", "forest residue", "forestry resource", "forestry waste", "forest sanitation", "forests for ethanol production", "forest site", "forest thinning", "forest woody matter", "fossil energy expense", "fossil energy", "fossil energy program", "fossil energy requirement", "fossil fuel accumulation", "fossil fuel burner", "fossil fuel competitor", "Fossil fuel consumption", "fossil fuel consumptions", "fossil fuel counterpart", "fossil fuel development", "fossil fuel electricity production", "fossil fuel emissions", "fossil fuel endowment", "fossil fuel energy input", "fossil fuel energy system", "fossil fuel export", "fossil fuel facilities", "fossil fuel facility", "fossil fuel imports", "fossil fuel plant", "fossil fuel power plant", "fossil fuel powers", "fossil fuel prices", "fossil fuel reserves", "fossil", "fossil hydrocarbon", "fossil power plant", "Fossils", "fossil source", "free energies", "free energy consumption", "free energy expenditure", "free energy from sugarcane", "fuel alcohol production", "fuel ashes", "fuel ash", "fuel atomization", "fuel bill", "Fuel bills", "fuel burette", "fuel cell development", "fuel cell efficiencies", "fuel cell efficiency", "fuel cell option", "fuel cell stack", "fuel cell technologies", "fuel cell technology", "fuel cell vehicle", "Fuel cell vehicles", "fuel chains", "fuel consumption relative", "fuel conversion", "fuel cooling", "fuel costs", "fuel cycle", "fuel demand", "fuel ethanol", "fuel ethanol industries", "fuel ethanol industry", "fuel ethanol production", "fuel excise tax exemption", "fuel exploit", "fuel extraction", "fuel feeding system", "fuel for aviation", "fuel for electricity generation", "fuel for fuel cell", "fuel for gas turbine", "fuel for power generation", "fuel handling facilities", "fuel handling facility", "fuel handling", "fuel heat", "fuel heating", "fuel improvement", "fuel inventories", "fuel inventory", "fuel markets", "fuel nitrogen", "fuel oil emulsion", "fuel production cycle", "fuel production", "fuel products", "fuel properties", "fuel property", "fuel quality", "fuel quantities", "fuel quantity", "fuel ratio", "Fuel refinement", "fuel reformulation", "fuel requirement", "fuel shortages", "fuels in diesel engine", "fuels in diesel engines various author", "fuel specification", "fuel staging", "fuel storage capacities", "fuel storage capacity", "fuel storage", "fuel substitution", "fuel sulfur content", "fuel sulfur", "fuel supply", "fuel switching", "fuel system", "fuel transportation emission", "fuel transport cost", "fuel treatment module", "fuel treatment system logic", "fuel type", "fuel utilization efficiencies", "fuel utilization efficiency", "fuel volume", "furnace access", "furnace ash removal", "furnace ash removal under pressure", "furnace bulk residence", "furnace cavities", "furnace cavity", "furnace condition", "furnace design", "furnace exit", "furnace exposure", "furnace exposure testing", "furnace heat transfer surface", "furnace height", "furnace outlet", "furnace temperature", "furnace test", "furnace wall", "gas analyst", "gas atom", "gas atomization", "gas boiler", "gas carrier", "gas cleanup equipment", "gas cleanup", "gas cleanup system", "gas companies", "gas condensate", "gas constituent", "gas consumption", "gas cooler", "gas cooling", "gas cost", "gas delivery", "gas depletion policies", "gas depletion policy", "gas deposition", "gas desulfurization", "gas desulfurization system", "gas development", "gas distribution networks", "gas economies", "gas economy", "gaseous ammonia", "gaseous fossil fuel", "gas facilities", "gas filter performance", "gas filter system", "gas flaring reduction", "gas flows", "gas formation", "gas furnace", "gas hub", "gas hydrates", "gasification island", "gasification of biomasses", "gasification of biomass", "gasification plants", "gasification power plant", "gasification processes", "gasification process", "gasification section", "gasification system", "gasification technologies", "gasification technology", "gasification vessel", "gas leasing program", "gas lines", "gas mixture", "gas moisture", "gas network cost", "gasohol market", "gasohol use", "gasoline blend", "gasoline blending component", "gasoline blending", "gasoline car emission reduction", "gasoline categories", "gasoline category", "gasoline components", "gasoline consumption", "gasoline distribution", "gasoline energy demand", "gasoline excise taxes", "gasoline excise tax", "gasoline excise tax rate", "gasoline generator", "gasoline markets", "gasoline octane booster", "gasoline octane enhancer", "gasoline pools", "gasoline price correlation", "gasoline price increase", "gasoline production", "gasoline pump price", "gasoline regulation", "gasoline replacement", "gasoline tax rate", "gasoline terminal", "gasoline use", "gasoline volume extender", "gas output", "gas pipeline certification", "gas pipeline system mileage", "gas pipeline systems", "gas pool", "gas power plants", "gas pressure drop", "gas price variable normal", "gas processing plants", "gas producers", "gas production facilities", "gas production", "gas profile", "gas properties", "gas property", "gas ratio", "gas reservoir formation", "gas reservoir", "gas residence time", "gas residential water heater", "gas right", "gas rig", "gas shift processes", "gas shift process", "gas station test", "gas storage level", "gas storage reservoir", "gas streams", "gas supply more", "gas systems", "gas temperature", "gas transportation capacities", "gas transportation capacity", "gas transportation network", "gas turbine application", "gas turbine blade material", "gas turbine blade problem", "gas turbine characteristic", "gas turbine combustion", "gas turbine combustor", "gas turbine compressor", "gas turbine engine running", "gas turbine exhaust", "gas turbine lifetime", "gas turbine output", "gas turbine system", "gas turbine technologies", "gas turbine technology", "gas unit", "gas velocities", "gas velocity", "gas wells", "generating capacities", "generating capacity", "generation", "generation of heat", "generation of hydroelectricities", "generation of hydroelectricity", "generation of hydrogen", "generation system", "generator sales", "generator sectors", "generator traders", "generator unit", "geological condition", "geothermal activities", "geothermal activity", "geothermal capacities", "geothermal capacity", "geothermal capital cost", "geothermal development", "geothermal drilling", "geothermal education office", "geothermal electric", "geothermal electricities", "geothermal electricity generation", "geothermal electricity", "geothermal electric production", "geothermal energy industries", "geothermal energy industry", "geothermal energy production", "geothermal energy program", "geothermal energy resource", "geothermal energy scheme", "geothermal environment", "geothermal equipment", "geothermal expert", "geothermal explorations", "geothermal field", "geothermal fluid", "geothermal generation", "geothermal heat pump", "geothermal hydropower", "geothermal industries", "geothermal industry", "geothermal installation", "geothermal operation", "geothermal phenomena", "geothermal phenomenon", "geothermal plant construction", "geothermal plant efficiencies", "geothermal plant efficiency", "geothermal power capacities", "geothermal power capacity", "geothermal power crust", "geothermal power making", "geothermal power plant operation", "geothermal power plant showing", "geothermal power production", "geothermal power station", "geothermal power technologies", "geothermal power technology", "geothermal production", "geothermal productivities", "geothermal productivity", "geothermal projects", "geothermal reservoir", "geothermal resource", "Geothermal resources", "geothermal scheme", "geothermal sector", "geothermal site", "geothermal sources", "geothermal station", "geothermal steam", "geothermal systems", "geothermal technologies", "geothermal technology", "geothermal well", "Geothermal wells", "global emission", "global energy demand", "global energy supplies", "Global energy supply", "global greenhouse gas emission", "global greenhouse gases", "global greenhouse gas", "global greenhouse gas output", "global greenhouse gasses", "global wind generating capacities", "global wind generating capacity", "grades of kerosene", "greater use of coal cleaning", "green building communities", "green building community", "green building program", "green commercial building", "green energies", "green energy entrepreneur", "green energy", "green energy production", "Green field", "green fields", "greenhouse gas control", "greenhouse gas credit", "Greenhouse gas emission reduction", "greenhouse gas emission reductions", "greenhouse gas emission reductions on behalf", "greenhouse gas emissions in conjunction", "greenhouse gas emissions of fuel ethanol", "greenhouse gas emissions per vehicle mile", "greenhouse gas reduction", "greenhouse gas regulatory system", "green leaf", "green leave", "green light", "green power effort", "green power", "green power marketer", "green power product", "green power program", "green power provider", "green power purchasing", "green pricing product", "green wood", "green wood value", "grid application", "grid avoidance", "grid calculation", "grid characteristic", "grid code generation", "grid-connected rural household", "grid-connected solar electricities", "grid-connected solar electricity", "grid connection", "grid database", "grid electricity service", "grid emission", "grid fee-for-service concession", "grid integration", "grid maintenance cost", "grid market", "grid reliabilities", "grid reliability", "grid renewable energies", "grid renewable energy", "grid rural home", "grid suppliers", "grid supplies", "grid system", "gross coal export", "gross coal import", "gross domestic product data", "gross domestic product datum", "gross electricity generation", "gross heat content", "gross heating value", "gross oil import", "gross output", "gross power output", "gross receipt", "gross withdrawal", "gross withdrawals less gases", "gross withdrawals less gas", "gross withdrawals less gasses", "ground standing biomasses", "ground standing biomass", "growth in demand for electricities", "growth in demand for electricity", "growth rate of corn", "hazardous gases", "hazardous gas", "hazardous gasses", "heat balances", "heat deliveries", "heat delivery", "heat demand analyses", "heat demand analysis", "heat demand forecast", "heat demand", "heat demand of building", "heat demand peak", "heat distribution", "heat distribution networks", "heat distribution pattern", "heat district", "heat duties", "heat duty", "heated digester", "heated geothermal fluid", "heated underground water", "heat energies", "heat energy consumption", "heat energy demand", "heat energy", "heat engineerings", "heater fouling", "heaters", "heat exchange", "heat exchanger", "heat exchanger liner", "heat exchange surface", "heat flow", "heat generation", "heat generation plants", "heating energies", "heating energy", "heating rates", "heating value control", "heating value of wood", "heat input", "heat insulations", "heat load capacities", "heat load capacity", "heat load densities", "heat load density", "heat meter", "heat metering", "heat of reaction", "heat output", "heat pricing studies", "heat production capacities", "heat production capacity", "heat production capacity requirement", "heat production plant", "heat pump technologies", "heat pump water heater", "heat rate", "heat rate improvement", "heat recovery system", "heat recovery unit", "heat release rate", "heat resistant", "heat sale", "heat support", "heat tariff", "heat tariff structure", "heat tariff studies", "heat tariff study", "heat transfer characteristic", "heat transfer surface", "heat transfer technologies", "heat transfer technology", "heat transmissions", "heat utilities", "heat utility", "heat value", "heat value of bagasse", "heat waves", "heavy gases", "heavy gas", "heavy gasses", "heavy naphtha boiling range", "heavy oil basin", "heavy oil deposition", "heavy petroleum oil", "heavy pyrolysis liquid", "heavy rainfall season", "heavy reliance", "heavy slagging", "hemicellulose", "hemihydrate", "high alkalinities", "high alkalinity", "high altitude", "high aluminum saturation", "high ambient temperature", "high ash-coals", "high-ash coal waste", "high ash content", "high ash fusion temperature", "high-ash", "high ash loading", "high average biomass yield", "high average wind", "high biomasses", "high biomass", "high biomass production", "high capacity power generating unit", "high cellulose content", "high-cetane", "high chloride concentration", "high-chrome material", "high coal concentration", "high coal use", "high cost of energies", "high cost of energy", "high cost of new generating equipment", "high cost of transportation", "high-cycle fatigue damage", "high electricity demand", "high energy consumption", "high energy content", "high energy densities", "high energy density", "high energy intensities", "high energy losses", "high energy loss", "higher boiler efficiencies", "higher boiler efficiency due", "higher boiler efficiency", "higher coal chloride", "higher coal velocities", "higher coal velocity", "higher concentration of hydrocarbon", "higher emission level", "higher energy consumption", "higher energy demand", "higher energy price", "higher ethanol", "higher fly ashes", "higher fly ash", "higher fuel viscosities", "higher fuel viscosity", "higher furnace temperature", "higher gases", "higher gas", "higher gasses", "higher pollutant emission", "higher pressure boiler", "high ethanol demand", "high ethanol", "high ethanol price", "high exploration", "high feedstock", "high flue gas particulate", "high gas price", "high gas temperature", "high gas velocities", "high gas velocity", "high-grade energies", "high-grade energy", "high-grade metallic ore", "high head load densities", "high head load density", "high heating value", "high hydrogen to oxygen ratio", "high infrastructure", "high lipid content", "high losses of crude", "high nitrogen", "high octane mixture", "high-oxygen gasoline", "high oxygen gasoline", "high-ph slurries", "high-ph slurry", "high plant capacities", "high plant capacity", "high plant efficiencies", "high plant efficiency", "high-pressure boiler", "high pressure boiler", "high-pressure header", "high-pressure operation", "high-pressure pumps both fuel", "high-pressure stage", "high-pressure steam", "high-pressure turbine", "high quality fuel", "high-quality lime", "high-resistivity ashes", "high-resistivity ash", "high silica content", "high solar reflectance", "high sulfate concentration", "high-sulfur application", "high-sulfur coal", "high sulfur content", "high-sulfur fuel", "high sulphur content", "high-temperature component", "high temperature gradient", "high-temperature header", "high-temperature particulate", "high-temperature pressure", "high-temperature reaction", "high-temperature region", "high temperature steam", "high-temperature waste heat", "high thermal gradient", "high-velocity circulating", "high volatile coal", "high volatile matter", "high-voltage electric power", "high-volume fly ash", "highway deterioration", "highway diesel engine", "historical gasoline component", "hopper heater", "horizontal-axis type", "horizontal-axis wind machine", "horizontal solar cell", "horizontal solar cell panel", "hot dry rock energies", "hot dry rock energy", "hot dry rock geothermal powers", "hot dry rock geothermal technologies", "hot dry rock geothermal technology", "hot dry rock", "hot dry rock reservoir", "hot dry rock resource", "hot filtration", "hot flue gases", "hot flue gas exiting", "hot flue gas", "hot flue gasses", "hot gas cleanup", "hot gas cleanup processes", "hot gas cleanup process", "hot gas component", "hot gas filter development", "hot gas filter", "hot gas", "hot gasses", "hot geothermal fluid", "hot rock", "hot spring", "hot vapour filtration", "hot water amount", "hot water consumer", "hot water customer", "hot water cylinder jacket", "hot water heater", "hot water market", "hot water meter", "hot water pressure", "hot water service", "hot water supplies", "hot water supply", "hot water system", "household electricity consumption", "household electricity price", "household electricity tariff", "huge emission", "humidification conditioning", "humidification point", "humidification system", "hybrid design", "hybrid-diesel car", "hybrid esp", "hybrid mini-grid system", "hybrid poplar", "hybrid willow", "hydrate volume estimate", "hydration processes", "hydration process", "hydraulic lift", "Hydraulic Test", "hydride storage material", "hydride storage of hydrogen", "hydrocarbon control", "hydrocarbon fuel", "Hydrocarbon fuels", "hydrocarbon gases", "hydrocarbon gas", "hydrocarbon gasses", "hydrocarbon precursor", "hydrocarbon radical", "hydrodynamic calculation for vertical", "hydroelectric generator", "hydroelectric output", "hydroelectric potential", "hydroelectric power generation", "Hydroelectric power stations", "hydroelectric renewable resource", "hydroelectric stations", "hydrogen as energy carrier", "hydrogen at filling station", "hydrogen atom", "hydrogen by electrolyses", "hydrogen by electrolysis", "hydrogen by liquefaction", "hydrogen compressor", "hydrogen conversion efficiencies", "hydrogen conversion efficiency", "hydrogen distribution", "hydrogen energy equivalent", "hydrogen energy", "hydrogen energy system", "hydrogen flow", "hydrogen for fuel cell", "hydrogen from biomasses", "hydrogen from biomass", "hydrogen from coal", "hydrogen from sunlight", "hydrogen fuel-cell car", "hydrogen fuel cell", "hydrogen fuel cell vehicle", "hydrogen fuel initiative", "hydrogen gases", "hydrogen gas", "hydrogen gasses", "hydrogen generation", "hydrogen infrastructure", "hydrogen liquefaction", "hydrogen plant", "hydrogen power plant", "hydrogen production", "hydrogen production water", "hydrogen solution", "hydrogen storage", "hydrogen sulfide emission", "hydrogen trade", "hydrogen transport by truck", "hydrogen truck", "hydrogen yield", "hydrolysis approaches", "hydrolysis approach", "hydrolysis of cellulose", "hydrolysis processes", "hydrolysis process", "hydrolysis step", "hydrolysis to glucose", "hydro plant", "hydropower generation", "hydro power plant", "hydropower plant", "hydropower program", "hydro powers", "hydropowers", "hydro power station", "hydropower technologies biomasses", "hydropower technologies biomass", "hydro renewable source", "hydro-system", "hydrothermal energies", "hydrothermal resource", "hydro-thermal system", "hydroxyl group", "hydroxyl radical", "hypothetical biomasses", "hypothetical biomass", "hypothetical fuel", "hypothetical plant", "idle power plant", "ignition delay", "ignition improver addition", "ignition improver", "ignition nozzle", "ignition nozzle with diesel oil", "ignition properties", "ignition properties of emulsion", "ignition property", "ignition quality of diesel fuel", "ignition quality test", "ignition test", "ignition zone", "impacts of ethanol production", "impacts of flue gases", "impacts of flue gas", "impacts of flue gasses", "impacts of timber harvesting", "importation of ethanol", "importation of gasoline", "imports of ethanol", "imports of petroleum", "improvements in turbine design", "improvements in turbine efficiencies", "improvements in turbine efficiency", "improving boiler performance", "improving energy efficiencies", "improving energy efficiency", "improving extraction technique", "improving heat rate", "improving pollution control", "improving product qualities", "improving product quality", "impurities", "impurity", "incineration plant", "incineration technologies", "incineration technology", "industrial biomass cycle", "industrial biomass plantation", "industrial biomass production", "industrial briquette", "industrial carbon dioxide", "industrial coal washing", "industrial corn-ethanol cycle", "industrial electricity price", "industrial forest plantation", "industrial gas turbine application", "industrial gas turbine", "industrial heat demand", "industrial sugarcane-for-ethanol plantation", "industrial tree-for-energy plantation", "industrial tree plantation", "industrial tree-plantations", "industrial wood-for-energy plantation", "industrial wood residue", "inefficiency of kerosene lighting", "inefficient coal combustion technologies", "inefficient coal combustion technology", "inefficient kerosene lighting", "inert ash content", "inert gases", "inert gasses", "inexhaustible fuel", "injecting limestone system", "injection equipment", "injection grid", "injection nozzle", "injection nozzle system", "injection processes", "injection process", "injection pump", "injection rateinjection system", "injection system", "injection well", "injector holder", "injector needle", "injector nozzle", "inland bulk terminal", "inlet flue gases", "inlet flue gas", "inlet flue gasses", "inlet region", "inlet section", "inlet sulfur level", "inorganic filler", "in situ combustion", "insulator", "intermittent fuel injection", "internal combustion", "investment in coal", "investment in conversion", "Investment in energy conservation", "investment in energy conservations", "investment in energy efficiencies", "Investment in energy efficiency", "investment in ethanol plant", "investment in ethanol production capital", "investment in ethanol production", "investment of fuel", "investment opportunities", "investment opportunity", "investments in energies", "investments in energy", "investments in energy infrastructure", "investments in energy saving measure", "investments in ethanol", "isothermal compression energies", "isothermal compression energy", "isothermal compression", "jet fuel demand", "kerosene consumption", "kerosene displacement", "kerosene expenditures", "kerosene lamp", "kerosene lighting displacement", "kerosene lighting", "kerosene refining", "kerosene subsidy", "kerosene use", "kerosene wick", "kilowatt hour", "kilowatt-hours", "kilowatt toe ton", "kilowatt turbine", "kinetic energy of wind", "kinetic energy present", "landfill methane potential", "large capacity ethanol facilities", "large capacity ethanol facility", "large power generating unit", "large power plant", "large power station", "large-scale supply of energies", "large-scale supply of energy", "large wind farm", "large wind power generating station", "large wind power generating unit", "large wind project", "large wind turbine", "level of transmission", "levels of heat tariff", "lighter fuel oil", "lighter hydrocarbon", "lighter oil", "light for energy production", "lignin content", "lignin factor", "lignin fraction", "lignin from rice straw", "lignin product", "lignin test burn", "lignite mining development", "lignite production", "lignites to anthracite", "lignite to anthracite", "lignocellulosic biomasses", "lignocellulosic biomass", "lime-ash compound", "lime-fly ashes", "lime-fly ash", "lime-fly ash mixture", "lime-fly ash-soil mixture", "lime injection", "lime reagent", "lime requirement rate", "lime slaking system", "lime slurry feed rate", "lime spray dryer", "lime spray dryer processes", "lime spray dryer process", "limestone addition", "limestone blinding", "limestone cost", "limestone dissolution", "limestone injection", "limestone injection system", "limestone particle", "limestone reactivities", "limestone reactivity", "limestone sorbent requirement", "limestone substitute for amendment", "limestone system", "limestone usage", "lime substitute", "limits to growth", "lipid content", "liquefaction energies", "liquefaction energy", "liquefaction energy requirement", "liquefaction for storage", "liquefaction", "liquefaction processes", "liquefaction process", "liquefiable hydrocarbon portion", "liquid combustion", "liquid condensation", "liquid effluent", "liquid fraction", "liquid fuel for gas turbine", "liquid fuel production processes", "liquid fuel production process", "liquid fuel qualities", "liquid fuel quality", "liquid fuels from crop", "liquid fuel shortage", "liquid slurries", "liquid slurry", "lng facilities", "lng facility", "lng project", "lng receiving terminal", "lng starting", "lng tanker", "lng terminal", "load factor", "loop biomass energy system", "loop biomasses", "loop biomass", "loop biomass technologies", "loop biomass technology", "low-emissivity coating", "low outlet emission", "low- polluting coal extraction", "low-sulfur bituminous coal", "low-sulfur coal accounting", "Low-sulfur coal", "low-sulfur coal output", "low-sulfur coal production", "low-sulfur coals", "low-sulfur fuel application", "low-sulfur", "low sulphur clean diesel", "low-temperature gas cleanup method", "low-temperature heat", "low-temperature heat recoveries", "low-temperature heat recovery", "low-temperature resource assessment", "low thermal efficiencies", "low thermal efficiency", "lp compressor", "lp cylinder", "lp heater", "lp rotor", "lp rotor material", "lp turbine blade design", "lp turbine", "lp turbine section", "lubricating properties", "lubricating property", "lubricities", "lubricity", "magnetohydrodynamics", "management of bagasse", "management of coal", "management of energy conservation", "management of energy consumption", "management of energy efficiencies", "management of energy efficiency", "management of energy production", "management of energy system", "management of methane at coal seam", "manure handling equipment", "marginal cost of electricities", "marginal cost of electricity", "marginal cost of ethanol production", "marginal cost of heat supplies", "marginal cost of heat supply", "marginal fuel costae", "marginal fuel costa", "marginal value of ethanol", "marketable waxes", "marketable wax", "market for ethanol fuel", "market for ethanol", "maximum distillation temperature", "maximum drawdown capabilities", "maximum drawdown capability", "maximum efficiencies", "maximum efficiency", "maximum emission rate", "maximum energy output", "maximum gas exchange rate", "metal hydride", "metal infusion technologies", "metal infusion technology", "metals extraction", "metal temperature", "metal wastage rate", "methane composition", "methane compression energies", "methane compression energy", "methane hydrates-vast", "methane pressure", "methane recoveries", "methane recovery", "methane seepage from coal mine", "methanogenic metabolism", "methanol diesel fuel ignition", "methanol energy economies", "methanol energy economy", "methanol fuel vehicle", "methanol molecule", "methanol production", "methanol propane gasoline delivery distance", "methanol syntheses", "methanol synthesis", "methods of electricity generation", "methods of energy production", "mill bagasse", "mill effluent", "mill location", "mill operation", "mine ashes", "mine ash", "mine development", "mine drainage water", "mine management", "mine-mouth cost of coal", "mineral admixture", "mineral deficiencies", "mineral deficiency", "mineral exploitation", "mineral extender", "mineral filler", "mineralizer", "mineral-matter-free bases", "mineral-matter-free basis", "mineral matter", "mineralogical properties", "mineral water", "mineral weathering", "Mine reclamation", "mine reclamations", "mining of coal", "mix of electricity generation source", "mix of fuel source", "mixture of ashes", "mixture of ash", "mixture of ethanol", "mixture of feedstock", "mixture of fly ashes", "mixture of fly ash", "mixture of gases", "mixture of gas", "mixture of gasses", "mixture of hydrocarbon", "mixture of oxygen", "mixture of pyrolysis oil", "mixture of rice", "moderate air preheating", "moderate ash content", "moderate ethanol price", "moderate wind speed", "modern energy services", "modern fleet of power plant", "modern fuel", "modern fuel-saving technologies in industries", "modern fuel-saving technologies in industry", "modern natural-gas", "modern windmill", "modern wind turbine", "modern wood pellet factories", "modern wood pellet factory", "modern world", "moisture ashes", "moisture ash", "moisture bagasse", "moisture content of wood", "motor fuel application", "motor gasoline blending component", "motor gasoline blending", "motor gasoline consumption", "motor gasoline demand", "motor gasoline", "motor gasoline price", "motor", "motorization", "motor vehicle fuel market", "mud drilling", "multiple fuel feed system", "multiple injection", "multiple injection point", "national energy planning", "national resources", "native gases", "native gas", "native gasses", "natural fuel", "natural gas boiler", "natural gas combustion turbine unit", "natural gas consumption", "natural gas cost", "natural gas data", "natural gas datum", "natural gas demand", "natural gas depletion", "natural gas economies", "natural gas economy", "natural gas extraction", "natural gas facilities", "natural gas feedstock", "natural gas field facilities", "natural gas field facility", "natural gas for irrigation", "natural gas from production reservoir", "natural gas generation", "natural gas grid", "natural-gas", "natural gas hydrogen production", "natural gas hydro", "natural gas import", "natural gas in lease", "natural gas input", "natural gas into hydrogen", "natural gas job", "natural gas licensing", "natural gas liquid component", "natural gas liquid constituent", "natural gas liquid", "natural gas market price factor", "natural gasoline", "natural gasoline set", "natural gas output", "natural gas pipeline capacities", "natural gas pipeline capacity", "natural gas pipeline companies", "natural gas pipeline industries", "natural gas pipeline industry", "natural gas pipeline operating experience", "natural gas pipeline system", "natural gas plant", "natural gas plant liquid", "Natural gas plants", "natural gas power plant", "natural gas power station", "natural gas price volatilities", "natural gas price volatility", "natural gas pricing frameworks", "natural gas pricing", "natural gas processing", "natural gas processing plants", "natural gas producer", "natural gas production operation", "natural gas reforming", "natural gas resources", "natural gas restructuring", "natural gas rigs", "natural gas rose", "natural gas rotaries", "natural gas rotary", "natural gas sector", "natural gas storage facilities", "natural gas substitute", "natural gas supply", "natural gas transmission", "natural gas transportation network", "natural gas turbine power", "natural gas unit", "natural gas wellhead price", "natural gas well", "natural gypsum", "negative free energies", "negative free energy balance", "negative free energy balances", "negative free energy", "net electrical output", "net electrical outputs", "net electricity exporter", "net electricity exporters", "net electricity generation", "net electricity generations", "net electricity production", "net electricity productions", "net electric power output", "net electric power outputs", "net energy balance", "net energy balances", "net fossil energy input", "net fossil energy inputs", "net heat content", "net heat contents", "net heat rate", "net heat rates", "net imports of coal coke", "net imports of coal cokes", "net imports of electricities", "net imports of electricity", "net metering bill", "net metering bills", "net metering legislation", "net metering legislations", "net metering limit", "net metering limits", "net metering opportunities", "net metering opportunity", "net oil", "net oils", "net power output", "net power outputs", "net power production", "net power productions", "net solar power", "net solar powers", "nitrogen dilution", "nitrogen dioxides", "nitrogen fertilization rate", "nitrogen fertilizer", "nitrogen fertilizer production", "nitrogen fixation to bio-energy", "nitrogen injection", "nitrogen treatment", "nonrenewable energy", "nonrenewable energy production", "nonrenewable natural resource", "nonrenewable power", "normally gaseous branch-chain hydrocarbon", "normally gaseous straight-chain", "normally gaseous straight-chain hydrocarbon", "noxious fume", "nozzle exit", "nozzle re-design", "nozzle replacement", "nozzle with respect", "nuclear breeder reactor", "nuclear capacities", "nuclear capacity", "nuclear capacity utilization rate", "nuclear electric power generation", "nuclear electric power", "nuclear electric power plant", "nuclear energy output", "nuclear energy researches", "nuclear energy research", "nuclear equipment", "nuclear facility decommissioning", "nuclear fleet", "Nuclear generation", "nuclear generations", "nuclear industries", "nuclear instruments", "nuclear option", "nuclear output", "nuclear page", "nuclear plant construction", "nuclear power capacities", "nuclear power capacity", "Nuclear power generation", "nuclear power generations", "nuclear power", "nuclear power output", "nuclear power planning", "nuclear power plant equipment", "nuclear power plant reactor", "nuclear power program", "nuclear power unit", "nuclear program", "nuclear program must", "nuclear reaction", "nuclear retirement", "nuclear unit", "nuclear utilities", "nuclear utility", "nuclear waste disposal", "nuclear waste storage capacities", "nuclear waste storage capacity", "nutrient balance", "nutrient budget", "nutrient content", "nutrient cycle", "nutrient depletion", "nutrient disorder", "nutrient flux", "nutrient loss by soil leaching", "nutrient loss", "nutrient loss in wood", "nutrient loss through harvest", "nutrient loss through slash burning", "nutrient loss through volatilization", "nutrient management", "nutrient recycling", "nutrient replacement", "nutrients as biomasses", "nutrients as biomass", "nutrient store estimate", "nutrient store", "ocean energy resource", "octane booster", "octane enhancer", "octane given", "octane", "octane numbers", "octane rating", "octane requirement", "octane value", "offshore bunker use", "offshore energies", "offshore energy", "offshore lng receiving terminal", "offshore oil platform", "offshore operations", "offshore reserve", "offshore site", "offshore turbine", "offshore wind capacities", "offshore wind capacity", "offshore wind development", "offshore wind economics", "offshore wind energies", "offshore wind facilities", "offshore wind facility", "offshore wind farm development", "offshore wind farms in operation", "offshore wind", "offshore windmill park", "offshore wind park", "offshore wind power generating capacities", "offshore wind power generating capacity", "ohmic resistance", "oil account", "oil arriving", "oil barrel", "oil combustion", "oil companies on matter", "oil content oilseed", "oil cost", "oil crops outlook", "oil crops yearbook", "oil demand", "oil energies", "oil energy", "oil equivalent", "oil executive", "oil exporters", "oil feedstock", "oil forecasting model", "oil gas coal", "oil gun", "oil importing countries", "oil industry executive", "oil infrastructure sabotage", "oil line", "oil market analyses", "oil market analysis", "oil market basic", "oil market economist", "oil markets", "oil minister", "oil output", "oil platform", "Oil platforms", "oil price collapse", "oil price", "oil price scenario", "oil price spikes", "oil producers", "oil producing areas", "oil producing nation", "oil production per capita", "oil providing", "oil refineries", "oil refining capacities", "oil refining capacity", "oil refining", "oil refining industries", "oil refining industry", "oil refining investment", "oil reservoir", "oil revenue management", "oil rig", "oil side", "oil supply disruption", "oil system", "Oil systems", "Oil use", "oil uses", "oil water", "old coal power plant", "old energies", "old energy", "older coal plant", "older coke-making processes", "older coke-making process", "older esps", "older lp turbine", "old industrial plantation", "old pipeline system", "old well", "old wet-process clinker", "olefinic hydrocarbon", "olefin production", "oleo", "ommercial sugarcane", "onshore production", "onshore wind", "on site electric power production", "open burn", "open burning", "open burn pollutant", "open circuit voltage", "open combustion", "open-field burning", "open field burning", "open-loop biomass technologies", "open-loop biomass technology", "open market", "open market price of coal", "open pit", "open storage tank", "open system", "operating biomass power plant", "operational costs from management of rice straw", "operation of pipeline", "option", "Organic carbon", "organic carbons", "organic carbon turnover", "organic chemical compound", "organic chemical compound of hydrogen", "organic compound", "organic crop rotation", "organic feedstock", "organic matter content", "organic matter cycle", "organic matter dynamic", "organic waste material", "orimulsion", "outlet emission", "outlet emission level", "outlet emission limit", "outlet particulate emission", "outlet temperature", "output of coal", "output of energy product", "oxidation limestone processes", "oxidation limestone process", "oxidation of fuel-bound nitrogen", "oxidation of fuel nitrogen", "oxidative phosphorylation", "oxygen", "oxygen treatment", "paraffinic gases", "paraffinic gas", "paraffinic gasses", "particulate collection device", "particulate collection performance", "particulate collector", "particulate control device", "particulate control", "particulate emission compliance", "particulate emission limit", "particulate emission rate", "particulate emission standard", "particulate loading", "particulate removal", "particulate removal system", "passing material", "passive design", "passive solar designs can", "passive solar device", "passive solar house", "passive solar power for building", "passive solar system", "Passive solar systems", "pay for heat service", "peaceful uses of nuclear energies", "Peaceful uses of nuclear energy", "peak capacities", "peak capacity", "peak demand", "peak demand period", "peak deposition rate", "Peak electricity demand", "peak electricity demands", "peak generation", "peak geological deposition rate", "peak geological formation", "peak geological generation rate", "peak geological rate", "peak heat demand", "peak heat", "peak load duration", "peak load", "peak load period", "peak megawatt", "peak oil", "peak oil output", "peak oil production capacities", "peak oil production capacity", "peak output", "peak power demand period", "peak power generation", "peak production", "peak reaction temperature", "peak release", "peak surface runoff", "peak time", "peak velocities", "peak velocity", "pellet capture", "pellet factories", "pellet factory", "pellet fuel", "pelletization", "pelletizing system", "pellet production", "pellets per year", "pentane extraction", "pentane hydrocarbon", "pentane production", "pentanes pluses", "pentanes plus", "pentanes plusses", "perforated fin", "perforated liner", "permanent blackout", "permanent deactivation", "permanent electrical blackout", "permanent group of salespeople", "permanent nuclear waste depositories", "permanent nuclear waste depository", "permitting system processes", "permitting system process", "permit trading", "petrochemical feedstock", "petrol engine power", "petroleum asset", "petroleum basic", "petroleum coke plant", "petroleum demand", "petroleum dependence", "petroleum deposit", "petroleum diesel", "petroleum diesel life cycle", "petroleum distillate having", "petroleum distillate", "petroleum fraction", "petroleum genesis", "petroleum hydrocarbons", "petroleum lubricant", "petroleum marketing", "petroleum processing", "petroleum production", "petroleum products industries", "petroleum products industry", "petroleum products terminal", "petroleum propane", "petroleum refining industries", "petroleum refining industry", "petroleum refining sector", "petroleum residual", "petroleum revenue", "petroleum revenue management", "petroleum rocket", "petroleum shipping terminals", "petroleum source", "petroleum stock", "petroleum storage tank leakage", "petroleum use", "ph adjustment of soil", "phosphoruses", "photosynthesises", "photosynthetic efficiencies", "photosynthetic efficiency", "photosynthetic energy capture", "photosynthetic processes", "Photosynthetic process", "photosynthetic renewable resource", "photosynthetic system", "photovoltaic application", "photovoltaic capacities", "photovoltaic capacity", "photovoltaic cell", "Photovoltaic cells", "photovoltaic device", "photovoltaic energies", "photovoltaic market", "photovoltaic r&amp;d", "photovoltaic school installation", "photovoltaic system", "photovoltaic technologies", "photovoltaic technology", "physical properties of gypsum", "physical properties of hydrogen", "physical properties of pyrolysis liquid", "phytotoxic level", "pilot injection", "pilot injection of diesel oil", "pilot injection start with diesel fuel", "pilot wind farm", "pipe breakdown", "pipeline design &amp; construction", "pipeline diameter", "pipeline disruption", "pipeline expansions", "pipeline fuel", "pipeline", "pipeline maintenance &amp; repair", "pipeline margin", "pipeline replacement", "pipeline routes", "pipeline safety", "pipeline siting", "pipeline systems", "pipeline terminal", "pipeline truck", "pipe replacement", "pipe route", "plantation development", "plantation harvesting technique", "plantation maintenance", "plantation management", "plantation productivity decrease", "plantation soil", "plantation tree", "plantation wood", "plant biomasses", "plant efficiencies", "plant efficiency", "plant of origin", "plant operabilities", "plant operability", "plant operating load level", "plant operating restriction", "plant operation", "plant operator", "plant output", "plant owner", "plant performance engineer", "plant performance", "plant power consumption", "plant power cost", "plant producing", "plant reliabilities", "plant reliability", "plant rooting depth", "plant separation", "plant shutdown", "pollutant control device", "pollutant control", "pollutant control option", "pollutant damage", "pollutant emission amount", "pollutant emission control", "pollutant emission limitation", "pollutant emissions externalities", "pollutant emissions externality", "pollutant emissions limitation", "pollutant externalities", "pollutant externality cost", "pollutant externality", "pollutant", "pollutant limitation", "pollutant reduction", "pollutant reduction strategies", "pollutant reduction strategy", "pollutants control cost", "pollutants control device", "pollutants control strategies", "pollutants control strategy", "pollutants emission constraint", "pollutants emission", "pollutants emission limitation", "pollutants limitation scenario", "pollutants reduction strategies", "pollutants reduction strategy", "polluting power plants relative", "pollution control effort", "pollution control facilities", "pollution control facility", "pollution control policy", "pollution control system", "pollution generation", "pollution", "pollution impact", "Pollution impacts", "Pollution levies", "pollution load", "pollution of soil", "polymer-base-coated carbon steel", "polymeric component", "polymeric material", "polyurethane maintenance", "post-burn timber salvage operation", "post-combustion", "post-combustion technologies", "post-combustion technology", "post-conflict", "post-consumer waste product", "post-furnace", "post-retrofit emissions behavior", "power availabilities", "power availability", "power block", "power cable", "power coal washing", "power cogeneration", "power conditioner", "power conversion", "power conversion techniques", "power cost", "power crises", "power crisis", "power curve", "power cycle", "power distribution charges", "power electronics", "power emission", "power factor correction", "power finance", "power flow", "power for machineries", "power for machinery", "power from wind", "power generating capacities", "power generating capacity", "power generating plant", "Power generating systems", "power generation analyses", "power generation analysis", "power generation application", "power generation expansion", "Power generation markets", "power generation package", "power generation portion", "power generation processes", "power generation process", "power generation program", "power generation second", "power-generation subsidies", "power-generation subsidy", "power generation system", "power generation technologies", "power generation technology", "Power houses", "power industry enterprise", "power interconnections", "power investment", "power law", "power line", "power line worker", "power mechanics", "power mixes", "power mix", "power parity adjustment", "power (philosophy)", "power-plant construction", "power plant construction", "Power plant costs", "Power plant depreciation allowances", "Power plant depreciation", "power plant flue", "power plant operator", "power plant owner", "power plant site", "power plant technologies", "power plant technology", "power pool governance &amp; regulation", "power pools", "power price", "power pricing", "power production assumption", "power production capacities", "power production capacity", "power production scenario", "power program", "power purchase agreements", "power rating", "power ratio", "power requirement equivalencies", "power requirement equivalency", "power requirement", "power rule", "power sector application", "power sector environmental control", "power sector option", "power sector planning", "power sector policies", "power sector reform", "power semiconductor", "power shortage", "Power stations", "power supply", "power system planning", "power systems", "power trading", "power transfer", "power transmission grid", "pressure amplifier system", "pressure breakdown valve", "pressure drop", "pressure ratio", "pressure rise", "pressure storage vessel", "pressure swirl atomizer", "pressure turbine", "pressure vessel", "prevailing wind", "preventative maintenances", "price cellulose ethanol", "price comparison", "Price comparisons", "price competitiveness", "price elasticities", "price of coal", "price of energy import", "price of ethanol follow", "price of ethanol", "price of feedstock", "price of fossils fuel", "price of fuel", "price of oil", "price of power", "prices for coal", "prices of coal", "prices of energies", "prices of energy", "prices of ethanol", "prices of fuel", "price spike", "primary electricities", "primary electricity", "primary energies", "Primary Energy Consumption", "primary energy consumptions", "Primary energy production", "primary energy productions", "Primary energy resource", "primary energy resources", "primary energy saving", "primary energy situation", "Primary energy source", "primary energy sources", "primary energy supplies", "primary energy supply", "primary feedstock", "primary fossil fuel input", "primary fuel competitor", "primary fuel", "primary source for energies", "primary source for energy", "primary source", "primary source of carbon dioxide emission", "primary source of electricities", "primary source of electricity", "primary source of energies", "primary source of energy", "primary sources of energies", "primary sources of energy", "primary stock", "primary thermal equivalent", "principal coal-related properties", "principal coal-related property", "process gases", "process gas", "process gasses", "process heat", "process natural gases", "process natural gas", "process natural gasses", "process of coal extraction", "process of energy conversion", "process of energy production", "process of energy transformation", "process of sugar juice", "process steam consumption", "process steam", "process steam pressure", "process steam requirement", "process use", "producer incentive", "producer of cellulose ethanol", "producer of electricities", "producer of electricity", "producer of energies", "producer of energy", "producer of power", "producer of sugarcane", "producer payment", "producer reference feedstock", "producers of energies", "producers of energy", "producers of petroleum", "producing diesel fuel", "producing oil well", "production of biomass energies", "production of biomass energy", "production of biomass ethanol", "production of coal briquette", "production of coal", "production of coal mine", "production of coke", "production of consumer good", "production of diesel-oil substitute", "production of electricities", "production of electricity", "production of energies", "production of energy", "production of ethanol", "production of ethanol yield", "production of feedstock", "production of fertilizer", "production of fuel cell", "production of fuel", "production of hydrocarbon", "production of hydrogen energies", "production of hydrogen energy", "production of hydrogen", "production of media", "production of medium", "production of power", "production of sugar from sugarcane", "productivity assessment", "productivity assumption", "productivity factor", "productivity multiplier", "product of ethanol production", "product of power generation", "products custom", "products from ethanol processing", "products from processes", "products from process", "products from sodium injection processes", "products from sodium injection process", "profitability index b", "profitability index b's", "profitable biomasses", "profitable biomass", "profitable plant operation", "promoting energy efficiencies", "promoting energy efficiency", "promoting energy efficiency standard", "promoting energy sector reform", "promotion efficiencies", "promotion efficiency", "propagation velocities", "propagation velocity", "propane fuel", "propane with methane being", "properties of bio-oil", "properties of hydrogen", "properties of liquid", "properties of pyrolysis liquid", "proponents of biomass ethanol", "proportion of biomasses", "proportion of biomass", "proportion of coal", "proportion of fly ashes", "proportion of fly ash", "proportion of renewable energy resource", "proportion of thermal power plant", "proportion to energy output", "protection of bird", "prototype nozzle", "proven cyclic performer", "proven greenhouse gases", "proven greenhouse gas", "proven greenhouse gasses", "proven natural gases", "proven natural gas", "proven natural gasses", "provincial energy planning", "provincial power authorities", "provincial power authority", "provision of district heat", "provision of district heating", "provision of heat", "public land user", "public utility regulator", "public visibilities", "public visibility", "pump overhauling", "Pump storage", "pump storages", "purchase of electricities", "purchase of electricity", "purchase of solar water heater", "pure diesel oil", "pure electricities", "pure electricity", "pure energies", "pure energy", "pure energy source", "pure ethanol", "pure hydrogen", "purification system", "pvc plastisol", "pyrolysises", "pyrolysis liquid feeding tank", "pyrolysis oils for power plant", "pyrolysis water", "pyrolytic aqueous phase", "pyrolytic liquid", "quality energies", "quality energy", "quality fuel", "quality of energies", "quality of energy", "quality of pyrolysises", "quality of pyrolysis", "quality pyrolysis liquid", "quantity of coal refuse", "quantity of electricities", "quantity of electricity", "quantity of feedstock", "quantity of fertilizer", "quantity of fuel", "quantity of gases", "quantity of gas", "quantity of gasses", "quantity of heat", "quantity of nutrient", "rail emission", "railroad fuel use", "range of coal", "range of efficiency technologies", "range of efficiency technology", "range of energy input", "range of hydrocarbon feedstock", "range of sulfur content above", "rankine cycle", "rankine steam- cycle", "rankine steam cycle", "rate of battery disposal", "rates for emission trading credit", "rates for fuel extraction", "ratio of energy consumption", "raw acacia", "raw biomasses", "raw biomass", "raw coal", "raw coal to briquette", "raw coal with briquette", "raw coal with coal gases", "raw coal with coal gas", "raw coal with coal gasses", "raw eucalypt", "raw gases", "raw gas", "raw gasses", "raw material", "raw sugar", "raw water requirement", "raw water supplies", "raw water supply", "raw water with consumption", "raw wood", "raw wood into pellet", "reactor area", "reactor bypasses", "reactor bypass", "Reactor cracking", "reactor failure", "reactor housing", "reactors", "reactor temperature", "reactor vessel", "reagent consumption", "reagent feed", "reagent handling", "reagent mixing", "reagent utilization", "rechargeable batteries", "rechargeable battery", "rechargeable lead-acid batteries", "rechargeable lead-acid battery", "recoverable coal", "recoverable conventional reserve", "recoverable energy content", "recoverable gases", "recoverable gas", "recoverable gasses", "recoverable oil", "recoverable reserve", "recoverable resource", "Recoverable resources", "recovery furnace", "recyclable grade", "recyclable waste paper", "recycling company development", "recycling scrap material", "reducing energy consumption", "reducing energy usage", "reducing energy use", "reducing fuel loading", "references to ethanol production", "refiner acquisition", "refinery capacities", "refinery capacity", "refinery closure", "refinery facilities", "refinery facility", "refinery fire", "refinery fuel", "refinery gain", "refinery gases", "refinery gas", "refinery gasses", "refinery octane", "refinery operation", "refinery processes", "refinery process", "refinery volume output", "regional externalities", "regional externality", "regular gasoline", "regular grade gasoline", "regulatory efficiencies", "regulatory efficiency", "rehabilitation component", "rehabilitation investment", "rehabilitation of thermal", "rehabilitation of unit", "reheater outlet", "reheater temperature", "reheater tubing", "reliability improvement", "reliability of generation", "reliability of service provision", "reliability of supplies", "reliability of supply", "removal from distillery wastewater", "removal of biomasses", "removal of biomass", "removal of excess biomass material", "removal of pentane", "removal of residue", "removal of slashes", "removal of slash", "removal of trace component", "removal of wastewater contamination", "removal of wood from forest", "removals of biomasses", "removals of biomass", "renewable biomasses", "renewable biomass", "renewable biomass resource", "renewable development", "renewable electric generation technologies", "renewable electric generation technology", "renewable electricities", "renewable energy application", "Renewable energy businesses", "renewable energy business", "renewable energy capacities", "renewable energy capacity", "renewable energy clearinghouse", "renewable energy communities", "renewable energy community", "renewable energy conference", "renewable energy consulting service", "renewable energy consumption", "renewable energy consumption statistic", "Renewable energy development", "renewable energy developments", "renewable energy dissemination", "renewable energy environment", "renewable energy equipment supplier", "renewable energy facility", "renewable energy for development", "renewable energy fund", "renewable energy future", "Renewable energy generation", "renewable energy generations", "renewable energy generator", "renewable energy industries", "Renewable energy industry", "renewable energy industry representative", "renewable energy initiative", "renewable energy installation", "renewable energy knowledge", "renewable energy loop", "renewable energy market", "renewable energy network", "renewable energy operator", "renewable energy opportunities", "renewable energy opportunity", "renewable energy planning", "Renewable energy policies", "renewable energy policy", "renewable energy portfolio standard", "renewable energy potential", "renewable energy producer", "renewable energy product", "renewable energy production capacities", "renewable energy production capacity", "renewable energy production", "renewable energy production incentive", "renewable energy production system", "renewable energy project", "Renewable energy projects", "renewable energy relative", "renewable energy resource assessment", "renewable energy source", "renewable energy supplier", "renewable energy system", "Renewable energy systems", "Renewable energy technologies", "renewable energy technology development", "renewable energy technology", "renewable energy use", "renewable energy window", "renewable feedstock", "renewable fossil fuel", "renewable fuel production", "renewable fuel researches", "renewable fuel research", "renewable generation due", "renewable generation", "renewable household", "renewable hydrogen from ethanol", "renewable hydrogen", "renewable initiative", "renewable opportunities", "renewable opportunity", "renewable portfolio standard", "renewable power capacities", "renewable power capacity", "renewable power plant", "renewable power production", "renewable production", "renewable rural electrification", "renewable rural energy", "renewable source", "renewable source of biomass energies", "renewable source of biomass energy", "renewable source of energies", "renewable source of energy", "Renewable technologies", "renewable technology", "replacement fuel", "replacement of methyl tertiary-butyl ether", "replacement of pipeline", "replacement of valve", "residential air conditioning system", "residential application", "residential building code", "residential building", "residential consumer", "residential demand", "residential district heat customer", "residential electrical load", "residential energies", "residential energy", "residential heat energies", "residential heat energy", "residential housing", "residential load", "residential solar heating system", "residential solar water heater", "residential solar water heating", "residential solar water heating system", "residual asphaltic oil", "residual biomass material", "residual carbon", "residual ethanol diversion", "residual fuel", "residual fuel oil consumption", "residual in landfill", "residual lignin", "residual material", "residual nitrogen", "residual stresses", "residual substance", "residual sugar", "residual waste", "residue collection equipment", "residue feedstock", "residues for ethanol feedstock", "residues for ethanol production", "residue use for energies", "residue use for energy", "restoring energy supplies", "restoring energy supply", "retail competition", "retail customer", "retail distribution network", "retail electricities", "retail electricity", "retail electricity supplier", "retail price of electricities", "retail price of electricity", "retail price of gasoline", "retail price per gallon", "retired nuclear power plant", "retirement of small-inefficient power plant", "retirement of small power plant", "retiring nuclear generation", "retiring nuclear unit", "retrofit application", "retrofit control technologies", "retrofit control technology", "rice acreage", "rice crop", "rice farmer", "rice grower", "rice-growing region", "rice industries", "rice industry", "rice straw burning", "rice straw disposal", "rice straw", "rice straw supplier", "road heating", "root space", "rotary drum", "rotary hoeing", "rotary rig", "rotational speed", "rotation length", "rotor blade", "rotor diameter", "rotor forging", "rotor forging technologies", "rotor forging technology", "rotor material", "rotor shaft", "rotor steel", "rural electric cooperative", "rural electric", "rural electricities", "rural electricity connection", "rural electrification policies", "rural electrification subsidies", "rural electrification subsidy", "rural energy businesses", "rural energy business", "rural energy development", "rural energy service", "rural household electrification", "rural households burning coal", "safe energy production", "safe interconnection", "safe operation", "safe production rate", "safer energy plan", "safer operation", "safety engineer", "safety equipment", "safety from energy production", "safety of nuclear power plant", "safety procedures", "safety regulation", "safety standard", "safety testing", "scrubber efficiencies", "scrubber efficiency", "scrubber module", "scrubber product", "scrubber sludge", "scrubber vessel", "scrubber waste", "sea exchange", "Sea floor", "sea floors", "sea geothermal field", "sea pipeline system", "seasonal rice straw", "sea transport", "seawater scrubbing", "secondary insulation", "security at nuclear power plant", "shaft power", "shaft speed", "shaft-work", "shaft work", "shake test", "shallow sea water", "shallow subsurface ground water", "shallow temperature-gradient well", "shallow water depth", "shortage of energies", "shortage of energy", "shortage of ethanol", "shortage of feedstock", "shortage of gasoline", "shortages in electricity supplies", "shortages in electricity supply", "silica particle", "silica sand", "siliceous compound", "silicon carbide coating", "silicon dioxide", "silicon module manufacturing", "slag fine", "slag temperature", "slash burning", "slash recycling", "slash removal", "slash removal location", "slash removal operation", "slash retention", "slash treatment", "slash treatment on private", "sludge calcium sulfate", "sludge component", "sludge handling equipment", "sludge moisture content", "sludge particle", "sludge stabilization", "sludge waste", "slurries", "slurry dilution", "slurry-fed", "slurry flow rate", "slurry of hydrocarbon", "slurry of lime", "slurry phase", "slurry phase vessel", "slurry pumping requirement", "small diesel engine", "smaller turbine", "small ethanol producer", "small hydro-plants", "small kiln", "small liquefaction", "small power plant", "small power producer", "small power producer statuses", "small power producer status", "small producer credit", "small producer income tax credit", "small producer tax credit source", "small size power plant", "small wind system", "small wind turbine", "smog level", "soda ashes", "sodium compound", "sodium concentration", "sodium conditioning", "sodium conditioning system", "sodium content", "sodium duct injection", "sodium hydroxides", "sodium ion", "sodium oxide", "sodium salt", "soil amendment", "soil erosion rate", "soil nutrient", "soil permeabilities", "solar cell", "solar collector system", "solar contractor", "solar development corporation", "solar education for student", "solar education project", "solar electricities", "Solar electricity", "solar electric system", "solar electrification", "solar energies", "Solar energy conversion", "solar energy conversions", "solar energy facilities", "solar energy facility", "solar energy generation", "solar energy industries association", "solar energy potential", "solar energy production", "solar energy system", "solar fraud", "solar heating &amp; cooling", "solar home system", "solar hot water heater", "solar hydrogen magazine article", "solar industries", "Solar industry", "solar insolation", "solar lantern", "solar light", "solar load", "solar photovoltaic energies", "Solar power", "solar powers", "solar power station", "solar power system", "Solar power systems", "solar producer", "solar project", "solar radiation data", "solar radiation datum", "solar radiation striking", "solar reflectance", "solar resource", "solar roof", "solar stove", "solar supporter", "Solar systems", "solar thermal collector", "solar thermal collector manufacturer", "solar thermal electric", "solar thermal energies", "solar thermal heating system", "solar thermal", "solar thermal industries", "solar thermal industry", "solar thermal manufacturer", "solar thermal market", "solar thermal system", "Solar thermal systems", "Solar water heater", "solar water heater industries", "solar water heater industry", "solar water heater sale", "solar water heating", "solar water heating industries", "solar water heating industry", "solar water heating market", "solar water heating sector", "solar water heating system", "Solar water heating systems", "solar weatherization assistance program", "solid biomasses", "solid biomass", "solid biomass per day", "solid bitumen", "solid-fueled power generation", "solid hydrocarbon", "solid oxide fuel cell", "solid particle erosion", "solids buildup", "solids content", "solids-free pyrolysis liquid", "solids removal", "solids resistivities", "solids resistivity", "solids slurries", "solids slurry", "solid waste generation", "solubility of trace element", "solubility of zinc", "soluble basic cation", "soluble boron", "soluble form", "soluble fraction", "soluble ion", "soluble nutrient", "soluble salt", "soluble salts boron", "sorbent characteristic", "sorbent distribution", "sorbent", "sorbent injection", "sorbent injection point", "sorbent injection rate", "sorbent losses", "sorbent loss", "sorbent mixture", "sorbent preparation", "sorbent usage", "sorbent utilization", "sorption processes", "sorption process", "source of electricities", "source of electricity", "source of energies", "source of energy", "source of ethanol feedstock", "source of ethanol", "source of fuel", "source of transportation fuel", "space aerodynamics", "space cooling", "space heating", "spare equipment", "spare system", "spark ignition", "spark plug", "spent geothermal fluid", "spent nuclear fuel", "spent power", "spent sorbent component", "spent sorbent", "spent sorbent tonnage", "spent thermal water", "spray characteristic", "spray characterization", "spray combustion model", "spray cone angle", "spray cooler", "spray correlation", "spray dryer", "spray dryer performance", "spray dryer processes", "spray dryer process", "spray dryer system advantage", "spray dryer system disadvantage", "spray dryer system", "spray dryer vessel", "stability of hydrocarbon", "stability of pipeline", "stability of pyrolysis liquid", "stability to natural gas price", "stabilization of emission", "stabilization of particulate", "stable ethanol-diesel mixture", "stable ignition", "stable price", "stable slurries", "stable slurry", "stable supply of energies", "stable supply of energy", "stack gas", "stack gasses", "stack height", "stack monitoring technologies", "stack monitoring technology", "stack plume rise", "stack power", "stainless steel cyclone", "stainless steel forging", "stainless steels", "standard diesel mode", "standard diesel oil", "standard enthalpy of combustion", "standard fuel oil", "standard nozzle", "standard nozzle material", "stands of acacia", "static electricities", "static injection timing", "static mixer", "steady demand for biomass feedstock", "steam boiler design", "steam boiler inspection code", "steam bypass system", "steam capacities", "steam capacity", "steam-carrying boiler tube", "steam casing", "steam chest", "steam condition", "steam conditions power plant fuel output steam", "steam consumption", "steam control", "steam cool", "steam cracking", "steam cycle design", "steam cycle", "steam distribution system", "steam drives turbine", "steam drum", "steam drum plate", "steam energies", "steam energy efficiencies", "steam energy efficiency", "steam energy", "steam exit", "steam exit temperature", "steam field", "steam flow", "Steam flows", "steam for ethanol processing", "steam for industries", "steam for industry", "steam for sale", "steam from pellet", "steam from water", "steam generation system", "steam generator", "steam generator island", "steam heat", "steam injection", "steam line", "steam locomotive", "Steam locomotives", "steam offer great opportunities", "steam offer great opportunity", "steam operating power generation", "steam path geometries", "steam path geometry", "steam pipe", "steam pipeline", "steam piping", "steam power generation turbine", "Steam pressure", "steam pressures", "steam production", "steam-raising circuit", "steam rate", "steam reforming", "steam requirement", "steam saving", "steam system", "steam temperature", "steam turbine bottoming cycle", "steam turbine bypasses", "steam turbine bypass flow", "steam turbine bypass", "steam turbine cogeneration unit", "steam turbine division", "steam turbine efficiencies", "steam turbine efficiency", "steam turbine failure", "steam turbine forging", "steam turbine output", "steam turbine producing", "steam turbine supplier", "steam turbine technologies", "steam turbine technology", "steam turbine warming", "steel box sitting", "steel casing", "steel tube", "steel tubing", "stem biomasses", "stem biomass", "stem sugar capture", "stem sugar", "stem wood", "Storage pond", "storage ponds", "storage reservoir", "straw combustion", "straw cooperative", "straw disposal method", "straw emission", "straw for ethanol production", "straw remnant", "straw removal", "straw residue", "straw supplier", "subcritical boiler", "subcritical coal plant", "subcritical cycle", "subcritical pc", "subcritical plant", "subcritical steam", "subcritical system", "subcritical turbine", "subcritical unit", "substation cost", "substation equipment", "substation investment", "substation maintenance", "substation rehabilitation activities", "substation rehabilitation activity", "substations to building", "substations with consumption", "substitute for diesel fuel", "substitute for petroleum import", "substitute fuel", "substitute product for gasoline", "substitute refinery feedstock", "substituting heat deliveries", "substituting heat delivery", "substitution of gypsum", "substitution of heat", "substitution penetration", "sugar cane bagasse", "sugarcane crop area", "sugarcane cultivation", "sugarcane distillery wastewater", "sugarcane-ethanol", "sugarcane ethanol", "sugarcane-ethanol manufacturing", "sugarcane ethanol production", "sugarcane ethanol to hydrogen", "sugarcane-for-energy plantation", "sugarcane grasses", "sugarcane grass", "sugarcane green", "sugarcane harvest losses", "sugarcane harvest loss", "sugar-cane industries", "sugar-cane industry", "sugarcane molasses", "sugarcane plantation", "sugarcane plantations for ethanol", "sugarcane plant", "sugarcane plant sugarcane", "sugarcane producer", "sugarcane production", "sugar cane residue", "sugarcane residue", "sugarcane slashes", "sugarcane slash", "sugarcane stem crushing", "sugarcane stem", "sugarcane stem makeup", "sugarcane trashes", "sugarcane trash", "sugar cane waste", "sugar crystal", "sugar-ethanol distilleries", "sugar-ethanol distillery", "sugar factory", "sugar for fermentation", "sugar industries", "sugar in stem", "sugar institute", "sugar manufacturing processes", "sugar manufacturing process", "sugar mill", "sugar operation", "sugar sector", "sugars to ethanol", "sugar yield", "sulfate component", "sulfate concentration", "sulfate particle", "Sulfate particles", "sulfation reaction", "sulfur capture", "sulfur capture rate", "sulfur capture sorbent", "Sulfur coal", "sulfur coals", "sulfur deposition", "sulfur dioxide emissions standard", "sulfur dioxide removal", "sulfur emission", "sulfur fuel oil", "sulfuric acid lime yeast", "sulfuric acid vapor", "sulfur reaction product", "sulfur reduction", "sulfur removal", "sulfur smell", "sulfur species", "sulfur trioxide", "sulphur content in coal", "sulphur dioxides", "sulphur emission", "summer demand for gasoline", "summer load", "summer peak demand", "summer peak", "summertime demand", "sunlight reaching", "sunlights", "super-conducting power generation", "supergiant oil field", "super heated liquid", "superheater bypasses", "superheater bypass", "superheater zone", "supplementary cementing material", "supplies of ethanol", "supply boiler", "supply cost", "supply curve for biomasses", "supply curve for biomass", "supply curves for corn", "supply efficiencies", "supply efficiency", "supply flexibilities", "supply flexibility", "supply of biomasses", "supply of biomass", "supply of crude", "supply of electricities", "supply of electricity", "supply of energy service", "supply of energy to humanities", "supply of energy to humanity", "supply of ethanol", "supply outage", "support for energy r", "support for energy r's", "support for ethanol industry federal", "surface mine", "surface mining", "surface mining reclamation", "surplus bagasse", "surplus credit", "surplus of bagasse", "surplus of ethanol", "surplus oil", "surplus power", "surplus right", "surplus situation", "surplus wet bagasse", "surplus wind", "sustainable energies", "sustainable energy coalition", "sustainable energy committee", "sustainable energy development authorities", "sustainable energy development authority", "sustainable energy futures", "sustainable energy production", "sustainable energy resource", "sustainable energy source", "sustainable energy system", "Sustainable energy systems", "sustainable generation of electricities", "sustainable generation of electricity", "sustainable nutrient cycle", "sustainable nutrient management", "sustainable operation", "sustainable rural energies", "sustainable rural energy", "synergistic effect", "synergistic effects of particulate", "synergistic operation", "synthesis gases", "synthesis gas", "synthesis gasses", "synthesis of hydrogen", "synthesis of methanol", "synthesis processes", "synthesis process", "synthetic energy carrier", "synthetic fertilizer", "synthetic fuel gases", "synthetic fuel gas", "synthetic fuel gasses", "synthetic fuel program", "synthetic gases", "synthetic gas", "synthetic gasses", "synthetic gypsum", "synthetic hydrocarbon fuel", "synthetic hydrogen", "synthetic natural gases", "synthetic natural gas feedstock", "synthetic natural gas", "synthetic natural gasses", "synthetic rubber", "szone stoichiometries", "szone stoichiometry", "target ethanol price", "target price", "target price of ethanol", "tariff design", "tariff increase for heat", "tariff level", "tariffs for customer", "tariff structures", "tax credit provision", "tax credits", "tax design", "tax incentive", "tax payment", "tax policy act", "tax rate", "tax rebate", "technologies for ethanol production", "technologies for fuel feeding", "technologies for heat", "terminal utilization of coal", "tertiary butyl alcohol", "tertiary butyl ether", "thermal biomass processing", "thermal capacity", "thermal collector boxes", "thermal collector box", "thermal conversion factor", "thermal conversion", "thermal cracking", "thermal creep problem", "thermal damage", "thermal decomposition", "thermal efficiencies", "thermal efficiency as diesel", "Thermal efficiency", "thermal efficiency on bio-oil", "thermal electric power system", "thermal envelope", "thermal expansion coefficient", "thermal expansion", "thermal fatigue", "thermal fatigue resistance", "thermal hydrolyses", "thermal hydrolysis", "thermal input", "thermal insulating wall", "thermal insulation of pipe", "thermal load", "thermal losses", "thermal loss", "thermal mass of earth", "thermal output", "thermal performance calculation", "Thermal performance", "thermal performance in condenser", "thermal performances", "thermal plant capacity", "thermal power capacity", "thermal power generation", "thermal power", "thermal rating", "thermal-shear", "thermal stability", "Thermal stress", "thermal survey", "thermal system analyses", "thermal system analysis", "thermal system", "thermal technology", "thermal unit", "thermal water losses", "thermal water loss", "thermochemical biomass conversion", "thermochemical liquefaction", "thermochemical reactions under condition", "thermodynamic compression processes", "thermodynamic compression process", "thermodynamic efficiency", "thermodynamics of corn ethanol", "thermodynamics of energy production", "thick oil reservoir", "tidal energy system", "tidal powers", "tidal power station", "timber firm", "timber growth", "Timber harvest", "timber harvesting", "timber harvesting plan", "timber harvesting slashes", "timber harvesting slash", "timber harvest plan", "timber harvests", "timber industry", "timber losses", "timber loss", "timber quality", "timber stand improvement", "timber stand improvement operation", "timber yield", "tons of carbon", "tons of coal equivalent", "tons of coal", "tons of nitrogen oxide", "tons of petroleum equivalent", "tons of sulfur dioxide", "total energy system", "toxic ashes", "toxic ash", "toxic diesel spill", "toxic gas", "toxic gasses", "toxic impurity", "toxicity level", "toxicity problems due", "toxic nature", "toxic waste dump", "trace element concentration", "trace elements in sludge", "trace engineering", "trace particulate", "traditional biomasses", "traditional biomass feedstock", "traditional biomass", "traditional coal extraction", "traditional electric heating", "traditional electricity production", "traditional electricity utility businesses", "traditional electricity utility business", "traditional electric utility", "traditional energy sectors", "traditional energy utility", "traditional fermentation", "traditional fossil fuel", "traditional gasoline", "traditional generation", "traditional geothermal power technology", "traditional geothermal technology", "traditional power generation", "traditional power generator", "transfer of energy", "transmission area", "transmission capability", "transmission capacities", "transmission charge on generator", "transmission constraint", "transmission facility", "transmission infrastructures", "transmission interconnection", "transmission line losses", "transmission line loss", "transmission losses", "transmission organization", "transmission path", "transmission power grid", "transmission pricing", "transmission pricing mechanism", "transmission system", "transportation feedstock emission", "transportation fuel energy", "transportation fuel", "transportation fuel pool", "transportation fuel use", "transportation of ethanol blend", "transportation of ethanol by rail", "transport of coal", "transport of ethanol by rail", "transport of ethanol by truck", "transport of fuel", "tree bark", "tree biomass-for-energy plantation", "Tree growth", "tree growths", "tree plantation", "tree root", "tree slashes", "tree slash", "tree stem", "tree trimming", "tree trunk", "tropical forest area", "tropical forest destruction", "tropical forest", "tropical industrial tree plantation", "tropical plantation", "tropical plantations of acacia", "Tropical timber", "tropical timbers", "tropical tree plantation", "tropical tree species", "truck fuel economy", "tube bundle", "tube cracking", "tube diameter", "tube erosion", "tube failure", "tube leak", "tube-to-tube sheet", "tubular tower", "tungsten alloy materials for boiler", "tungsten bulbs with energy", "turbine casing", "turbine coating", "turbine company", "turbine configuration", "turbine design dual mode operation", "turbine design", "turbine efficiency", "turbine exit", "turbine flow losses", "turbine flow loss", "turbine forging", "turbine foundation", "turbine generator", "turbine generator island", "turbine-generators", "turbine heat rate", "turbine inlet gas temperature", "turbine inlet temperature", "turbine location", "turbine manufacturer", "turbine output", "turbine per year depending", "turbine power production vertical axes", "turbine power production vertical axis", "turbine producing", "turbine rotor", "turbine running", "turbine section", "turbine supplier", "turbine unit", "turbine wind farm", "turbo diesel engine powers", "turbo-generator exhausting", "turbo-generator", "turbulences", "types of coal", "types of service", "ultra-clean fuel", "unburned carbon", "unburned carbon level", "unburned carbon losses", "unburned carbon loss", "unburned carbon objective", "unburned fuel back", "unburned fuel", "unburned hydrocarbon", "unconfined compressive strength", "uncontrolled emission", "uncontrolled wood boiler", "unconventional fuel", "underground coal", "underground deposit", "underground gas storage", "underground mine", "underground petroleum tanks", "underground piping", "underground power plant", "underground reservoir", "underground rock", "underground storage", "underground storage reservoir", "Underground storage reservoirs", "understanding geothermal energy", "undiscovered natural gas resource", "undisturbed forest balance", "undisturbed tropical forest", "undue harm to bird", "uniform energy efficiency", "uniform flue gas distribution", "unit of fuel product", "upper furnace burnout zone", "upper furnace cavity", "upper furnace region", "upstream emissions saving", "uranium fuel", "urban power grid", "usable heat energy", "usage of biomasses", "usage of biomass", "usage of energy", "utilities energy generation portfolio", "utility analyses", "utility analysis", "utility application", "utility bill", "utility boiler application", "utility boiler", "utility boiler manufacturer", "utility charge", "utility cogeneration", "utility companies", "utility cost", "utility demand-side management", "utility environment", "utility generation fuel mixes", "utility generation fuel mix", "utility grid", "utility", "Utility industry", "utility integration", "utility load", "utility market", "utility payment", "utility power plant", "utility purchase", "utility rebate", "utility requirement", "utility-scale geothermal power industry", "utility-scale geothermal power production", "utility-scale", "utility-scale power generation", "utility-scale wind energy", "utility-scale wind energy system", "utility-scale wind farm", "utility-scale wind installation", "utility-scale wind power expansion", "utility-scale wind power", "utility-scale wind power industry", "utility transmission area", "utility unit", "utility worker", "utilization of biomass energy", "utilization of biomasses", "utilization of biomass", "utilization of clean coal technology", "utilization of coal cinder", "utilization of coal energy", "utilization of coal", "utilization of coal mine waste", "utilization of coal mining waste", "utilization of coal pit water", "utilization of cost-effective option", "utilization of electricity", "utilization of energy", "utilization of fly ashes", "utilization of fly ash", "utilization of high efficiency esps", "utilization of renewable energy resource", "utilization of technologies for energy production", "utilization technique", "utilization technology", "vacuum pyrolysises", "vacuum pyrolysis", "vacuum pyrolysis processes", "vacuum pyrolysis process", "value of energy", "value of ethanol", "value of ethanol production", "vapor cell", "vapor pressure", "vapor pressure requirement", "vapor pressure standard", "vapor state", "vapour filtration", "vehicle", "vertical axes", "vertical-axis wind machine", "vertical-flow esp", "vertical-flow", "vertical gas flow", "vertical line", "vertical reactor", "vertical silo-type combustor", "vertical tower", "vertical tube furnace", "vertical tube", "vertical wall construction", "vertical wall", "viscosity of biomass pyrolysis oil", "viscosity of pyrolysis liquid", "viscosity reduction", "volatile alcohol", "volatile anthracite", "volatile bituminous coal", "volatile coal", "volatile coal nitrogen release", "volatile constituent", "volatile content", "volatile energy", "volatile fraction", "volatile international", "volatile matter", "volatile natural gases", "volatile natural gas", "volatile natural gasses", "volatile nitrogen conversion", "volatile nitrogen fraction", "volatile nitrogen", "volatile price", "volatile solid", "volatile species of boron", "volume of biomasses", "volume of biomass", "volume of ethanol", "volume of particulate", "volumetric energy density", "volumetric energy density of methane", "volumetric flow rate", "voluntary renewable energy goal", "vulnerability of energy system", "wastage of heat energy", "waste coal particle", "water fluxes", "water flux", "water heater market", "water heater to pipe", "water heating", "water heating industry", "water heating load", "water heating system", "water reactors", "watershed-scale ecological impact", "wave energies", "weldability", "wet alkali system", "wet bagasse", "wet bagasse with flue", "wet bottom", "wet electrostatic precipitator", "wet esp design", "wet esp", "wet esp technology", "wet feedstock", "wet feed system", "wet flue gas desulfurization", "wet fresh wood", "wet hardwood", "wet limestone", "wet milling", "wet mode", "wet particulate scrubber", "wet pellet", "wet raw wood", "wet scrubber", "wet scrubbing", "wet scrubbing system", "wet sludge product", "wet solid", "wet system", "wet wood", "wet wood pellet", "wholesale electric", "wholesale ethanol", "wholesale gasoline", "wholesale gasoline price", "wholesale powers", "wholesale price", "wholesale price of gasoline", "wholesale price of pentane", "wholesale service", "wholesale trades", "wildfires increase", "wind ancillary service", "wind area", "wind at low penetration level", "wind blow", "wind capacity", "wind capacity today", "wind capital cost", "wind carry", "wind cluster", "wind cost", "wind data", "wind datum", "wind developer", "wind development", "wind development project", "wind-disrupting building", "wind electricity production", "wind energy case", "wind energy consulting firm", "wind energy development", "wind energy generation", "wind energy in country", "wind energy map", "wind energy now account", "wind energy potential", "wind energy production capacity", "wind energy project", "wind energy projection", "wind energy system", "wind energy today", "wind equipment", "wind facility", "windfall profit", "windfall profit taxes", "windfall profit tax", "wind farm developer", "wind farm", "wind farming", "wind farm off cape cod", "wind farm outside", "wind farm problem", "Wind farms", "wind for electricity generation", "wind generating capacity", "wind generating potential", "wind generation", "wind industry", "wind installation", "wind machine", "wind motion", "wind park", "wind penetration", "wind plant", "wind plant operator", "wind plant size", "wind potential", "wind power bid", "wind power capacity addition", "wind power capacity", "wind power density classes", "wind power density class", "wind power density classis", "wind power development", "wind power development world wide", "wind power distribution", "wind power facility", "wind power generating capacity", "wind power generation", "wind power generator unit", "wind power industry", "wind power making", "wind power plant", "wind power potential", "wind power production", "wind power reaches", "wind power reach", "wind power resource", "wind powers", "wind power technology", "wind power today wind power", "wind power turbine", "wind present", "wind producer", "wind project", "wind resource", "wind resource potential", "wind rushes", "wind rush", "wind rushlight", "wind rustling leaf", "wind rustling leave", "wind sector", "wind shears", "wind site", "wind speed area", "Wind speed", "wind system", "Wind systems", "wind technology", "wind turbine information", "wind turbine operator", "wind-turbine park", "wind turbine running", "wind turbine site", "wind turbine technology", "wind velocities", "wind water pumping system", "winter heating fuel requirements", "winter heating load", "winter load", "wood alkalies", "wood alkali", "wood biomasses", "wood biomass", "wood break", "wood burning", "wood chipper", "wood density", "wood-ethanol", "wood feedstock", "wood fiber", "wood formation", "wood from municipality", "wood fuel pilot plant", "wood gasification", "wood hauling", "wood hemicellulose", "wood leaving", "wood masses", "wood mass", "wood material density", "wood oven-dry weight", "wood pellet", "wood pelleting facilities of interest", "wood pellet-making facility", "wood pellet production facility", "wood pellet production", "wood pellets as electricity", "wood piece", "wood piece masses", "wood piece mass", "wood price", "wood processing mill residue", "wood processing necessary", "wood product", "wood production due", "wood property", "wood pulp for paper", "wood pulp plantation", "wood pyrolysises", "wood pyrolysis", "wood pyrolysis oil", "wood quality", "wood residue data", "wood residue datum", "woody biomass residue", "woody crop", "woody masses", "woody mass", "world coal consumption", "world coal production", "world consumption", "world energy consumption", "world energy production", "world oil consumption", "world oil production", "world primary energy production", "zero emission", "zero emissions energy", "Zero emissions", "zero ethanol case", "zero ethanol production case", "zero ethanol scenario emission", "zero fuel cost", "zero masses", "zero mass", "zero net present value", "zero revenue item", "zonal tropical soil"]
  }, {
    "name": "Electric Power",
    "words": ["acoustoelectric device", "benefits of electrification", "biogas generated electricity", "carbon mitigation policy", "cogeneration of electric power & heat", "conductivity", "decentralized rural electrifications", "demand for electricity service", "dielectric property", "electrical accident", "electrical appliance", "electrical burn", "electrical calibrations", "electrical capacities", "electrical characterization", "electrical cogeneration", "electrical demand", "electrical efficiencies", "electrical efficiency", "electrical engineering", "electrical engineering planning", "electrical fault", "electrical generation capacities", "electrical generation capacity", "electrical generation facilities", "electrical generation facility", "electrical generation", "electrical generator", "Electrical grid", "electrical grids", "electrical hardware", "electrical impedance", "electrical installation", "electrical institute", "electrical interconnection", "electrical interference", "electrical machinery industries", "electrical market", "electrical medical equipment", "electrical network", "Electrical output", "electrical outputs", "electrical plant", "electrical power capacities", "electrical power capacity", "electrical power system", "electrical price", "electrical property", "electrical propulsion", "electrical protection equipment", "electrical resistances", "electrical resistivities", "electrical safeties", "electrical storage device", "Electrical storage devices", "electrical student", "electrical systems", "electrical technologies", "electrical technology", "electric appliance", "electric arc furnace steel", "electric backstop", "Electric bus", "electric busses", "electric commodities", "electric commodity", "electric conductor", "electric converters", "electric cooking", "electric cooperative", "electric demand", "electric enclosure", "electric energies", "electric energy consumption", "electric energy consumption relative", "electric energy demand", "electric energy final consumption", "electric energy generation", "electric energy", "electric energy output", "electric energy participation", "electric energy production", "electric energy use", "electric engineerings", "electric engine", "electric fence", "electric field", "electric field pollution", "electric fishing", "electric furnace", "electric generating capacities", "electric generating capacity", "electric generating facilities", "electric generating facility", "electric generation capacities", "electric generation capacity", "electric generation displacement", "electric generation over baseline generation", "electric generation system", "electric generator exhaust", "electric generator unit", "electric grid generation", "electric grid", "electric grid worksheet", "electric heat pump", "electric hot water heater", "electric hybrid vehicle", "Electric hybrid vehicles", "electrician", "electric industry", "electric industry output", "electric insulators", "electricity act", "electricity assets", "electricity associations", "electricity at power plant", "electricity authorities", "electricity authority", "electricity auto-producer", "electricity bill", "Electricity bills", "electricity blackouts in shanghai", "electricity block rate", "electricity capacity planning", "electricity code", "electricity cogeneration share", "electricity component", "electricity conservations", "electricity consumers", "electricity consumption per unit", "electricity consumption taxes", "electricity consumption tax", "electricity cost saving", "Electricity costs", "electricity creations", "electricity dealer", "electricity deliveries", "electricity delivery", "electricity demand end-use service", "electricity demand growth", "electricity demand growth rate", "electricity demand information", "electricity demand program", "electricity development", "electricity development institute", "electricity directives", "electricity displacement", "electricity distribution networks", "electricity distribution pricing", "electricity distribution tariff", "electricity distributors", "electricity efficiencies", "Electricity efficiency", "electricity equivalent", "electricity exchange", "electricity experience", "electricity finance", "electricity forecast", "electricity for energy market", "electricity for home", "electricity from cogeneration", "electricity from heat", "electricity from local power plant", "electricity fuel dispatches", "electricity fuel dispatch", "electricity generating activit", "electricity generating authorit", "electricity generating authorities", "electricity-generating backstop technologies", "electricity-generating backstop technology", "electricity generating cost studies", "electricity generating cost study", "electricity generating sector", "electricity generation asset", "electricity generation authorities", "electricity generation authority", "electricity generation baseline", "electricity generation capacity", "electricity generation component baseline boundaries", "electricity generation component baseline boundary", "electricity generation costs", "electricity generation facilities", "electricity generation facility", "electricity generation from coal", "electricity generation in building", "electricity generation mixes", "electricity generation mix", "electricity generation project", "electricity generation sector", "electricity grid development", "electricity importer", "electricity import", "Electricity industry", "electricity industry restructuring program", "electricity interruptions", "Electricity investment", "electricity laws", "Electricity liberalization", "electricity liberalizations", "electricity lifeline", "electricity life line rate", "electricity load cycling", "electricity load", "electricity load shifting", "electricity market competition", "electricity market division", "electricity market high network usage", "electricity market law", "electricity market liberalization", "electricity market model", "electricity market module", "electricity market operation", "electricity market price", "electricity market reform", "electricity market region", "electricity markets", "electricity market structure", "electricity market system", "electricity minister", "electricity mixes", "electricity mix", "electricity need", "electricity network", "electricity operations", "electricity outages", "Electricity output", "electricity outputs", "electricity participation", "electricity payments", "electricity per year through project", "electricity plant conversion", "electricity plant equipment industry", "electricity power sector", "electricity price increase", "electricity prices for household", "electricity price under competition", "electricity pricing", "electricity pricing policies", "electricity pricing policy", "electricity producer", "electricity product", "electricity provider", "electricity purchase contract", "electricity purchase price", "electricity purchase procedure", "electricity rates", "electricity regulations", "electricity regulator", "electricity reliability", "electricity restructuring debate", "electricity restructuring issue", "electricity retailer", "electricity retail", "electricity revenue", "electricity sales growth", "electricity sales", "electricity sales income", "electricity sales production", "electricity sales revenue", "electricity saving", "electricity sector emission", "electricity sector restructuring activities", "electricity sector restructuring activity", "electricity sector restructuring", "electricity securities", "electricity service cost structure", "electricity service pricing", "electricity services demand", "electricity share", "electricity source", "electricity subsector", "electricity suppl", "electricity suppliers", "Electricity supplies", "Electricity supply", "electricity supply industry structure", "electricity supply services", "electricity supply worker", "electricity system licensee", "electricity tariff guideline", "electricity taxes", "electricity tax", "electricity to remote area", "Electricity trade", "electricity trades", "electricity trading", "electricity transmission companies", "electricity transmission company", "electricity transmission network", "electricity transmission regulation", "electricity transmissions", "electricity usage", "electricity use for office equipment", "Electricity use", "electricity uses", "electric lane", "electric lines", "electric line siting", "electric load curve analyses", "electric load curve analysis", "electric load", "electric machineries", "electric machinery", "electric machinery industries", "electric machinery industry", "electric & magnetic field", "Electric & magnetic fields", "electric market", "electric market price", "electric measuring instrument", "electric motor", "Electric networks", "electric noise", "electric oven", "electric plant burning oil", "electric plant", "Electric Plants", "electric power demands", "electric power division", "electric power firm", "electric power from fuel cell", "electric-power", "electric power in high-insolation area", "electric power interruption", "electric power marketplace", "Electric power plant conversion", "Electric power plants", "electric power producer", "electric power replacement", "electric power requirement", "electric power research institute", "electric power station", "electric power steering", "electric power substations", "electric power system", "electric power transmission lines", "electric product", "electric production", "electric project", "electric pump", "electric rationing", "electric refrigerator", "electric reliability organization", "electric repair", "electric resistance water heater", "electric resistance wiring", "electric screen", "electric sector fuel mixes", "electric sector fuel mix", "electric sector", "electric space cooling", "electric storage water heater", "electric supplier", "electric supplies", "electric supply", "electric supply system", "electric system", "electric technologies", "electric technology", "electric transformers", "electric transmission line", "electric utilities cost", "Electric utilities costs", "Electric utilities environmental aspects", "Electric utilities finance", "Electric utilities government policy", "Electric utilities load management", "Electric utilities management", "electric utilities rates", "electric utilities security", "electric utilities taxation", "electric utility companies", "electric utility company", "electric utility crises", "electric utility crisis", "electric utility legislation", "electric utility rates", "electric utility restructuring debate", "electric utility restructuring", "electric vehicle recharging infrastructure", "electric vehicle sale", "electric water heating", "electric work", "electrification project", "electrification scheme", "Electrification schemes", "Environmental costing of electric utilities", "environmental costing of electric utility", "eolian electricities", "eolian electricity", "eolian energies", "eolian energy", "eolian energy reference center", "eolian equipment", "eolian generation project", "eolian park", "eolian project", "eolic generation", "eolic project", "hydroelectric power project", "hydroelectric power researches", "hydroelectric power research", "hydroelectric project", "hydrothermal electric power system", "hydrothermal energies", "industrial consumption of electricities", "industrial consumption of electricity", "micro hydroelectric power", "mine electrical system", "nonrenewable electricities", "nonutility generator", "on site electric power production", "photoelectric device", "piezoelectricities", "protected electrical equipment", "radio properties of electricities", "radio properties of electricity", "railroad electrifications", "railway electrification", "regional electric power network", "renewable electricities", "residential electric space heat", "retail electricity tariff", "rural electricities", "solar generated electricities", "subsidized electricity price", "superconductivities", "sustainable electrical powers", "sustainable electrical reticulations", "sustainable electric powers", "total energy system", "urban electricity service", "village electrification", "village powers", "wind generated electricity", "wind powered electricity generations"]
  }, {
    "name": "Hydro Power",
    "words": ["access by maintenance vessel", "actual hydro output", "actual sediment transport assessment", "additional hydro capacity", "additional hydro-electric generating capacity", "aggregate hydro capacity", "aggregate impacts from construction", "air driven generator", "allocation of power", "alternative cable pole", "alternative power generation", "annual hydro output", "annual net energy production", "appropriate hydro development", "appropriate hydropower development", "appropriate scale hydro", "artificial channel", "artificial impoundment", "artificial load", "attractive hydropower", "attractive hydro project", "auld turbine", "average annual generating capacity", "average annual generation", "average annual output capability", "average annual output", "avoidance of cavitation", "backward bent duct buoy", "Banki turbine", "bank of turbine", "barrage construction", "barrage design", "barrage developer", "Barrage", "barrage system", "basin area", "basin country", "basin initiative", "battery charging", "beam echo sounder", "benefits of hydropower", "bird population", "blade velocity", "blank caisson", "blue energy", "capacity of small-scale hydro plant", "capacity of small-scale hydropower", "capital cost of equipment", "capturing wave energy", "classification of hydropower", "classification of turbine type", "clean power", "clean renewable hydropower", "clean renewable source", "coastal community", "coastal morphology", "coastal sea", "coastal situation", "coastal utility", "Coastline", "coastlines", "commercial grid-connected turbine", "commercial turbines in operation", "commercial wave energy installation", "commercial wave power", "conflicts over land use", "considerable hydro-electric potential", "considerable hydro potential", "continuous power output", "control of wave-energy converter", "conventional barrage", "conventional fossil-fuel alternative", "conventional low-head turbine", "cylindrical segment", "dam construction", "dam engineering", "dam professional", "dam project", "deep lake water cooling", "deep water resource", "deep water wave", "deep water wave power resource", "desalination", "development of dam", "development of hydro-electricity", "development of hydropower", "development of large-scale hydropower", "development of tidal energy resource", "diffusion", "diurnal effect", "diurnal movement in water", "double circuit line", "double float system", "downstream activities", "downstream activity", "downstream alignment", "downstream businesses", "downstream business", "downstream riparian region", "ebb generation cycle", "ebb generation", "ebb tide water", "economically feasible hydropower", "economics of micro-hydro power", "electro dialyses", "electrodialysises", "electro dialysis", "electronic load controller", "elliptical trajectories", "elliptical trajectory", "energy from hydro", "energy from tide", "energy of wave", "energy production", "Energy shortages", "energy smoothing system", "energy wave", "enormous hydro-electric potential", "enormous hydropower potential", "environmental acceptabilities", "environmental acceptability", "environmental aspects of dam construction", "environmental assessment of power development", "environmental benefits of hydropower", "environmental consideration", "Environmental considerations", "environmental impact", "environmental sensitivities", "environmental sensitivity", "evaluation of wave condition", "excess energies", "excess energy", "existing breakwater", "existing estuarine ecosystem", "existing hydro industries", "existing hydro industry", "existing hydro station", "expensive hydraulic governor", "experimental tidal power station", "exploitable hydro capabilities", "exploitable hydro capability", "fall", "fetches", "fetch", "first wave", "first wave power plant", "fish elevator", "fishery exclusion", "fish-friendly turbine", "fish friendly turbine", "fish ladder", "fish lift", "fish migration", "fish passes", "fish pass", "fishways", "floating buoy", "floating device", "floating structure", "floating wave energy power station", "floating wave power vessel", "flood control project", "flood generation", "flood mitigation", "flood protections", "flow data", "flow datum", "flow generation", "flowing water", "flow of air", "flow of innovation", "flow of water", "flow rates", "fluctuation in river flow", "Francis turbine", "fully developed sea", "future hydropower development", "generation of hydro-electricity", "good tidal range", "gravitational attraction", "gravitational fields", "gravities", "Gravity", "grid connection", "grid system", "gross theoretical capabilities", "gross theoretical capability for hydro-electricity", "gross theoretical capability", "gross theoretical hydro capabilities", "gross theoretical hydro capability", "gross theoretical hydro potential", "gross theoretical hydropower potential", "head", "head of water", "head run-of-river", "head turbine", "high head water supplies", "high head water supply", "high marine current flow", "high marine current", "high spring tide", "high tidal range", "hose pump", "huge hydro-electric", "human aspects of hydropower", "human aspects of hydropower scheme", "hybrid mixture", "hydraulic conductivities", "hydraulic energies", "hydraulic energy", "hydraulic engineering", "Hydraulic fill", "hydraulic fills", "hydraulic flow", "hydraulic flow pattern", "hydraulic fluid", "hydraulic force", "hydraulic generation", "hydraulic generator", "hydraulic heads", "hydraulic jumps", "hydraulic load", "hydraulic machineries", "hydraulic minings", "hydraulic model", "hydraulic motor", "hydraulic orifice", "hydraulic plant", "hydraulic power", "hydraulic property", "hydraulic pump", "hydraulic regime", "hydraulic resource", "hydraulic structure", "hydraulic system", "hydraulic transport", "hydraulic turbine dynamic", "hydraulic turbine", "hydric erosions", "hydro agenda", "hydro agendum", "hydro asset", "hydro bid price", "hydro bundle", "hydro capabilities", "hydro capability", "hydro capacity in operation", "hydro capacity under construction", "hydrocarbon derivative", "hydro design", "hydro developer", "hydro development", "hydro development potential", "hydrodynamic aspects", "hydrodynamics of wave energy device", "hydro-electric capacities", "hydroelectric capacities", "hydro-electric capacity", "hydroelectric capacity", "hydroelectric development", "hydroelectric facilities", "hydroelectric facility", "hydroelectric generation", "hydroelectric generator", "hydro electricities", "hydroelectricities", "hydro electricity generation", "hydro electricity", "hydro electricity production", "hydroelectric potential", "Hydroelectric power development", "hydroelectric power developments", "hydroelectric power potential", "hydroelectric power researches", "hydroelectric power research", "hydro-electric powers", "Hydroelectric power stations", "hydroelectric production capacities", "hydroelectric production capacity", "hydroelectric production", "hydroelectric project", "hydroelectric site", "hydroelectric stations", "hydro energies", "hydro facilities", "hydro facility", "hydro generating capacities", "hydro generating capacity", "hydro generating facilities", "hydro generating facility", "hydro generating plant", "hydro-geology investigation", "hydrogeomorphic approaches", "Hydrogeomorphic approach", "hydrographic advantage", "hydrographic basin", "hydrographic survey", "hydrographies", "hydro industries", "hydro industry", "hydro infrastructure", "hydro in operation", "hydro installation", "hydro investment cost", "hydrological condition", "Hydrological cycles", "hydrological disaster", "hydrological event", "Hydrological forecasting", "hydrological information", "Hydrological interference", "hydrological interferences", "hydrological model", "hydrological monitoring survey", "hydrological network", "hydrological resource", "hydrological risk", "hydrological service", "hydrological station", "hydrological studies", "hydrological study", "hydrological survey", "hydrological system", "Hydrologic regime", "hydrologic resource", "hydrologic stabilities", "hydrologic stability", "hydrologic variabilities", "Hydrologic variability", "hydrologies", "hydrology research", "hydrometries", "hydro opportunities", "hydro opportunity", "hydro output", "hydropattern", "hydroperiod", "hydroplane device", "hydro plant", "hydro plants life expectancies", "hydro plants life expectancy", "hydroponic plant", "hydro portfolio by project type", "hydro potential", "hydropower asset", "hydropower association", "hydropower code", "hydropower council", "hydropower developer", "hydropower development", "hydropower engineer", "hydropower expertise", "hydro power facilities", "hydropower facilities", "hydro power facility", "hydropower facility", "hydro power generation", "hydropower generation", "hydropower innovation", "hydropower installation", "hydropower investment", "hydropower operator", "hydropower output", "hydropower plan", "hydro power plant capacities", "hydro power plant capacity", "hydro power plant facilities", "hydro power plant facility", "hydro-power plant", "hydro power plant", "hydropower plant", "hydropower potential", "hydropower production", "hydro power project", "hydropower project", "hydropower resource", "hydropower scheme", "hydropower sector", "hydro powers", "hydropowers", "hydropower site", "hydro power station", "hydropower station", "hydro power supplies", "hydro power supply", "hydro power system", "hydropower system", "hydropower technologies", "hydropower technology", "hydropower unit", "hydropower upgrade", "hydro production", "hydro project financing", "hydro project", "hydro rehab", "hydro replacement", "hydro resource base", "hydro scheme", "hydro sector", "hydro site", "hydro source", "hydrosphere", "hydrostatic pressures", "hydrostatic pump", "hydro station", "hydro system", "hydro system simulation", "hydro tariff", "hydro technologies", "hydro technology", "hydrothermal electric power system", "Hydrothermal vents", "hydro turbine", "hydro use", "incremental environmental impact", "industrial water supplies", "intake", "intake pipe", "Intakes", "intake weir", "international hydropower association", "International watercourse development", "international watercourse developments", "international watercourse", "International watercourses", "international wave community closer", "intertidal mud flat", "intertidal zonation", "jet turbine", "Kaplan turbine", "large diameter rim-generator", "large electricity grid", "large hydro concession", "large hydro development", "large hydro project", "large hydro scheme", "large increase in hydro-electric capacities", "large increase in hydro-electric capacity", "large marine current", "larger hydro scheme", "large thermal movement", "large tidal energy potential", "large tidal energy resource", "large tidal range", "large tide", "large volumes of water", "linear hydrodynamic simulation", "load characteristic", "load control governor", "load factor", "load limiter", "load pattern", "load shedding", "low flow water supplies", "low flow water supply", "marine current energies", "marine current energy", "marine current energy resource", "marine current energy use", "marine current farm", "marine current generator", "marine current", "marine current resource", "marine current turbine", "marine current velocities", "marine current velocity", "marine energies", "marine energy", "marine energy resource", "marine energy solution", "marine mammal", "marine renewable energies", "marine renewable energy", "marine renewable energy industries", "marine renewable energy industry", "maritime province", "mean tidal range", "micro hydroelectric power", "Micro Hydro", "micro hydro", "micro-hydro power", "micro hydro power", "microhydro power", "micro hydro scheme", "micro-hydro system", "micro hydro system", "migrating fishes", "migrating fish", "migratory bird population", "milling", "mini hydro-power", "mini hydro power", "Minihydropower", "modern micro-hydro set", "moving water", "national grid", "national grid system", "national power authorities", "national power authority", "national renewable energy strategies", "national renewable energy strategy", "national water strategies", "national water strategy", "natural tidal flow", "neap cycle", "net emissions from reservoir", "net emissions from reservoirs", "new hydro electric plant", "new hydro plant", "new power generation capacities", "new power generation capacity", "new power sector entities", "new power sector entity", "new turbine", "new turbines", "next generation of hydropower", "next generation of hydropowers", "noria", "Ocean current", "ocean current powers", "ocean dam", "ocean developments", "Ocean diffusion", "ocean diffusions", "ocean energies", "ocean energy resource", "Ocean environment", "ocean power deliveries", "ocean power delivery", "ocean power technologies", "ocean power technology", "ocean researches", "ocean research", "ocean surface wave", "ocean swell", "ocean thermal energy conversion", "ocean thermal", "ocean wave powers", "offshore reservoir", "onshore wave power station", "oscillating hydroplane", "osmoses", "osmotic power", "output of hydro-electricity", "peak electrical demand", "peak load", "pico hydro", "pico hydro power", "pollutant", "post-barrage current strength", "post-barrage distribution", "post-barrage survival", "potential for hydropower", "potential hydro generation", "potential hydropower", "power coefficient", "power crises", "power crisis", "power demand growth rate", "power export contract", "power from wave", "power generator unit for demonstration", "power module", "power sector development policies", "power sector development policy", "power sector reform", "power sector restructuring processes", "power sector restructuring process", "power service", "power shortage", "Power stations", "power supply", "prevailing wind", "private hydro concession", "private hydro developer", "private hydro development", "private hydropower", "propeller type turbine", "raft wave energy conversion system", "rainfall", "raps", "reforestation", "remote area power supplies", "remote area power supply", "renewable electricities", "reservoir head", "resettlement", "reversed electric motor", "reverse electro dialyses", "reverse electro dialysis", "reverse osmoses", "river basin carbon budget", "river dam", "River dams", "river estuaries", "river estuary", "river flow", "river micro hydro scheme", "role of hydropower", "rough sea", "run-of-river power", "run-of-river project", "run of river project", "run-of-the-river hydroelectric power", "run of the river hydroelectric power", "salinities", "salmon", "sawmill", "seafloor", "seafloor pressure transducer", "sediment accumulations", "Sedimentation management", "sedimentation managements", "sediment diversion", "Sediment erosion", "sediment erosions", "Sediment load", "sediment management", "shaft power", "shallow sea", "ship lock", "shore based wave power", "sluice gate", "sluice", "small hydro concession", "small hydro plant", "small hydropower", "small hydro power scheme", "small hydro scheme", "small hydro sector", "small hydro station", "small scale capacities", "small scale capacity", "small scale exploitation of river", "small scale harnessing", "small scale hydro", "small scale hydro installation", "small scale hydro plant", "small scale hydro power", "small scale hydropower", "small scale hydro scheme", "small scale hydro technologies", "small scale hydro technology", "small scale water power", "spawning run", "spring tidal range", "steam generation", "steam", "steam power generation", "steam power", "steam supplies", "steam supply", "stream", "sustainable energies", "sustainable hydropower", "tailrace", "tidal amplitude", "tidal barrage", "tidal condition", "tidal current", "Tidal cycle", "tidal dissipation", "tidal electric", "tidal energy barrage", "tidal energy potential", "tidal energy scheme", "tidal fence", "tidal flow", "tidal heights", "tidal lagoon", "tidal plant construction", "tidal plant", "tidal plants at site", "tidal power development", "tidal power generation", "tidal power generator", "tidal power plant", "tidal power project", "tidal power scheme", "tidal powers", "tidal power station", "tidal project", "Tidal range", "tidal ranges", "tidal stream energy", "tidal stream", "tidal stream power", "tidal swell", "tidal wave length", "tide energies", "tide flood station", "tide", "tide mill", "total hydro capacity", "total hydro-electric generating capacity", "total hydro-electricity", "total hydro level", "turbidity", "turbine draft", "turbine flow measurement", "turbine generator", "turbine operation", "turbogenerator", "Tyson turbine", "vapor energy", "vertical axis turbine", "vertical height", "vertical height of water level", "vertical tube underneath", "voltage output", "water column device", "water column", "water course", "water dam", "water density", "waterfall", "water flowing", "water from aquifer", "water harbor breakwater", "water levels", "water mill", "watermill", "water movement", "water powerered mill", "water power", "water power resource", "water pressure", "water resources development", "water resources development potential", "water resources development project", "water resources management", "water-rich area", "water rich area", "water right", "water storage capacity", "water storage", "water treatments", "water turbine", "water velocity", "water volumes", "wave action", "wave breaker", "wave condition", "wave dragon", "wave energies", "wave energy atlases", "wave energy atlas", "wave energy commentary", "wave energy community", "wave energy conversion", "wave-energy converter", "wave energy converter", "wave energy device", "wave energy funding", "wave energy module", "wave energy power", "wave energy researches", "wave energy research", "wave energy system economics", "wave energy system", "wave energy technology", "wave energy unit", "wave farm", "wave front", "wave generator", "wave", "wave kinetic energy", "wavelength", "wave motion", "wave park", "wave power buoy", "wave power device developer", "wave power generator", "wave-power", "wave power industry", "wave power plant", "wave powers", "wave power station", "wave power system", "wave power technology", "wave project", "wave pump", "wave resource", "Waves", "Wave speed", "wave speeds", "wave swing", "wells turbine", "wind counterpart", "wind energy industry", "zero declination", "zero visual impact"]
  }, {
    "name": "Oil, Gas and Coal Energy",
    "words": ["absence of gas production", "absence of transmission infrastructures", "absolute barrel prices", "absorption dehydration", "absorption method", "activities in extractive industries", "affinity for sulfur", "agricultural based petroleum substitutes", "alcohol fuel industries", "alternate fuels substitution programs", "Alternative fuels market", "alternative transport fuel investment", "alternative transport fuels", "amine absorption process", "amine process", "amine solution", "Animal dung as fuel", "anticlinal slopes", "aquifer development", "aquifer formation", "aquifer storage", "arctic sources", "asphaltic bases", "atmospheric conditions", "automobile fuel consumption standard", "automobile motor exhaust gas", "automotive engines", "automotive fuel consumption", "average oil prices", "barrel prices", "base load storage capacity", "base load storage facility", "base load storage requirements", "biofuel programs", "biological fuels", "biomass consumption", "biomass cooking", "biomass resources", "biomass sectors", "biomass supply", "biomass usage", "block valve installation", "boilers fuels", "burning coal", "burning natural gas", "butane splitters", "carbon ratios", "cetane", "charcoal burning", "charcoal making", "charcoal markets", "chicle", "clean development mechanisms", "coal ash", "coal ash management", "coal desulfurization", "coal dust blowing", "coal environmental aspects", "coal lease", "coal mining equipment", "coal mining industry", "coal mining methods", "coal outbursts", "coal pipelines", "coal pitch", "coal prices", "coal transportation", "cogeneration application", "competition for market shares", "competition in gas imports", "competition tribunal authority", "competitive bidding process", "competitive wholesale sector", "compressor station inlets", "compressor stations", "concession by concession basis", "contract management fees", "contract portfolios", "contracts buyer", "contract transfer processes", "contract transfers", "Contractual arrangements", "contractual positions", "Contractual relationships", "corrosive product", "cost reducing effect", "cracking process", "crude oil assets", "crude oil drilling", "crude oil export revenue", "crude oil exports", "crude oil imports", "crude oil inventories", "crude oil inventory holdings", "crude oil inventory instruments", "crude oil inventory levels", "crude oil inventory product", "crude oil markets", "crude oil price declines", "crude oil price differentials", "crude oil price projection", "crude oil price risks", "crude oil price volatility", "crude oil pricing", "crude oil procurement", "crude oil production capacity", "crude oil production", "crude oil production smoothing", "crude oil production smoothing model", "crude oil properties", "crude oil storage", "crude oil transfers", "crude oil transportation", "cryogenic expander process", "cryogenic processes", "cycle generation facilities", "densified refuse derived fuel", "dependence on biofuels", "depletion premiums", "depot", "development drilling", "diesel engine industry", "diesel engine power", "diesel fuel reformulation", "dispersion premium", "distribution charges", "distribution companies", "Distribution networks", "distribution pipes", "domestic crude oil sales", "downstream gas laws", "downstream gas market penetration", "downstream operations", "drill bits", "drill cutting", "drilling operations", "dry holes", "econometric estimates", "economic geologies", "economic perspective", "economic stabilities", "electric logging", "elemental sulfur production", "emission reduction", "emissions levels", "emissions profiles", "emissions reduction unit", "empirical results", "empirical support", "energy conservation strategies", "energy information administration", "entrapping hydrocarbon", "envelope theory", "environmental damage", "environmental protection agency", "environmental regulation", "equal access to fuel markets", "exploration and development rights", "exploration and production licenses", "exploration contracts", "exploration period", "exploratory wells", "extraction and distribution equipment", "extraction equipment", "extractive industries investments", "extractive industries transparency initiatives", "extractive industry reviews", "firewood collection", "firewood crop", "firewoods", "fiscal incentive", "fiscal stability", "fiscal systems", "flaring management", "flaring practices", "flaring reduction projects", "flash tank separator-condensers", "flash tank separators", "floating oil rigs", "Flue gas", "fluid mixtures", "fob price plus transport", "foreign gas companies", "foreign gas investors", "foreign gas sources", "foreign gas suppliers", "foreign sellers", "formation fluid", "forward convenience yields", "forward price spread", "fossil energy", "fossil fuel burning", "fossil fuel dependencies", "fossil fuel dependency", "fossil fuel emissions", "fossil fuel imports", "fossil fuel prices", "fractionation", "fractionation process", "fuel adjustments", "fuel adulteration", "fuel allocation", "fuel collection", "fuel connsumption patterns", "fuel conversion", "fuel cost savings", "fuel costs", "fuel cycle", "fuel decomposition", "fuel demand", "Fuel economy certification", "fuel efficient vehicles", "fuel engineering", "fuel exports", "fuel levies", "fuel markets", "fuel minerals industry", "fuel mixes", "fuel oil exports", "fuel oil imports", "fuel oil production", "fuel oil products", "fuel oil truck loading", "fuel price fluctuation", "fuel price revisions", "fuel procurement", "fuel products", "fuel quality", "fuel quality monitoring", "fuel quality standards", "Fuel refinement", "fuel reformulation", "fuel reserves", "fuels consumption", "fuel shortages", "fuel storage", "fuel substitution", "fuel supply", "fuel switching costs", "fuel switching", "fuel technologies", "fuelwood conservation", "fuelwood crises", "fuelwood development", "fuel wood", "fuelwood stumpage", "gam transmission companies", "gas activities", "gas agreements", "gas allocation policy", "gas analyses", "gas authorities", "gas authority", "gas availability", "gas bills", "gas business", "gas buyers", "gas clauses", "gas collection", "gas commercialization", "gas companies", "gas compression", "gas concentration", "gas condensate wells", "gas conglomerates", "gas connections", "gas consumers", "gas consumption", "gas control & recovery systems", "gas corridors", "gas delivery", "gas demand projections", "gas deposits", "gas depots", "gas development", "gas development projects", "gas development surcharges", "gas directives", "gas discoveries", "gas dispatch centers", "gas distribution costs", "gas distribution industries", "gas distribution infrastructure", "gas distribution networks", "gas distribution regions", "gas distribution restructuring", "gas distribution systems", "gas distributors", "gas emissions", "gas emissions reductions", "gas engine-driven generator", "gaseous biomass", "gases exhaust", "gas exploration investments", "gas exploration processes", "gas exploration promotion", "gas exploration techniques", "gas exploration units", "gas export infrastructures", "gas export sales", "gas export schemes", "gas feeds", "gas feedstocks", "gas field appraisals", "gas field compression", "gas field development", "gas field production", "gas field reservoirs", "gas financing", "gas fired boilerhouses", "gas flaring reduction", "gas flow control", "gas flow measurement", "gas flows", "gas gathering facilities", "gas gathering systems", "gas hydrates", "gasification plants", "gasifiers", "gas imaging techniques", "gas import costs", "gas import infrastructure", "gas import pipeline infrastructure", "gas industry developments", "gas industry efficiency", "gas industry finance", "gas industry private operation", "gas industry restructuring", "gas industry structure", "gas infrastructure expansion", "gas infrastructure investments", "gas infrastructure planning", "gas inspections", "gas in submerged lands", "gas intake", "gas intensive industries", "gasket leakage", "gas leaks", "gas licensing", "gas lines", "gas management", "gas market activity", "gas market competition", "gas market development", "gas market economy", "gas marketers", "gas market information", "gas marketing", "gas marketing licenses", "gas market opportunities", "gas market penetration", "gas market reform", "gas market regulations", "gas market restructuring", "gas market risk", "gas market shares", "gas market size", "gas market strategies", "gas market structure", "gas market supply", "gas monopolies", "gas-oil molecule", "gasoline combustion", "gasoline components", "gasoline consumption", "gasoline emissions", "gasoline engine power", "gasoline engines", "gasoline pools", "gasoline pricing", "gasoline reformulation", "gasoline subsidies", "gasoline volatility", "gas outbursts", "gas output", "gas ownership", "gas pipeline companies", "gas pipeline configuration", "gas pipeline projects", "gas pipeline routes", "gas pipeline rupture", "gas pipeline systems", "gas planning", "gas policy formulation", "gas policy goals", "gas powered vehicles", "gas power plants", "gas price agreements", "gas price ceilings", "gas price frameworks", "gas price indices", "gas price liberalization", "gas price revision", "gas price subsidy", "gas pricing framework", "gas pricing policy", "gas pricing principles", "gas pricing proposals", "gas pricing reform", "gas pricing structures", "gas processing engineers", "gas processing facilities", "gas processing", "gas processing plants", "gas processors associations", "gas producers", "gas production capabilities", "gas production companies", "gas production decline", "gas production equipment", "gas production forecasts", "gas production", "gas production increases", "gas production investments", "gas production levels", "gas production phases", "gas production ratio", "gas production strategies", "gas productive capacity", "gas profits", "gas purchases", "gas purification", "gas recovery equipment", "gas recovery", "gas regulator", "gas regulatory environment", "gas regulatory frameworks", "gas regulatory policy", "gas release", "gas release programs", "gas researches", "gas reserve assessments", "gas reserve promotion", "gas reservoir", "gas safety programs", "gas sales", "gas saturation", "gas shippers", "gas shipping business", "gas shortages", "gas storage businesses", "gas storage licensees", "gas storage licensing", "gas storage provision", "gas storage statistics", "gas streams", "gas substitution", "gas supply systems", "gas swaps", "gas sweetening plants", "gas sweetening processes", "gas sweetening process", "gas system development", "gas systems", "gas technology institutes", "gas trade groups", "gas traders", "gas transfers", "gas transit agreement", "gas transmission and distribution companies", "gas transmission businesses", "gas transmission capacity", "gas transmission industries", "gas transmission infrastructure", "gas transmission networks", "gas transmission planning", "gas user", "gas uses", "gas usufruct agreements", "gas utilization development", "gas utilization equipment", "gas utilization", "gas utilization infrastructure", "gas venting", "gas wells", "geological condition", "geological models", "geological survey offshore seismology", "geophysical teams", "geothermal data", "geothermal drilling data", "geothermal heat sourcing", "geothermal sources", "geothermal systems", "geothermal water", "global environment", "global impact", "global standards", "glycol absorbing water", "glycol particles", "goods transport", "gravitational fields", "greenhouse gas assessments", "greenhouse gas emissions assessments", "heaters", "high pressure transmission", "household fuel expenditures", "hydrocarbon accumulation", "hydrocarbon discoveries", "hydrocarbon generation", "hydrocarbon law", "hydrocarbon potential", "hydrocarbon reserves", "hydrodynamic influence", "hydrogen as fuel", "hydrogen energy", "hydrogen sulfide content", "import terminals", "industrial applications", "industrial smokestacks", "interfuel substitutions", "international relations", "interstate pipeline restructuring", "interstate pipelines", "investment in ei", "large pipeline transmissions", "lead in gasoline", "leak detection equipment", "leak safety education", "legal restructuring", "legal term", "licensee", "light truck fuel standard", "liquefied petroleum gas costs", "liquefied petroleum gas", "liquefied petroleum gas stove costs", "liquid petroleums", "liquid removal", "liquids recovery", "local compressor stations", "local gas distributions", "location of deposits of petroleum", "low levels of nitrogen oxides", "magnetic measurement", "magnetometer technologies", "marginal cost equations", "marginal value of inventories", "measurement and control systems", "mercaptan", "methane concentration", "Methane gas recovery", "mineral depletion", "mineral development rights", "mineral", "mineral oil safety regulations", "minimum gas purchase projections", "mining usufruct fees", "motor fuels conservations", "motor fuels price", "motor fuels taxations", "multilateral intergovernmental agreements", "national energy marketers association", "national gas distribution", "national gas transmission", "national gas transmission investment", "national gas transmission network", "national petroleum database", "natural gas balance", "natural gas commodity", "natural gas consumer", "natural gas consumption", "natural gas dehydration", "natural gas demand", "natural gas developments", "natural gas distribution", "natural gas engine power", "natural gas environmental aspects", "natural gas extraction", "natural gas facilities", "natural gas finance", "natural gas from ldcs", "natural gas fuel cell technology", "natural gas government policies", "natural gas hydrates", "natural gas leakage", "natural gas lines", "natural gas liquid fractionation", "natural gas marketers", "natural gas marketing", "natural gas marketing segment", "natural gas market law", "natural gas pricing", "natural gas processing", "natural gas processing plants", "natural gas projects", "natural gas purchases", "natural gas rate", "natural gas regulation", "natural gas regulators", "natural gas researches", "natural gas reservoirs", "natural gas resources", "natural gas safety procedure", "natural gas saving", "natural gas sector", "natural gas sector policies", "natural gas sector policy", "natural gas shortages", "natural gas storage facilities by state", "natural gas storage facilities", "natural gas storage", "natural gas streams", "natural gas supply chains", "natural gas supply", "natural gas taxations", "natural gas technologies", "natural gas trade", "natural gas transmission", "natural gas transport", "natural gas turbine power", "natural gas upstream policies", "natural gas value chain", "natural gas volatility", "natural resource endowments", "non fossil fuel obligation", "nontraditional fuel", "nontraditional zone", "number of reservoirs", "offshore seismic exploration sources", "oil absorption methods", "oil and condensate removal", "oil and condensate removal water", "oil and gas", "oil bunkering", "oil burning facilities", "oil circulation system", "oil demand growth", "oil demand", "oil diplomacy", "Oil discharge", "oil discharge records", "oil discovery", "oil exploration policy", "oil export earnings", "oil exporters", "oil extraction", "oil facility subsidy account", "oil field equipment & services", "oil field operations", "oil field processing", "oil floats", "oil flow rates", "oil futures", "oil & gas division", "oil & gas industry", "oil & gas lease auctions", "oil & gas reserves", "oil & gas reserve valuation", "oil & gas royalties", "oil import bills", "oil importers", "oil import infrastructures", "oil importing countries", "oil industry competition", "oil infrastructure sabotage", "oil layers", "oil licensing policies", "Oil loading", "oil market conditions", "oil market distortion", "oil market forces", "oil market pricing", "oil market shares", "oil markets", "oil pipeline alignment", "oil pipeline blocks", "oil pipeline block valves", "oil pipeline cleaning", "oil pipeline commissioning", "oil pipeline construction", "oil pipeline corridors", "oil pipeline corrosion", "oil pipeline costs", "oil pipeline development", "oil pipeline expansions", "oil pipeline facilities", "oil pipeline flows", "oil pipeline hydraulics", "oil pipeline infrastructure", "oil pipeline installations", "oil pipeline investment", "oil pipeline investors", "oil pipeline monopolies", "oil pipeline network rehabilitation", "oil pipeline routes", "oil pipeline safety", "oil pipeline safety regulations", "oil pipeline systems", "oil pipeline tariffs", "oil pipeline transfers", "oil pipeline transmission", "oil pipeline transportation", "oil pipeline transport", "Oil pollution preparedness", "oil price bands", "oil price caps", "oil price changes", "oil price collapse", "oil price determination", "oil price", "oil price impacts", "oil price policy", "oil price spikes", "oil pricing", "Oil pricing policy", "Oil processing", "oil producers", "oil production capacity", "oil production forecast", "oil production profiles", "oil production quotas", "oil production rates", "oil product standards", "oil quality", "oil recovery", "oil recycling plants", "oil refineries", "oil refiners", "oil refining", "oil regulatory requirements", "oil residue", "oil resource development", "oil revenues", "oil saturation", "oil screens", "oil sector", "oil sheen", "oil slicks", "oil spill cleanup", "Oil spill contingency plans", "oil storage", "oil streams", "oil substitution", "oil traders", "oil transport", "onshore exploratory surveys", "onshore facilities", "onshore natural gas drilling", "opec countries", "opec developing country exporters", "opec oil export revenues", "overexploitation", "paraffin series", "parallel gas pricing systems", "particulate petroleum residue", "peak load requirements", "peak load storage facilities", "peak load storage", "petrochemical", "petrochemical operations", "petrogenesis", "petrol engine power", "petroleum administration", "petroleum bitumen", "petroleum concessions", "petroleum contracts", "petroleum derivatives", "petroleum engineers", "petroleum fields valuation", "petroleum formation", "petroleum hydrocarbons", "petroleum importing countries", "petroleum industry perspective", "petroleum infrastructure sabotage", "petroleum market deregulation", "petroleum market reform", "petroleum policies", "petroleum production", "petroleum product prices", "petroleum products price revisions", "petroleum product taxation", "petroleum recycling", "petroleum regulatory authorities", "petroleum research centers", "petroleum resource conservation", "petroleum shipping terminals", "petroleum storage tank leakage", "pipeline access", "pipeline alignment", "pipeline blocks", "pipeline block valve", "pipeline capacity", "pipeline cleaning", "pipeline commissioning", "pipeline companies", "pipeline connections for distributors", "pipeline construction", "pipeline corridors", "pipeline corrosion", "pipeline costs", "pipeline delivery", "pipeline development", "pipeline expansions", "pipeline facilities", "pipeline failures", "pipeline flows", "pipeline geography", "pipeline", "pipeline imports", "pipeline industry", "pipeline infrastructures", "pipeline installations", "pipeline investment", "pipeline investors", "pipeline linking", "pipeline loops", "pipeline monopolies", "pipeline networks", "pipeline operators", "pipeline owners", "pipeline proposals", "pipeline routes", "pipeline safety", "pipeline safety regulations", "pipeline systems", "pipeline tariffs", "pipeline transfer", "pipeline use", "pipe replacement", "piping configurations", "poll taxes", "pollutant", "pollution control policy", "price analysis", "price band mechanism", "primary distribution systems", "private capital", "private foreign investments", "private investments", "private sector investment", "privatization of gas", "probable reserves of liquid", "process for ngl extraction", "pro-competition regulatory policy", "production license", "production smoothing models", "prospective areas", "provision in light", "provision of gas", "rail lines", "rarefied gas", "re-export", "refinery gate investment", "refinery gates", "refinery price", "refuse as fuels", "refuse derived fuel", "regression models", "regulatory approval", "relinquishment requirement", "reservoir characteristics", "reservoir degradation", "reservoir fluids", "reservoir formations", "reservoir for storage purpose", "reservoir modeling capability", "reservoir rocks", "resources depletion", "retail gas tariff revisions", "retail petroleum outlet", "revenue entitlement", "revenue requirements determination", "revenues entitlements", "rock cutting", "rock formations", "rock properties", "royalty determination", "royalty", "royalty income", "royalty rates", "safety system requirements", "salt bed deposits", "salt beds", "salt cavern leaching", "salt caverns", "salt deposits", "salt domes", "saturated desiccant beds", "seabed floor", "sea bottom resources", "seasonally unadjusted value", "seasonal variation", "secondary recovery of oil", "seismic acquisitions", "seismic crews", "seismic data", "seismic exploration", "seismic images", "seismic interpretation", "seismic readings", "seismic recordings", "seismic ships", "seismic sources", "shale oil industry", "smog formation", "smog production", "stainless steel tubing", "state control", "stochastic components", "stochastic control formulations", "stochastic control models", "stochastic price movements", "stock holdings", "storage facilities", "storage fields", "storage reservoir", "straddle", "stratigraphic features", "stream", "subsoil users", "subsurface area", "subsurface formation", "subsurface geologies", "subsurface layer", "subsurface rock", "surface characteristic", "surface evidence", "surface geology source", "surface structure", "surging oil demand", "synthetic fuel price", "synthetic fuel productions", "tariff on petroleum import", "taxable period", "tax credits", "tax income", "tax loss carry forward", "tax loss carry forward provision", "team of exploration geologist", "tectonic plate movement", "thermal oil recovery", "total stock", "traditional exploration emphases", "traditional exploration emphasis", "traditional gas exploration method", "transfer via pipelines", "transit gas activity", "transit gas businesses", "transit gas business", "transit gas business opportunity", "transit gas corridor", "transit gas development", "transit gas entity", "transit gases", "transit gas function", "transit gas", "transit gas operation", "transit gas purpose", "transit gas revenue", "transit gas role", "transit gas routes", "transitional arrangement", "transitional path", "transitional stage", "transit transmissions", "transmission activity", "transmission backbone", "transmission capacities", "transmission entity", "transmission function", "transmission infrastructures", "transmission service", "transmission system", "transmission tariff regulations", "transparent revenue management", "transparent tariff protection", "transportation by pipelines", "transport differential", "transport tariff", "trenching techniques", "type of storage source", "types of emission", "types of storage facility", "underground explosion", "underground fluid flow", "underground formation", "underground geologies", "underground natural gases", "underground natural gas", "underground natural gas storage facility", "underground natural gas storage vessel", "underground oil formation", "underground petroleum", "underground petroleum tanks", "underground rock", "underground storage facilities", "underground storage facility operators", "underground storage", "undertaking risk exploration", "undiscovered gas resource", "uneconomic tariff policy", "uniform pricing", "upstream fiscal and land policy", "use of seismology in practice", "users of pipeline", "value determination procedure", "vapor", "vat on import", "venting activity", "venting reduction project", "venting reduction standard", "viable flare reduction project", "viable flare reductions", "vibration recording", "volcanology", "volume of carbon dioxide emission", "wasted heat energy", "water pollution", "well completions", "well data readout", "well density", "well drilling", "wellhead price deregulation", "wellhead prices", "wellhead pricing framework", "well log data", "well log datum", "well logging", "well recompletion", "wells to pipeline", "western pipeline", "white band", "white strip", "widespread use of fuel cell", "wide swath", "withholding taxes on interest", "withholding tax", "withholding tax on interest", "wood fire", "wood gases", "wood gas", "woodlot management", "woodlots", "world market price", "world oil demand growths", "world oil price", "world oil production", "world oil suppply", "world ooil price crashes", "world ooil price crash", "year loss carry forward limitation", "year loss carry forward provision", "year tax carry forward provision", "zero emission vehicles", "zero-flare project"]
  }, {
    "name": "Energy Conservation and Efficiency",
    "words": ["abatement functions", "abatement", "Abatement strategies", "Absence of regulation", "absent growth in renewable energies", "absorption by photosynthesis", "Abundance of bagasse", "acceptable levels for releases", "acceptable limit", "Acceptable limits", "acceptable maximum emission", "accepted international regulation", "Accepted maximum level", "accepted maximum levels", "accepted scientific evidences", "accepted sustainable growth set", "accessible energy efficiency advice", "accessible energy", "Accessible environmental education", "access to common land resource", "access to crude oil", "access to electricity supply", "access to energy efficient technology", "access to fuel", "access to landfill", "Access to landfills", "accreditation of energy service provider", "accumulation of carbons", "accurate allocation of energy", "accurate customer consumption data", "accurate customer consumption datum", "accurate demand", "acid gas re-injection", "Acidification reduction", "acidification reductions", "acid rain legislations", "acid rain problems", "Acid rain proposal", "acid rain proposals", "Acid rain solution", "acid rain solutions", "active renewable energy system", "active renewable energy technology", "Activities implemented jointly", "activities of consumer government", "Activities of consumer governments", "actual heat demand present", "Adaptation policies", "adaptation policy", "adaptation processes", "Adaptation process", "Adequate compensation", "adequate compensations", "Adequate energy use", "adequate energy uses", "Adequate shelter", "adequate shelters", "Adequate supplies of water", "adequate supply of energy", "adequate supply of petroleum", "Adequate training", "adequate trainings", "adjustable speed drive", "adjustments to energy consumption", "admissible base distribution", "Admissible base distributions", "advanced energy production", "advanced engine technology", "advanced fuel injection system", "advanced nuclear cost case", "advanced production technique", "advanced recovery technique", "advanced technology vehicle", "advances in exploration", "advancing energy efficiency", "adverse climatic impact", "Adverse climatic impacts", "adverse effect", "adverse impact", "Adverse possession", "adverse possessions", "Adverse regulatory decision", "adverse regulatory decisions", "Advocates of adaptation", "advocates of adaptations", "Aerial surveillance system", "aerial surveillance systems", "aerosol production facility", "Aerosols Impacts of aviation", "aerosols impacts of aviations", "affordable power", "aggregate average cost matrices", "aggregate average cost matrixes", "Aggregate average cost matrix", "aggregate claim", "Aggregate claims", "aggregate decline in fuel consumption", "aggregate demand elasticity", "aggregate demand", "Aggregate distribution", "aggregate distributions", "aggregate efficiency", "Aggregate effort", "aggregate efforts", "aggregate elasticity", "aggregate elasticity of energy demand", "Aggregate Emission Intensities", "aggregate emission intensity", "aggregate energy demand", "aggregate energy efficiency indexes", "aggregate energy efficiency index", "aggregate energy efficiency indices", "aggregate energy price", "aggregate income elasticity", "aggregate industrial energy intensity", "aggregate level", "aggregate oil production capacity", "aggregate price elasticity of energy demand", "aggregate total emission intensities", "Aggregate total emission intensity", "aggregate wasted energies", "Aggregate wasted energy", "aggregation weight", "Aggregation Weights", "aggressive demand management policy", "aggressive energy management effort", "aggressive strategy", "Agreement barring tanker traffic", "agreement between oil tanker owner", "Agreement between oil tanker owners", "agricultural cogeneration", "agricultural crop", "agricultural energy efficiencies", "Agricultural energy efficiency", "agricultural energy product", "Agricultural waste disposal", "agricultural waste disposals", "Airborne fraction", "airborne fractions", "air concentration", "Air concentrations", "air conditioner blower fan", "air conditioner fan", "Air conditioning system", "air conditioning use", "aircraft efficiency", "Aircraft Pollution", "aircraft pollutions", "aircraft technology characteristic", "air emissions industries", "Air emissions industry", "air handling", "air ordinance", "Air ordinances", "air pollutants for boiler", "air pollutants for cement plant", "air pollutants for coke oven", "Air pollution control resulting", "air pollution from plant", "Air pollution from plants", "Air pollution from vehicle", "air pollution from vehicles", "Air pollution legislation prior", "air pollution legislation priors", "air pollution policies", "Air pollution policy", "air pollution reduction", "Air Pollution Reductions", "Air pollution report", "air pollution reports", "Air Quality Framework Directive", "air quality framework directives", "Air quality limit", "air quality limits", "air quality management", "Air Quality Subcommittee", "air quality subcommittees", "Air temperature falling", "air toxin", "Air toxins", "air travel demand", "Alarming rate", "alarming rates", "Alcohol for gasoline", "alcohol for gasolines", "alimentary industries", "Alimentary industry", "Alimentary interest", "alimentary interests", "alimentary production system", "Alimentary production systems", "alimentary resource", "Alimentary resources", "Alimentary system", "alimentary systems", "allocation figure", "Allocation figures", "allocation formulae", "Allocation formula", "allocation formulas", "allocation model", "allocation of emission right", "Allocation of emission rights", "Allocation of information", "allocation of informations", "allocation of permit", "Allocation of permits", "allocation of resource", "Allocation problem", "allocation problems", "Allocation proposal", "allocation proposals", "allocations of emission quota", "Allocations of emission quotas", "allowance policies", "Allowance policy", "alternate fuels substitution programs", "alternative base distribution", "Alternative base distributions", "alternative disposal method", "Alternative disposal methods", "alternative energy initiative", "alternative energy policy", "Alternative energy resources", "alternative energy supply", "alternative forms of energy", "alternative-fuel share", "Alternative fuels market", "alternative-fuel technology", "alternative fuel use", "alternativefuel vehicle", "alternative-fuel vehicle sale", "alternative fuel vehicles methanol flexes", "alternative fuel vehicles methanol flex", "alternativefuel vehicle technology", "alternative methods of disposals", "Alternative proposals for radar", "alternative proposals for radars", "Alternative recycling", "alternative regulation", "Alternative regulations", "Alternative regulatory strategies", "alternative regulatory strategy", "alternative renewable energy", "alternative sources of energies", "alternatives to electricity production", "alternatives to petroleum", "alternative transport fuel investment", "alternative transport fuels", "Alternative use", "alternative uses", "alternative world oil price", "aluminum car", "Ambient air quality standard", "Ambient Air Quality Standards", "ambient standard", "Ambiguous use of language", "ambiguous use of languages", "ambitions of environmentalist", "Ambitions of environmentalists", "amount of fuel", "amount of gases", "amount of gas", "amount of gasses", "amount of methane", "amount of oil", "amount of pipeline", "amount of primary energy saving", "anaerobic activities", "Anaerobic activity", "Anaerobic condition", "anaerobic conditions", "Anaerobic decomposition of manure", "anaerobic decomposition of manures", "anaerobic decompositions", "Anecdotal evidence", "Animal growth", "animal head counts", "animal health impacts", "Animal productivity", "animal reproduction technology", "annual coal supply", "annual crop productions", "Annual drought losses", "annual drought loss", "annual electricity production", "annual energy demand growth", "annual energy outlook", "annual energy outlook projection", "annual energy outlook reference case", "annual energy outlook setting", "annual energy review", "annual energy saving", "Annual Energy Use", "annual energy uses", "annual food crop", "Annual food crops", "annual fuel utilization efficiency", "annual highway travel per capita", "annual improvement in energy efficiencies", "Annual improvement in energy efficiency", "Annual methane", "annual methanes", "annual national emission", "Annual national emissions", "annual production", "annual solar installation demand", "anthropogenic emission", "anthropogenic gaseous emission", "Anthropogenic gaseous emissions", "anthropogenic greenhouse gas emission", "Anthropogenic Greenhouse Gas Emissions", "anthropogenic methane emission", "Anthropogenic Methane Emissions", "anthropogenic methane emissions methodologies", "Anthropogenic Methane Emissions Methodology", "anthropogenic source", "Anthropogenic sources", "Anti-polluting Technologies", "anti-polluting technology", "anti-pollution initiative", "Anti-pollution initiatives", "appliance", "appliance industry", "appliance manufacturer", "appliance market transformation program", "appliance sale", "appliance standard", "appliance stock", "appliance turn in program", "Applicability of diffusion", "applicability of diffusions", "Approximate posterior distribution", "approximate posterior distributions", "aqueous liquid content", "Aqueous waste streams", "arc reactor", "Arc reactors", "arcs from transshipment node", "arid semisolid", "Arid semisolids", "Arithmetic aggregate distribution", "arithmetic aggregate distributions", "aromatics recovery", "aromatics restriction", "Aromatics restrictions", "artificial lightings", "artisanal product", "Artisanal products", "artisan material", "Artisan materials", "asian group for energy efficiency", "asia pacific laboratory accreditation cooperation", "Assessment of Acid Rain", "assessment of acid rains", "assessment of claim", "Assessment of claims", "Assessment of costs for damage", "assessment of costs for damages", "assessment of insufficiencies", "Assessment of insufficiency", "Assessment of technologies", "assessment of technology", "assessment of todaies", "Assessment of today", "Assessment panel", "assessment panels", "assessment processes", "Asymmetrical information", "asymmetrical informations", "Asymmetry of information", "asymmetry of informations", "Asymptotic behaviour", "asymptotic behaviours", "Asymptotic inference", "asymptotic inferences", "asymptotic theories", "Asymptotic theory", "Atmosphere ice ocean interactions", "Atmospheric burden", "Atmospheric carbon concentration path", "atmospheric carbon concentration paths", "Atmospheric carbon dioxide", "atmospheric concentration", "Atmospheric data", "Atmospheric effects", "atmospheric emission inventories", "Atmospheric interdisciplinary research", "atmospheric lifetime", "Atmospheric mass", "atmospheric processes", "atmospheric process", "atmospheric records", "atmospheric responses", "auction of permit", "automobile fuel consumption standard", "automobile fuel economy standards", "automobile stocks", "automotive fuel consumption", "automotive sectors", "automotive technology", "auxiliary heating", "Average emission rate", "average emission rates", "Average energy resource base per person", "average energy resource base per persons", "Average liquid injection incinerator", "average liquid injection incinerators", "average peak demand saving", "Average peak demand savings", "average per capita emission", "Average per capita emissions", "Average surface air temperature", "average surface air temperatures", "Average temperature", "average temperatures", "Average yearly temperature", "average yearly temperatures", "Averting climate change", "averting climate changes", "awareness of energy conservation", "awareness of energy efficiencies", "Awareness of energy efficiency", "awareness of energy price", "Bacterial growth rate", "bacterial growth rates", "bareboat charterer", "Bareboat charterers", "barrel bases", "barrel basis", "barrel of crude", "Barrel of oil", "barrel of oils", "barrel oil", "barrel prices", "barrels per stream day", "Barriers to adoption", "barriers to adoptions", "barriers to energy efficiency measure", "Barriers to energy efficiency measures", "Barriers to uptake", "barriers to uptakes", "base distribution", "Base distributions", "Base disutilities", "base disutility", "baseline emission", "baseline energy usage", "baseline forecast", "baseline for methane emission", "Baseline for methane emissions", "base year energy consumption", "base year energy intensity", "basic energy", "basic lighting", "basic oxygen furnace steel making", "basic raw materials for energy production", "Bed combustion", "bed combustions", "Bed-gas", "Bed methane development", "bed methane developments", "Bedrock of good", "bedrock of goods", "Beneficial impact", "Benefit function", "benefit functions", "benefits of cogeneration", "benefits of energy efficiency", "benefits of time of use metering", "Benign energy technologies", "benign energy technology", "benign form of energies", "Benign form of energy", "Benign industrial policies", "benign industrial policy", "benign renewable energy resource", "Benign renewable energy resources", "Benign technologies", "benign technology", "beverage container deposit-refund system", "Beverage container deposit-refund systems", "bi-fuel", "Big polluter", "biodegradable trace element", "Biodegradable trace elements", "bio diversities", "Biodiversity Boundaries", "biodiversity boundary", "biodiversity energies", "Biodiversity Energy", "Bio diversity", "Biodiversity information facilities", "biodiversity information facility", "Biodiversity Natural", "biodiversity naturals", "biodiversity priorities", "Biodiversity Priority", "biodiversity researches", "Bio-energy", "biological change", "Biological changes", "biological diversities", "Biological metabolism", "biological metabolisms", "biological relationship", "Biological relationships", "Biological systems", "Biological water cleaning", "biomass consumption", "biomass consumption interest rate", "Biomass contribution", "biomass contributions", "biomass conversion system", "Biomass Conversion Systems", "biomass emission", "Biomass emissions", "biomass energy project", "Biomass energy projects", "biomass energy systems", "biomass ethanol alcohol industry", "biomass ethanols", "biomass fuel price", "Biomass fuel use", "biomass fuel uses", "biomass generating system", "Biomass generating systems", "biomass into electricities", "Biomass into electricity", "Biomass might", "biomass mights", "biomass production for energies", "Biomass production for energy", "Biomass production for food", "biomass production for foods", "biomass residue", "Biomass residues", "biomass resources", "biomass supply system", "Biomass supply systems", "Biotech Innovation", "biotech innovations", "biotic agent", "Biotic agents", "bituminous coal reserve", "black coal", "black gold", "black lignite", "boiler adjustment", "boiler component", "boiler energy audit", "Boiler ordinance", "boiler ordinances", "boiler replacement", "boiler use of petroleum", "Boiler water treatment", "boiler water treatments", "botanical effect", "Botanical effects", "Bottom up mechanism", "bottom up mechanisms", "Bovine Enteric Fermentation", "bovine enteric fermentations", "bridge heating", "Brown lignite burn", "brown lignite burns", "building construction material", "Building construction materials", "building energy audit", "building energy code", "building energy retrofitting", "building shell", "burning biomasses", "Burning biomass", "burning coal", "burning efficiencies", "Burning efficiency", "burning natural gas", "Burning station", "burning stations", "butyl ether", "calculated average final consumption", "calculated cogeneration", "calculated energy input requirement", "calculating methane emission", "calculation of primary energy saving", "calculation of revenues from permit sale", "calorie coefficient", "Calorie coefficients", "Calorie table", "calorie tables", "calorific term", "Calorific terms", "capacity expansion decision", "capacity expansion", "capacity for electricities", "Capacity for electricity", "Capacity for engine load", "capacity for engine loads", "capacity of gasoline terminal", "capacity utilization", "capacity utilization rate", "capital-energy complementarity", "carbonate rock formation", "carbon balance", "Carbon balances", "carbon coalition", "Carbon Coalitions", "carbon coefficient", "carbon content", "carbon content of energies", "Carbon content of energy", "carbon cycle constraint", "Carbon cycle constraints", "carbon cycle model", "Carbon dioxide absorption rate", "carbon dioxide absorption rates", "carbon dioxide accumulations", "Carbon Dioxide Assessment Committee", "carbon dioxide assessment committees", "carbon dioxide coefficient", "carbon dioxide concentration", "Carbon dioxide discharge", "carbon dioxide discharges", "carbon dioxide emission factor", "carbon dioxide level", "Carbon dioxide levels", "Carbon Dioxide mining", "carbon dioxide minings", "carbon dioxide permit price", "Carbon dioxide problem", "carbon dioxide problems", "carbon dioxide projection", "Carbon Dioxide Projections", "Carbon dioxide release", "carbon dioxide releases", "Carbon dioxide source", "carbon dioxide sources", "carbon dioxide taxes", "carbon dioxide tax", "Carbon dioxide technical", "carbon dioxide technicals", "Carbon dioxide technologies", "carbon dioxide technology", "carbon electricity system", "carbon emitting plant", "carbon fee", "carbon impact", "carbon injection", "carbon intensities", "Carbon intensity", "Carbon into circulation", "carbon into circulations", "Carbon-methane fraction", "carbon-methane fractions", "Carbon policy relating", "Carbon quota", "carbon quotas", "carbon reduction", "Carbon release", "carbon releases", "carbon saving", "Carbon saving technologies", "carbon saving technology", "carbon sequestration in tree", "carbon share", "Carbon shares", "carbon taxation regime", "Carbon taxation regimes", "carbon tax regime", "Carbon tax regimes", "carbon value", "carcinogenic compound", "Carcinogenic compounds", "cargo owners paying damage", "Cargo owners paying damages", "Cases of cancer", "cases of cancers", "catalyst technologies", "Catalyst technology", "catalytic converters for car", "Catalytic converters for cars", "catalytic filter", "catalytic reduction", "catastrophic breaches", "Catastrophic breach", "catastrophic event", "Catastrophic Failure", "catastrophic failures", "catastrophic losses", "Catastrophic loss", "cation analyses", "Cation analysis", "cation search analyses", "Cation search analysis", "ceiling height", "central air conditioner", "central air conditioning", "central heating", "central pumping facility", "central station generating plant", "Central station generating plants", "centrifugal chiller", "certificate of origins", "Certification center", "certification centers", "certification of ship", "Certification of ships", "certified tanker", "Certified tankers", "cfl failure rate", "cfl purchase price", "Chain of causation", "chain of causations", "change in energy policies", "Change in energy policy", "Change of tree species", "Change of weather", "change of weathers", "Changes in climate", "changes in climates", "changes in demand", "changes in emission level", "changes in energy consumption", "changes in energy efficiency", "changes in energy intensity", "Changes in land use", "changes in land uses", "Changes of climate", "changes of climates", "Changing energy management", "changing energy managements", "changing energy market", "characteristics of vehicle type", "charge on energy", "cheap energy source", "cheaper alternative", "cheaper energy", "cheap form of energy", "cheating", "chemical engineering", "chemical input", "Chemical loading of soil", "chemical loading of soils", "Chemical processing", "chemical property", "Chemical stabilization", "Chemical transformation", "chemical transformations", "chest complaint", "Chest complaints", "chief greenhouse gases", "Chief greenhouse gas", "chief greenhouse gasses", "Choice of disposal method", "choice of disposal methods", "choice of emission factor", "Choice of emission factors", "choice of energy option", "Choice of energy options", "Choice of index base", "choice of index bases", "choice of method", "Choice of methods", "circulation of nutrient", "Circulation of nutrients", "citrus waste energy", "city centres renewable resource", "City centres renewable resources", "Civil environmental damage", "civil environmental damages", "civil law court", "Civil law courts", "Civil Liability Convention Certificate", "civil liability convention certificates", "Civil Liability Convention", "civil liability conventions", "Civil Liability for Oil Pollution Damage", "civil liability for oil pollution damages", "Civil liability system for damage", "civil liability system for damages", "civil litigations", "Civil protection", "civil protections", "Claims for compensation", "claims for compensations", "clean air act amendment", "clean air act", "Clean Air Energy Use", "clean air energy uses", "Clean air goals for oil", "clean air goals for oils", "clean air regulation", "Clean air regulations", "clean air standard", "Clean Air Standards", "Clean clothes", "clean coal technology program", "clean development mechanisms", "Clean drinking water", "clean electricity", "clean energies", "clean energy product", "Clean energy products", "Clean Energy program", "clean energy programs", "clean energy resource", "Clean energy resources", "clean energy source", "Clean enough air", "clean enough airs", "cleaner energies", "Cleaner energy", "cleaner environment", "cleaner production technology", "clean fuel requirement", "Clean fuel requirements", "Clean industry", "Cleanliness of air", "cleanliness of airs", "clean technologies", "Clean Transport", "clean transports", "cleanup cost", "clear rules for cogeneration", "Climate apocalypse", "climate apocalypses", "Climate Change Convention", "climate change conventions", "climate change country studies", "Climate Change Country Study", "Climate change economics", "climate change framework treaties", "Climate change framework treaty", "Climate change Impact", "Climate change impact model", "climate change impact models", "climate change impacts", "Climate change mitigation policies", "climate change mitigation policy", "climate change on ecosystem", "Climate change on ecosystems", "Climate change problem", "climate change problems", "climate change researches", "Climate damage", "climate damages", "Climate economics", "Climate forcing", "Climate game", "climate games", "Climate policies", "climate policy", "climate problem", "Climate problems", "climate protections", "climate researches", "climate scenario", "Climate Scenarios", "Climate system", "climate system parameter", "Climate system parameters", "climate systems", "climate zone", "Climatic change problem", "climatic change problems", "climatic condition", "Climatic disturbance", "climatic disturbances", "Climatic engineering", "climatic engineerings", "Climatic evidence", "climatic evidences", "climatic impact", "Climatic impacts", "climatic perturbation", "Climatic perturbations", "climatic state", "Climatic states", "climatic variation", "clothes dryer", "Coal-bed-gases", "Coal-bed-gas", "coal-bed-gas reserve", "Coal-bed-gas reserves", "Coal bed methane development", "coal bed methane developments", "Coal bed methane utilization", "coal bed methane utilizations", "Coal before combustion", "coal before combustions", "Coal Blending", "Coal burning", "Coal-cleaning technologies", "Coal cleaning technologies", "coal-cleaning technology", "coal cleaning technology", "Coal endowment", "coal endowments", "coal equivalency bases", "Coal equivalency basis", "Coal-gasification", "coal gasification plant", "Coal gasification plants", "Coalification of plant matter", "coalification of plant matters", "coal import", "coal liquefying processes", "Coal liquefying process", "coal-liquefying technologies", "Coal-liquefying technology", "coal market", "Coal molding", "coal moldings", "coal oil", "Coal plant", "coal plants", "Coal powder", "coal powders", "coal prices", "coal producers", "coal production", "coal quality parameter", "coal seams", "coal tar", "coal technology", "coal transportation cost", "coal use", "Coal washing", "coal washings", "Coal wealth", "coal wealths", "Coarse coal", "coarse coals", "coastal population", "Coastal populations", "coastal region", "coastal researches", "Coastal research", "Coastal state", "coastal zone solution", "Coastal Zone solutions", "Coastline pollution", "coastline pollutions", "Code compliance tool", "code compliance tools", "Code of conduct", "code of conducts", "Cod Mining", "cod minings", "coefficient of performance", "Coercive use", "coercive uses", "cogeneration developer", "cogeneration directive", "cogeneration electricity", "cogeneration", "cogeneration installation", "cogeneration market", "cogeneration meets real demand", "cogeneration mode", "cogeneration policy", "cogeneration potential", "cogeneration processes", "cogeneration process", "cogeneration producer", "cogeneration production", "cogeneration project", "cogeneration proposal", "cogeneration providing", "cogeneration scheme", "cogeneration sector", "cogeneration statistic", "cogeneration technology", "cogeneration unit", "Cogeneration units", "coil cleaning brush", "collaboration with environmentalist", "Collaboration with environmentalists", "collaborative environmental researches", "Collaborative environmental research", "Combating ozone depletion", "combating ozone depletions", "combustible gas", "Combustion activities", "combustion activity", "Combustion efficiency", "combustion emission", "Combustion emissions", "combustion of coal in power plant", "combustion of fossils fuel", "combustion of fuel", "Combustion of Fuels", "combustion of peat with wood", "combustion power plant", "Combustion power plants", "combustion turbine fuel cell", "commercial building", "commercial crude", "commercial crude oil", "commercial demand", "commercial electricity", "commercial electric power generation", "commercial electronic equipment", "commercial end-use technology", "commercial energy audit", "commercial energy demand", "commercial energy efficiency", "commercial energy efficiency strategy", "commercial energy intensity", "commercial energy production", "commercial energy technology", "commercial energy use", "commercial enterprise", "commercial entity", "commercial equipment", "commercial feasibility", "commercial floor space", "commercial fossil fuel", "commercial fuel", "Commercial fuels", "commercial lighting", "commercial lighting market", "commercial lighting retrofit", "commercially recoverable oil", "commercially usable gases", "Commercially usable gas", "commercially usable gasses", "Commercially used biomass source", "commercially used biomass sources", "commercial nuclear power plant", "commercial oil company", "commercial passenger aircraft", "Commercial power", "commercial powers", "commercial refrigeration equipment", "commercial sector energy", "commercial sector fuel", "Commercial space heating", "commercial users of electricities", "Commercial users of electricity", "commercial water heating", "Commercial wood use", "commercial wood uses", "commitment to energy efficiency", "Commonly acceptable agreement", "commonly acceptable agreements", "Commonly acceptable anchor-point", "Commonly acceptable compromise", "commonly acceptable compromises", "commonly acceptable outcome", "Commonly acceptable outcomes", "commonly acceptable solution", "Commonly acceptable solutions", "Community acid rain legislation", "community acid rain legislations", "community acid rain policies", "Community acid rain policy", "community based demand side management", "community energy", "community energy policy", "community environmental directive", "Community environmental Directives", "community environmental management", "community environmental policies", "Community environmental policy", "community greenhouse gas emission", "Community nuclear energy policies", "community nuclear energy policy", "Commuter transport", "commuter transports", "compact fluorescent light bulb", "Compact fluorescent light bulbs", "comparison of emission estimate", "Comparison of Emission Estimates", "Comparison of emission intensities", "comparison of emission intensity", "Comparison of emissions from coal", "comparison of emissions from coals", "compensation amount", "Compensation amounts", "Compensation payable", "compensation payables", "Compensation payments for damage", "compensation payments for damages", "compensation policy", "compensation requirement", "Compensation requirements", "compensation scheme", "compensatory claim", "Compensatory claims", "Compensatory component", "compensatory components", "compensatory damage", "Compensatory damages", "competition for energy", "competitive electricity", "competitive gas supply source", "competitive markets in energy supply", "competitiveness for energy", "competitiveness of lng supply", "competitiveness of wind power technology", "Compliant disposal", "compliant disposals", "Composition of energy consumption", "composition of energy consumptions", "Composition of output", "composition of outputs", "Comprehensive air pollution control", "comprehensive air pollution controls", "comprehensive electricity competition act", "comprehensive energy bill", "comprehensive energy efficiency", "comprehensive energy legislation", "comprehensive energy policy", "Comprehensive environmental legislation", "comprehensive environmental legislations", "Comprehensive Environmental Response", "comprehensive environmental responses", "comprehensive municipal demand side management", "compulsory energy efficiency", "Computable General Equilibrium model", "Concentrations of gases", "concentrations of gas", "concentrations of gasses", "Conditional choice", "conditional choices", "Conditional demand", "conditional demands", "Conditional inequity-disutilities", "Conditional utility function", "conditional utility functions", "Consequences of climate change", "consequences of climate change · Societal causes", "Consequent hardship", "consequent hardships", "conservation biodiversities", "Conservation Biodiversity", "conservation biotechnologies", "Conservation Biotechnology", "conservation", "conservation measure", "Conservation measures", "conservation of energies", "Conservation of energy", "conservation of marine living resource", "Conservation of marine living resources", "conservation technology", "conserving forest resource", "Conserving forest resources", "constant elasticity of substitution function", "Constant Elasticity of Substitution functions", "Constant sunshine", "constant sunshines", "Constrained fossil fuel use", "constrained fossil fuel uses", "constrained trajectories", "Constrained trajectory", "constructing energy system", "Constructing energy systems", "construction in flood plain", "Construction in flood plains", "construction of energy-efficient building", "construction of natural gas pipeline", "construction of power station", "Construction of power stations", "construction of ship", "Construction of ships", "construction of tanker", "Construction of tankers", "consumer demand", "consumer test", "Consumption of crude", "consumption of crudes", "consumption of energy product", "consumption of fossil fuel resource", "Consumption of fossil fuel resources", "Consumption of fossil", "consumption of fossils", "consumption of gasoline in vehicle", "Consumption of oil", "consumption of oils", "contaminant agent", "Contaminant agents", "contingent claim", "Contingent claims", "contingent valuation", "Contingent valuation survey", "contingent valuation surveys", "conventional combustion turbine", "Conventional energy strategies", "conventional energy strategy", "conventional equity principle", "Conventional equity principles", "conventional fossil fuel", "conventional fuel-saving technology", "conventional fuels in region", "conventional fuel-using technology", "Conventional gasoline", "conventional gasolines", "conventional heating system", "conventional hydroelectricity", "conventional hydropower", "conventional military attack", "conventional natural gases", "conventional natural gas", "conventional natural gasses", "conventional oil supply model", "Conventional power generation technologies", "conventional power generation technology", "conventional thermal power plant", "Conventional thermal power plants", "conversion of biomass energies", "Conversion of Biomass Energy", "cooking stove technology", "Cooling energy consumption", "cooling energy consumptions", "Cooling system", "cooling tower", "corporate average fuel economy", "corporate average fuel economy regulation", "corporate energy management division", "Corrosion damage", "corrosion damages", "cost-effectiveness of cogeneration", "Cost of coal", "cost of coals", "Cost of disposal", "cost of disposals", "cost of efficiency investment", "Cost of efficiency investments", "Cost of landfill disposal", "cost of landfill disposals", "cost of new generating capacities", "Cost of new generating capacity", "Costs of climate change", "costs of climate changes", "costs of compliance", "Costs of disposal", "costs of disposals", "Costs of electricity production", "costs of electricity productions", "costs of emission reduction", "Costs of emission reductions", "costs of energy efficiency", "costs of fuelswitching", "cost to refiner", "Cost to Refiners", "country oil exporter", "Country oil exporters", "Coverage for pollution coverage", "coverage for pollution coverages", "coverage of compensation claim", "Coverage of compensation claims", "creation of energy stockpile", "Criminalization of breaches", "criminalization of breach", "crisis vehicle", "Crisis vehicles", "Critical atmospheric carbon level", "critical atmospheric carbon levels", "Critical carbon dioxide", "critical carbon dioxides", "Critical-load concept", "critical-load concepts", "critical-load theories", "Critical-load theory", "crop", "Crude coal", "crude coals", "crude estimate", "Crude estimates", "crude future", "crude oil category", "crude oil composition over time", "crude oil demand", "crude oil exports", "crude oil import alternative", "crude oil import price", "crude oil imports", "crude oil import supply", "crude oil input", "Crude oil inputs", "crude oil into gasoline", "crude oil markets", "crude oil price fluctuation", "crude oil price increase", "crude oil production", "crude oil production petroleum market", "crude oil refining capability", "crude oil supply", "crude oil transportation", "crude oil type", "crude production", "crude stabilization plant", "crude throughput capacity", "cubic feet of gases", "cubic feet of gas", "cubic feet of gasses", "cultivated biomass energies", "Cultivated biomass energy", "Cumulative buildup", "cumulative buildups", "cumulative emission", "Cumulative emissions", "cumulative solar energy production", "curbing energy demand", "cycle gas turbine", "cycle gas turbine plant", "cycle generation facilities", "cycle plant", "cycle total", "cycle turbine", "cycle with sequestration", "cylindrical tower", "Damage mitigation strategies", "damage mitigation strategy", "dangerous cargoes", "Dangerous cargo", "dangerous cargos", "dealmaker model", "decarbonization of energies", "Decarbonization of energy", "decline in cargo traffic", "declining energy intensity", "declining real energy price", "Decomposition of plant matter", "decomposition of plant matters", "Decrease in oil consumption", "decrease in oil consumptions", "Decrease pollution", "decrease pollutions", "dedicated water ballast area", "Dedicated water ballast areas", "deeper basin", "Deeper basins", "deep ocean water application", "Deep well injection", "deep well injections", "Degradable organic carbon", "degradable organic carbons", "degraded water qualities", "Degraded water quality", "delivery of energies", "delivery of energy efficiencies", "delivery of energy efficiency", "delivery of energy-efficient product", "delivery of energy", "delivery of energy service", "demand categories", "demand category", "demand forecast", "demand for energies", "demand for energy efficiency service", "demand for energy-efficient technologies", "demand for energy-efficient technology", "demand for energy-intensive service", "demand for energy product", "demand for energy service", "Demand for energy services", "demand for fuel oil c for power generation", "demand for gas", "demand for gasolines", "demand for highway-grade diesel", "demand for oils", "demand for petroleum fuel", "demand for petroleum", "demand for transportation fuel", "demand for travel service", "demand growth", "demands for heat output", "demand-side energy reduction", "demand side management", "demand side management program", "demographic dynamic", "Demographic dynamics", "demographic weight", "depletion allowance", "Deposit Refund", "deposit refunds", "deposit refund system", "deregulation for oil", "Desertification of land", "desertification of lands", "detectable effect", "Detectable effects", "determining emission standard", "Determining emission standards", "determining limited emission", "Determining limited emissions", "determining methane emission", "Determining methane emissions", "Detrimental health effect", "detrimental health effects", "development of cleaner energy technologies", "development of cleaner energy technology", "development of cogeneration", "development of competition", "development of energy efficiencies", "development of energy efficiency", "development of energy efficiency indicator", "development of energy efficiency measure", "development of energy service companies", "development of energy service company", "development of energy service", "development of new power plant", "development of regional energy infrastructure", "development of steam", "diesel-electric hybrid", "diesel emission", "diesel fuel market", "diesel fuel specification", "Diesel fuel specifications", "diesel fuel use", "diesel hydro desulfurization", "differences in disposal method", "Differences in disposal methods", "differences in emission", "Differences in emissions", "Differences in particle size", "differences in particle sizes", "Direct climatic effect", "direct climatic effects", "Direct combustion", "direct combustion of biomasses", "Direct combustion of biomass", "Direct combustion of coal", "direct combustion of coals", "direct combustions", "direct curtailment of fuel", "Direct curtailment of fuels", "Direct emission intensities", "Direct emission intensity", "direct heating", "directive on emission", "Directive on emissions", "directive setting emission standard", "Directive setting emission standards", "Dirty fuel coal", "dirty fuel coals", "Dirty fuel", "dirty tanker", "Dirty tankers", "disaster prevention", "disaster response", "disastrous accident", "Disastrous accidents", "disastrous proportion", "Disastrous proportions", "discarding old car", "Discarding old cars", "discharge of oil", "discharge of pollutant", "Discharge of pollutants", "Discharge of water", "dishwasher", "dispersed power demand", "Disposal alternative", "disposal alternatives", "disposal cost", "Disposal costs", "disposal facilities", "disposal facility", "Disposal management", "disposal managements", "Disposal method", "disposal methods", "disposal option", "Disposal options", "disposal practice", "Disposal practices", "disposal problem", "Disposal problems", "Disposal regulations", "Disposal risk", "disposal risks", "disposal rule", "Disposal rules", "Disposal Standard", "disposal standards", "disposal subsid", "Disposal subsidies", "Disposal technologies", "disposal technology", "Disposed municipal solid waste", "disposed municipal solid wastes", "distillate desulfurization", "distillate fuel", "distillate fuel oil", "distillate fuel share", "distillate furnace", "distillate oil", "distillate price", "Distillate production", "distillate productions", "distillate use", "distillery waste", "Distribution center", "distribution companies", "distribution losses", "distribution loss", "Distribution matrices", "distribution matrixes", "Distribution matrix", "Distribution method", "distribution methods", "distribution number", "Distribution numbers", "distribution of coal", "distribution of energies", "distribution of energy", "distribution of gases", "Distribution of gas", "distribution of gasses", "distribution of net-bound energies", "distribution of net-bound energy", "distribution pipeline", "Distribution Pipelines", "distribution problem", "Distribution problems", "distribution procedure", "Distribution procedures", "Distribution proportional", "distribution proportionals", "distribution proposal", "Distribution proposals", "distribution rule", "Distribution rules", "distributor tariff", "district cooling", "district heating networks", "divergent concerns of energies", "divergent concerns of energy", "diversification of energy supplies", "Diversification of energy supply", "diversification of fuel", "diversification of fuel mixes", "diversification of fuel mix", "diversified energy structure", "diversified mix of fuel", "domestic air conditioner", "Domestic air conditioners", "domestic appliance", "Domestic appliances", "domestic coal industries", "Domestic coal industry", "domestic coal supplies", "domestic coal supply", "domestic coal-to-liquids production", "domestic crudes", "domestic crude supplies", "domestic crude supply", "domestic demand for energies", "domestic demand for energy", "Domestic Energy Policies", "domestic energy policy", "domestic energy securities", "Domestic energy security", "domestic energy supplies", "domestic energy supply", "domestic energy system", "Domestic fuel", "domestic gas-to-liquids production", "domestic hard coal industries", "Domestic hard coal industry", "domestic natural gas liquids production", "domestic natural gas production", "domestic oil production", "domestic primary energy growth", "domestic primary energy supplies", "domestic primary energy supply", "domestic reactor fuel", "domestic refiner acquisition", "domestic refinery capacity expansion", "domestic refinery gain", "domestic refinery operation", "domestic refining capacities", "domestic refining capacity", "domestic supplies", "domestic supplies of oil", "Domestic supply", "domestic supply of uranium", "domestic supply securities", "Domestic supply security", "domestic unfinished oil", "domestic use", "dominant energy source", "dominant fossil fuel emitter", "Dominant fossil fuel emitters", "double bottom", "Double bottoms", "double hull", "double hull ship", "Double hull ships", "Double hulls", "Downstream activities of conversion", "downstream activities of conversions", "downstream capital requirement", "Downstream capital requirements", "downstream energy activities", "downstream energy activity", "Downstream expansion", "downstream expansions", "Downstream remedies", "downstream remedy", "Downwind population", "downwind populations", "drawdown of oil", "drinking water construction product", "Drinking water construction products", "drop in energy intensities", "drop in energy intensity", "dry natural gas production", "Dual waste management system", "dual waste management systems", "Earth observation", "earth observations", "Earth Summit", "earth summits", "Ecological advice", "ecological advices", "ecological damage", "Ecological design", "ecological designs", "Ecological management", "ecological managements", "economically competitive alternative", "economically exploitable potential", "economically recoverable resource base", "economically recoverable resource", "economically sound energy efficiency improvement", "economic growth", "economic growth opportunities", "economic growth opportunity", "economic impacts of energy securities", "economic impacts of energy security", "economic viability of lng supplies", "economic viability of lng supply", "economic viability of rock heat", "ecosystem rehabilitation", "Efficiency of coal use", "efficiency of coal uses", "efficiency of cogeneration", "efficiency of cogeneration production", "Efficiency of electricity generation", "efficiency of electricity generations", "efficiency of energies", "efficiency of energy consumption", "efficiency of energy", "Efficiency of energy use", "efficiency of energy uses", "efficiency standard", "efficient building", "Efficient Buildings", "Efficient building technologies", "efficient building technology", "Efficient electricity use", "efficient electricity uses", "efficient electric motor", "efficient end-use", "efficient end use", "efficient end-use of energies", "efficient end use of energies", "efficient end-use of energy", "efficient end use of energy", "Efficient energies", "efficient energy", "Efficient energy supply technologies", "efficient energy supply technology", "efficient energy use technique", "Efficient energy use techniques", "efficient energy-using technologies", "efficient energy-using technology", "Efficient equipment", "efficient equipments", "efficient equivalent", "Efficient equivalents", "efficient fridge", "Efficient fridges", "efficient lamp", "Efficient lamp production", "efficient lamp productions", "Efficient life style", "efficient life styles", "Efficient Lighting Energy Efficient", "efficient lighting technologies", "efficient lighting technology", "Efficient power generation using", "Efficient use", "efficient use of electricities", "Efficient use of electricity", "efficient use of energies", "Efficient use of energy", "efficient use of fuel", "Efficient use of gasoline", "efficient use of gasolines", "efficient uses", "Elasticity of consumption", "elasticity of consumptions", "elasticity of demand", "elasticity of substitution", "electrical capacities", "Electrical charge", "electrical charges", "Electrical grid", "electrical grids", "electrical transformer", "Electrical transformers", "Electric bus", "electric busses", "electric capacities", "Electric capacity", "electric coaches", "Electric coach", "electric heater", "electric hybrid vehicle", "Electric hybrid vehicles", "electricity bill", "Electricity bills", "Electricity Boards", "Electricity capacity costing", "electricity capacity planning", "Electricity coming", "electricity comings", "electricity conservations", "Electricity converts standard coal", "electricity converts standard coals", "Electricity costs", "Electricity Council", "electricity councils", "electricity efficiencies", "Electricity efficiency", "electricity end-use efficiencies", "Electricity End-Use Efficiency", "electricity from cane residue", "Electricity from cane residues", "electricity from electricities", "Electricity from Electricity", "Electricity generating facilities", "electricity generating facility", "electricity generating industries", "Electricity generating industry", "Electricity generation capabilities", "electricity generation capability", "Electricity growth", "electricity growths", "Electricity industry", "electricity interruptions", "electricity load cycling", "electricity load", "electricity load shifting", "electricity market module", "electricity pricing", "electricity sales", "electricity sector characteristic", "Electricity sector characteristics", "electricity service companies", "Electricity service company", "Electricity supplies", "Electricity supply", "Electricity use", "electricity uses", "Electric net", "electric nets", "electric power demands", "electric power interruption", "electric power locomotive", "Electric power locomotives", "electric power system", "electric rate", "Electric rates", "Electric space heating", "Electric supply industries", "electric supply industry", "electric utilit", "electric utilities cutting purchase", "Electric utilities cutting purchases", "Electric utilities mandatory least", "electric utilities mandatory leasts", "Electric Utility Bidding", "electric utility biddings", "Electric Utility Conference", "electric utility conferences", "Electric utility grid", "electric utility grids", "electric utility merger", "electric vehicle recharging infrastructure", "electronic ballast", "electronic ballast standard", "embryonic environmental initiative", "Embryonic environmental initiatives", "Embryonic internationalism", "embryonic internationalisms", "Emission among countries", "emission among country", "Emission among industries", "emission among industry", "emission assumption", "Emission assumptions", "Emission between Countries", "emission between country", "emission by power plant", "Emission by Power Plants", "Emission by sector", "emission by sectors", "Emission by source", "emission by sources", "emission change", "Emission changes", "emission coefficient", "Emission coefficients matrices", "emission coefficients matrixes", "emission coefficients matrix", "emission controls", "Emission data", "emission datum", "Emission equipment", "emission equipments", "emission estimate", "Emission estimates", "emission factor", "Emission factories", "Emission factors", "emission figure", "Emission figures", "Emission from coal", "emission from coals", "emission from consumption sector", "Emission from consumption sectors", "emission from energy producing source", "Emission from energy producing sources", "Emission from limestone processing", "emission from paddy field", "Emission from paddy fields", "Emission from rice Cultivation", "emission from rice cultivations", "Emission from wastewater", "emission indicator", "Emission indicators", "Emission information", "emission informations", "emission in percentile", "Emission in percentiles", "emission intensit", "Emission Intensities", "emission intensity", "Emission level", "emission limit", "Emission limits", "Emission of carbon", "emission of carbons", "Emission of car transport", "emission of car transports", "Emission of methane", "emission of methanes", "Emission on cross-section", "emission path", "Emission paths", "Emission pattern", "emission patterns", "Emission per capita", "Emission permits", "Emission per person", "emission per persons", "Emission per tonne", "emission per tonnes", "Emission per unit", "Emission per unit of output", "emission per unit of outputs", "Emission per unit of production", "emission per unit of productions", "emission per units", "Emission policies", "Emission policy", "emission projection", "Emission Purification Scrubbing", "emission quota", "Emission quotas", "Emission reduction equal", "emission reduction equals", "emission reduction potential", "Emission reduction proposal", "emission reduction proposals", "Emission regulation", "emission regulations", "emission relationship", "Emission relationships", "emission restriction", "Emission role", "emission roles", "emissions of hydrocarbon", "Emissions of hydrocarbons", "emission source", "emission target", "Emission targets", "Emission technology transfer", "emission technology transfers", "Emission Type", "emission types", "emission value", "Emission values", "Emission variance", "emission variances", "emission vehicle regulation", "Emission vehicle regulations", "EMS", "end-use categories", "end-use category", "end use characterization", "end-use consumer", "end-use consumption oil", "end-use customer", "end-use demand for energies", "end-use demand for energy", "end-use demand", "end use efficiencies", "End-use-efficient technologies", "end-use-efficient technology", "end-use energies", "end-use energy consumption", "end-use energy efficiencies", "end-use energy efficiency", "end-use energy efficiency improvement", "end-use energy", "End-use", "end use", "end-use industries", "end use industries", "end-use industry", "end use industry", "end-use load data", "end-use load datum", "end-use markup", "end use metering", "end use monitoring", "end use of electricities", "end use of electricity", "end-use price", "end use pricing", "end-user efficiencies", "End-user efficiency", "end use relative", "end-user energy efficiency investment", "End-user energy efficiency investments", "end user", "End-users", "End-user technologies", "end-user technology", "end-use service", "end-use technologies", "end-use technology", "Energy absorption", "energy activities", "Energy activity", "energy aggregate", "energy analyses", "Energy analysis", "energy analysts", "energy aspects of transport", "Energy auditing", "energy audit instrument", "Energy audit instruments", "energy audit participant", "Energy audit participants", "energy audit scheme", "energy building code", "energy building", "Energy buildings", "Energy capacity", "energy carrier", "Energy carriers", "energy censuses", "Energy census", "energy cogenerations", "Energy Committee", "energy committees", "energy companies", "energy conservation center", "Energy conservation centers", "energy conservation device", "Energy conservation devices", "energy conservation in building", "energy conservation measure", "Energy conservation measures", "Energy Conservation Planning Scheme", "energy conservation planning schemes", "energy conservation policies", "Energy conservation policy", "energy conservation product", "Energy conservation products", "Energy conservation promotion", "energy conservation promotions", "energy conservation researches", "Energy consumers", "energy consuming region", "energy consumption database", "energy consumption growth", "energy consumption per capita", "energy consumption per pound of product", "energy consumption per unit", "energy consumption profile", "energy consumption saving", "Energy Consumption Savings", "energy consumption time series", "energy conversions", "energy cooperation", "energy cooperative", "energy cost saving", "energy costs", "Energy Decision", "energy decisions", "energy deficits", "energy demand aggregation processes", "energy demand aggregation process", "energy demand alternative", "energy demand analyses", "energy demand analysis", "energy demand characteristics in term", "energy demand conservation", "energy demand conservation program", "energy demand cooling", "energy demand elasticities", "energy demand elasticity", "energy demand forecasting", "energy demand for transportation", "energy demand growth", "energy demand", "energy demand in alternative technologies", "energy demand in alternative technology", "energy demand in households account", "Energy demand level", "energy demand levels", "energy demand loading", "energy demand management activities", "energy demand management activity", "energy demand management", "energy demand measure", "energy demand prediction", "energy demand profile", "energy demand projection", "energy demand reduction", "energy demand scenario", "energy demand shock", "energy demand side", "energy distribution", "energy distributors", "energy diversification", "energy efficiency demand management", "energy-efficiency guideline", "energy efficiency", "energy efficiency industries", "energy efficiency investment", "Energy efficiency investments", "energy efficiency labelling", "energy efficiency labelling scheme", "energy efficiency measure", "Energy efficiency measures", "Energy Efficiency Office", "energy efficiency offices", "energy efficiency operation", "energy efficiency policy", "energy efficiency strategies", "energy efficiency strategy", "energy efficiency test", "energy efficiency testing capacity", "energy efficiency testing credibilities", "energy efficiency testing facility", "energy efficiency testing infrastructures", "energy efficiency testing laboratory", "Energy efficient commercial office building", "energy efficient commercial office buildings", "energy-efficient device", "Energy-efficient devices", "Energy efficient equipment", "energy efficient equipments", "energy efficient lamp", "Energy efficient lamps", "energy-efficient model", "energy efficient technology", "energy emission", "Energy emissions", "energy end-use efficiencies", "energy end-use efficiency", "energy end uses", "Energy evaluation", "energy evaluations", "energy expenditure", "Energy expenditures", "energy exploitations", "energy forecast", "energy industries", "Energy instrumentation", "energy instrumentations", "energy intensity estimate", "Energy Intensity", "Energy intensive", "energy intensives", "energy investment", "energy investment strategies", "energy investment strategy", "energy investment tax credit", "energy labelling scheme", "energy lifecycle saving", "energy linkage", "energy market behavior", "energy market control", "energy market design", "energy market development", "energy market distortion", "energy market economics", "energy market equilibration", "energy market failure", "energy market force", "energy market imperfection", "energy market intelligence", "energy market penetration", "energy market player", "energy market price", "energy market saturation", "energy market segmentation", "energy market sensitivities", "energy market sensitivity", "energy market share estimation", "energy market share", "Energy markets", "energy market speculation", "energy market subsid", "energy market transformation", "energy market trend", "energy market uncertainties", "energy market uncertainty", "energy market upheaval", "energy market viabilities", "Energy metering", "energy mix", "energy model", "Energy modeling", "Energy models", "energy optimization", "energy outlook", "energy outsourcing", "energy performance contracting", "energy performance", "energy performance of building", "Energy perspective", "energy perspectives", "energy per unit masses", "energy per unit mass", "energy picture", "energy pipeline", "energy planner", "energy plantation", "Energy plantations", "energy policy implication", "Energy Policy Implications", "Energy policy information", "energy policy informations", "energy problems", "Energy producers", "energy product demand", "energy production", "energy production tax credit", "energy rating system", "energy reserve addition", "energy reserve estimate", "energy reserve level", "energy reserve prediction", "energy reserves depletion", "energy retailer", "energy retail supplier", "energy-saving measure", "Energy-saving measures", "energy savings project", "Energy savings projects", "Energy scenarios", "Energy sector", "energy sectors", "energy security", "energy self sufficiencies", "energy service demand", "energy service provider", "energy services", "energy services provider", "Energy shortages", "Energy simulation modeling", "energy standard", "energy stock", "energy storage capacities", "energy storage capacity expansion", "energy storage capacity", "energy storage capacity requirement", "energy storage expansion", "energy storage tariff", "energy subscription service", "energy suppl", "energy suppliers", "energy supply curve", "energy supply disruption", "energy supply forecast", "energy supply of electricities", "energy supply of electricity", "energy supply of energies", "energy supply of energy", "energy supply shortage", "Energy system aggregation", "energy system aggregations", "Energy systems", "Energy technology assessment", "energy technology assessments", "Energy technology demonstration center", "energy technology demonstration centers", "Energy technology deployment", "energy technology deployments", "energy transformation", "energy transformation sector", "Energy usage", "energy usages", "energy use coefficient", "Energy use coefficients", "energy use efficiencies", "Energy use efficiency", "energy use for petroleum refining", "energy use for refrigeration", "energy use for space heating", "Energy use from production", "energy use from productions", "energy use in building", "Energy use in buildings", "energy use intensities", "energy use intensity", "energy use pattern", "energy use reduction", "energy user", "Energy users", "energy use standard", "energy use technique", "Energy use techniques", "energy using product", "Enteric Fermentation Emission", "enteric fermentation emissions", "Enteric Fermentation", "enteric fermentations", "Enteric Ferment", "enteric ferments", "Environment agencies", "Environment Agency", "Environmental Action", "Environmental actions", "environmental administrative organization", "Environmental administrative organizations", "environmental agenda", "Environmental agendas", "environmental agendum", "Environmental amenities", "environmental amenity", "environmental application", "Environmental Applications", "environmental aspect", "environmental benefits", "Environmental betterment", "environmental betterments", "environmental campaign", "environmental capacities", "environmental challenge", "environmental conservations", "environmental cost", "Environmental crimes", "Environmental cycle", "environmental cycles", "environmental damage", "environmental decision", "Environmental decisions", "environmental destruction", "Environmental devastation", "environmental devastations", "Environmental effect", "environmental effects", "environmental externalit", "Environmental goal", "environmental group", "Environmental groups", "environmental impact", "environmental imperative", "Environmental imperatives", "environmental implication", "Environmental input-output model", "environmental input-output models", "Environmentalism", "environmentalisms", "environmental legislation", "environmental litigations", "environmental lobb", "Environmental lobbying", "Environmentally benign energy", "Environmentally benign forms of energy", "environmentally friendly vessel", "Environmentally friendly vessels", "environmentally sensitive areas", "Environmentally sound batteries", "environmentally sound battery", "Environmentally sound policies", "environmentally sound policy", "environmental management system", "environmental management technique", "Environmental management techniques", "environmental mandate", "environmental measure", "Environmental measures", "Environmental modification", "environmental modifications", "environmental noises", "environmental outcome", "environmental performance", "environmental performance indicator", "environmental poison", "Environmental poisons", "environmental policy consideration", "Environmental policy considerations", "Environmental policy formulation", "environmental policy formulations", "environmental policy goal", "Environmental policy goals", "Environmental policy harmonization", "environmental policy harmonizations", "environmental policy maker", "Environmental policy makers", "Environmental policy mandate", "environmental policy mandates", "Environmental Politics", "environmental pollutant", "Environmental pressure", "Environmental processes", "environmental process", "environmental protection agency", "Environmental Protection Commission", "environmental protection commissions", "Environmental protection division", "environmental protection divisions", "environmental protection goal", "Environmental protection goals", "environmental protection industries", "Environmental Protection Industry", "environmental protection law", "Environmental protection management", "environmental protection managements", "Environmental protection policies", "environmental protection policy", "environmental protection technologies", "Environmental protection technology", "environmental protest", "Environmental protests", "environmental quality", "environmental quality standard", "environmental radioactivities", "environmental radioactivity", "environmental regulation", "environmental regulator", "Environmental regulators", "environmental requirement", "Environmental requirements", "environmental researches", "environmental risk", "environmental statute", "Environmental statutes", "environmental tribunal", "Environmental tribunals", "Environmental welfare", "environmental welfares", "Environment Commissioner", "environment commissioners", "environment", "Environment policy making", "environment policy makings", "environment protection commissions", "Environment protection countryside", "environment protection countrysides", "environment protections", "environment protection standards", "equity principle", "Equity principles", "Equivalent emissions per unit", "equivalent emissions per units", "esco contract", "esco model", "Estimates for Methane Emission", "estimates for methane emissions", "estimates sale", "estimating electricity demand", "estimating methane emission", "Estimating Methane Emissions", "estimating price elasticities for energies", "estimating price elasticities for energy", "estimation of sectoral demand elasticities", "estimation of sectoral demand elasticity", "ethane cracker", "ethanol alcohol", "ethanol flexes", "ethanol flex", "Ethanol from Sugarcane", "ethanol from sugarcanes", "ethanol industries", "ethanol industry", "ethanol market", "Ethanol price subsidies", "ethanol price subsidy", "ethanol producer", "ethical anomalies", "Ethical anomaly", "ethical belief", "Ethical beliefs", "Ethical properties", "ethical property", "ethical rule", "ethical standard", "Ethical standards", "excess electricities", "excess electricity", "excessive inventory buildup", "excess supplies", "Exclusive use by transport", "exclusive use by transports", "Exclusive use", "exclusive uses", "exhaust emission", "exhaust emissions from jet engine", "Exhaust Emissions from Jet Engines", "exhaust emissions from motorcycle", "Exhaust emissions from motorcycles", "Exhaust fee", "exhaust fees", "exhaust pollutants from light-duty vehicle", "Exhaust pollutants from light-duty vehicles", "Exogenous decarbonization", "exogenous decarbonization of energies", "Exogenous decarbonization of energy", "exogenous decarbonizations", "expansion of energy service", "expansion of energy supplies", "expansion of energy supply", "expansion of hydroelectricities", "expansion of hydroelectricity", "export capacities", "export capacity", "export demands for energies", "export demands for energy", "export supply problem", "export terminal", "external energy supplies", "external energy supply", "extractable fossil resource", "Extractable fossil resources", "extra heavy oil", "extra light grade", "extrapolation losses", "extrapolation loss", "extra supplies", "extra supply", "extreme weather variabilities", "Extreme weather variability", "fair allocation of emission quota", "Fair allocation of emission quotas", "fair allocation of quota", "Fair allocation of quotas", "Fair allocation principle", "fair allocation principles", "fair buy-back rates for biomasses", "Fair buy-back rates for biomass", "Feasible fossil fuel production", "feasible fossil fuel production path", "Feasible fossil fuel production paths", "feasible fossil fuel productions", "Ferrous Metal Mining", "ferrous metal minings", "final demand", "final demand mixes", "final demand mix", "final demand projection", "final energy consumption by fuel source", "final energy consumption by sector", "final energy consumption growth", "final energy consumption", "final energy demand", "fine particle emission", "fine particulate", "fiscal incentive policy", "flood protections", "Flue gas", "flue-purifying technologies", "Flue-purifying technology", "fluidization", "fluorescent lamp", "Fluorescent lamps", "forecasting energy consumption", "forecasting energy intensities", "forecasting energy intensity", "Forest acreage", "forest acreages", "forest agencies", "Forest Agency", "Forest clearing rate", "forest clearing rates", "Forest coverage ratio", "forest coverage ratios", "Forest cultivation", "forest cultivations", "forest death", "forest fire warning", "Forest fire warnings", "forest inventory statistic", "Forest inventory statistics", "forest law", "forestry resource use pattern", "Fossil carbon well", "fossil carbon wells", "fossil energy consumption", "Fossil energy growth", "fossil energy growths", "fossil energy", "fossil energy system", "Fossil energy systems", "Fossil energy technologies", "fossil energy technology", "Fossil energy use", "fossil energy uses", "Fossil free energy future", "fossil free energy futures", "fossil fuel availabilities", "Fossil fuel availability", "fossil fuel burning", "Fossil fuel burning rate", "fossil fuel burning rates", "fossil fuel combustion", "Fossil fuel consumption", "fossil fuel consumptions", "Fossil fuel control policies", "fossil fuel control policy", "Fossil Fuel Data", "fossil fuel datum", "Fossil fuel demand", "fossil fuel demands", "fossil fuel dependencies", "fossil fuel dependency", "Fossil fuel depletion", "fossil fuel depletions", "fossil fuel economies", "Fossil fuel economy", "fossil fuel emissions", "fossil-fuel", "fossil fuel mixes", "fossil fuel mix", "Fossil fuel phase", "fossil fuel phases", "fossil fuel pollutant", "Fossil fuel pollutants", "fossil fuel prices", "fossil fuel producer", "Fossil fuel producers", "Fossil fuel production", "fossil fuel productions", "fossil fuel r&d", "fossil fuel resource", "Fossil fuel resources", "fossil fuel supplier", "Fossil fuel suppliers", "fossil-fuel technologies", "fossil fuel technologies", "fossil-fuel technology", "fossil fuel technology", "Fossil fuel usage", "fossil fuel usages", "Fossil fuel use pattern", "fossil fuel use patterns", "fossil fuel use policies", "Fossil fuel use policy", "fossil generation technologies", "fossil generation technology", "free fuel", "freight truck fuel efficiencies", "freight truck fuel efficiency", "freight truck", "freight truck stock", "fuel allocation", "fuel attribute", "fuel availabilities", "fuel availability", "Fuel Carbon", "fuel carbons", "fuel cell gasoline", "fuel cell hydrogen", "fuel cell methanol hybrid", "fuel cell researches", "Fuel cell research", "fuel cell vehicle", "Fuel cell vehicles", "fuel combustion", "Fuel consumption rate", "fuel consumption rates", "fuel demand by mode of freight travel", "fuel demand", "fuel dispatches", "fuel dispatch", "Fuel Distribution", "fuel distributions", "fuel economy improvement", "fuel efficiency equation", "fuel efficiency of automobile stock", "fuel-efficient vehicle", "Fuel-efficient vehicles", "Fuel emission", "fuel oil sale", "fuel oil sales growth", "fuel oil sales in volume", "fuel regulation", "Fuel regulations", "fuel shortages", "fuel substitution", "fuel supply", "fuel switching", "fuel type", "fuel use efficiencies", "Fuel use efficiency", "fuel-use restriction", "fuel wood", "fugitive emission", "Fugitive emissions from oil", "fugitive emissions from oils", "Fugitive fuel", "fugitive fuels", "fugitive methane emission", "Fugitive methane emissions", "future energy consumption", "future energy demand", "future energy growth rate", "future energy need", "future energy projection", "future energy saving", "future energy use source", "future of electricity restructuring", "gas accumulations", "gas activities", "gas affect", "Gas affects", "gas agreements", "Gas as fuel", "gas as fuels", "gas business", "gas capacities", "gas capacity", "Gas cleaning", "gas companies", "gas consumption", "gas desulfurization", "gas emissions", "gas engine locomotive", "Gas engine locomotives", "gaseous compound", "Gaseous compounds", "gaseous effluent", "Gaseous effluents", "gas-fired power station", "Gas-fired power stations", "gas fueling engine", "Gas fueling engines", "gasification capacities", "gasification capacity", "gasifier unit", "gas liquid", "Gas Liquids", "gasoline blending", "gasoline blending stock", "gasoline consumption", "gasoline markets", "gasoline price rise on mileage", "gasoline standard", "gasoline use", "gas pipeline grid", "Gas pipeline grids", "gas powered vehicles", "gas production", "Gas Production Venting", "gas reservoir", "gas shortages", "gas total", "Gas totals", "Gas usage", "gas usages", "gas venting", "gas waste", "Gas wastes", "gelfuel initiative", "Generation of PCBs", "generation unit", "Generation units", "Generator for waste", "generator for wastes", "genetic biodiversities", "Genetic biodiversity", "genetic ecologies", "Genetic ecology", "Global assessment", "global assessments", "global asset", "Global assets", "Global atmosphere", "global atmospheres", "Global average emission", "global average emissions", "Global average temperature", "global average temperatures", "global biomass supplies", "Global biomass supply", "global carbon dioxide emission", "Global carbon dioxide emissions", "Global Carbon Dioxide Production", "global carbon dioxide productions", "global climate change", "Global climate change policies", "global climate change policy", "Global climate change problem", "global climate change problems", "Global climatic change", "global climatic changes", "Global climatic losses", "global climatic loss", "global electricity generations", "global emission", "Global emission level", "global emission levels", "global emissions quota", "Global emissions quotas", "global energy demand", "Global energy-economic system", "global energy-economic systems", "global energy fulcra", "Global energy fulcrum", "global energy fulcrums", "global energy future", "global energy mixes", "Global energy mix", "global energy supplies", "Global energy supply", "global energy system", "Global energy use", "global energy uses", "Global environmental deterioration", "global environmental deteriorations", "Global environmentalism", "global environmentalisms", "Global environmental pollution", "global environmental pollutions", "Global environmental problem", "global environmental problems", "global environmental researches", "Global environmental research", "global environmental service", "Global Environmental Services", "global environment facilities", "global environment", "Global fossil energy use", "global fossil energy uses", "Global Fossil Fuel Use", "global fossil fuel uses", "Global fuel combustion", "global fuel combustions", "Global greenhouse effect", "global greenhouse effects", "global greenhouse gas emission", "Global greenhouse gas problem", "global greenhouse gas problems", "Global greenhouse", "global greenhouses", "global market for energy supplies", "global market for energy supply", "global methane emission", "Global methane emissions", "global oil demand", "global oil market", "global oil trade", "global pollutant", "Global pollutants", "global pollutions", "Global preference score", "Global preference score method", "global preference score methods", "global preference score mixture", "Global preference score mixtures", "Global preference score procedure", "global preference score procedures", "global preference scores", "Global preference score weighting", "global price survey", "global primary energy demand", "Global simulation model", "global simulation models", "Global surface temperature", "global surface temperatures", "global trade facilitations", "Greener product design", "greener product designs", "Greener production", "greener productions", "green financial product", "Green financial products", "Greenhouse cocktail", "greenhouse cocktails", "Greenhouse economics", "greenhouse gas emissions accords", "greenhouse gas emissions quota", "Greenhouse gas emissions quotas", "greenhouse gas mitigation", "Greenhouse gas question", "greenhouse gas questions", "greenhouse gas reduction", "Greenhouse gas unit", "greenhouse gas units", "Greenhouse insurance", "greenhouse insurances", "Greenhouse issue", "greenhouse issues", "greenhouse phenomena", "Greenhouse phenomenon", "greenhouse phenomenons", "Greenhouse problem", "greenhouse problems", "Greenhouse progress", "Greenhouse threat", "greenhouse threats", "greening of product", "Greening of products", "Green innovation", "green innovations", "green movement", "Green movements", "Green Paper", "green papers", "green party representative", "Green party representatives", "Green politics", "green product", "green production", "Green taxes", "green tax", "green technological forecast", "Green technological forecasts", "green transport industries", "green transport industry", "green transport technologies", "green transport technology", "green vehicle", "Green vehicles", "Green version", "green versions", "grid application", "grid connected renewable energies", "grid reinforcement", "Gross commercial energy consumption", "gross commercial energy consumptions", "Gross natural gas production", "gross natural gas productions", "Gross tanker tonnage", "gross tanker tonnages", "ground source heat pump", "groundwater protection", "growth in coal consumption", "growth in demand for energy service", "growth in demand", "growth in electricity demand", "Growth in Energy Consumption", "growth in energy consumptions", "Growth in energy demand", "growth in energy demands", "growth in energy use", "growth in hydropower", "growth in petroleum consumption", "growth in wind power", "Growth in world energy demand", "growth in world energy demands", "growth of demand for electricities", "growth of demand for electricity", "growth of electricity demand", "growth of energy demand", "Growth of environmentalism", "growth of environmentalisms", "Growth of new energy technologies", "growth of new energy technology", "Growth of vegetation", "growth of vegetations", "Growth of world oil demand", "growth of world oil demands", "Growth rates in energy consumption", "growth rates in energy consumptions", "guaranteed service level", "hard coals", "hard wired luminary", "harvesting biomass energies", "Harvesting biomass energy", "harvest of biomass fuel", "Harvest of biomass fuels", "hazardous constituent", "Hazardous constituents", "hazardous emission", "Hazardous emissions", "hazardous fuel", "Hazardous fuels", "hazardous load", "Hazardous loads", "hazardous noxious substance", "Hazardous noxious substances", "hazardous occupation", "Hazardous waste area", "hazardous waste areas", "Hazardous Waste Control", "hazardous waste controls", "hazardous waste disposals", "Hazardous waste incineration", "hazardous waste incinerations", "Hazardous waste landfill", "hazardous waste landfills", "hazardous waste management alternative", "Hazardous waste management alternatives", "Hazardous waste management", "hazardous waste management problem", "Hazardous waste management problems", "hazardous waste managements", "hazardous waste policies", "Hazardous waste policy", "Hazardous waste regulation", "hazardous waste regulations", "Hazardous Waste Site", "Hazardous waste siting", "Hazardous waste stream", "hazardous waste streams", "Hazardous waste type", "hazardous waste types", "hazardous waterway", "Hazardous waterways", "Hazard potential", "hazard potentials", "hazard reduction", "health effects of pollution", "health risk", "healthy crop", "Healthy crops", "heat capacities", "Heat capacity", "heat demand", "heat exchanger", "heating rates", "heat output", "Heat transport", "heat transports", "Heat Trap", "Heat trapping", "heat traps", "heavy crude", "Heavy crudes", "heavy energy consumer", "high efficiency air conditioner", "high efficiency motor", "high efficiency motors program", "high efficiency transmission system", "High-energy air", "high-energy airs", "high-energy consumer", "High-energy consumers", "High-energy consuming", "high energy consumption", "high energy demand", "high energy intensities", "high energy price", "higher depletion rate", "higher energy densities", "higher energy density", "higher fuel price", "higher long-run price elasticities", "higher long-run price elasticity", "higher profit margin", "high heat demand", "high oil price", "high oil revenue", "high price of fuel", "high prices for energies", "high prices for energy", "high prices for fuel", "high quality emission", "High quality emissions", "high sulphur coals", "High sulphur fuel oil", "high sulphur fuel oils", "High sulphur", "high sulphurs", "High-volume waste", "high-volume wastes", "home appliance", "homogeneity assumption", "host country environmental law", "hot water unit", "household air-conditioner", "household appliances", "Household cooking", "household customer", "household demand", "household dishwasher", "household electric appliance", "Household electric appliances", "Household electric appliance trade", "household electric appliance trades", "household electric oven", "household electric refrigerator", "household electric tumble", "household energy consumption", "household energy customer", "household energy market", "household energy sectors", "household energy use", "household fuels", "household good", "household lamp", "household refrigerator", "Household refrigerators", "Household sector", "household sectors", "household washer", "Household washers", "household washing machine", "Human adaptation", "human adaptations", "human behaviours", "human health", "Human respiratory health", "human respiratory healths", "hydrocarbon energy demand", "hydrocarbons lead", "Hydrocarbons leads", "hydrogen economies", "hydrogen economy", "Hydrogen Network", "hydrogen networks", "hydrogen power batteries", "Hydrogen power battery", "Hydrogen Project", "hydrogen projects", "hydrologic resource", "hydro powers", "hydro source", "Hydro thermal generation", "hydro thermal generations", "iiec", "illegal discharge", "Illegal discharges", "Illegal disposal", "illegal disposals", "illegal logging", "illumination", "impact on energy demand", "Impacts of biomass production", "impacts of biomass productions", "Impacts of changes in energy use", "impacts of changes in energy uses", "Impacts of Climate Change", "impacts of climate changes", "impacts of energy production", "implementation of energy management system", "implementation of energy service", "implicit carbon taxes", "Implicit carbon tax", "import dependenc", "import dependency point of view", "import dependent developing countries", "import dependent developing country", "importer of electricities", "Importer of electricity", "incandescent bulb", "Incentive-distorting taxes", "incentive-distorting tax", "incentive implication", "Incentive implications", "incentive instrument", "Incentive instruments", "incentives for industry researches", "Incentives for industry research", "income elasticities of energy demand", "income elasticity of energy consumption", "income elasticity of gasoline demand", "increase in demand for electricities", "increase in demand for electricity", "increase in energy consumption", "increase in energy demand", "increase in energy import dependencies", "increase in energy import dependency", "increases in coal use", "increasing energy demand", "increasing energy efficiencies", "increasing energy efficiency", "Incubators for technology companies", "incubators for technology company", "indirect emission", "indirect emission intensities", "Indirect emission intensity", "Indirect emissions", "indirect utilities", "Indirect utility function", "indirect utility functions", "Indirect utility", "indoor air qualities", "Industrial activities", "industrial activity", "industrial applications", "industrial association", "Industrial associations", "industrial consumption of electricities", "industrial consumption of electricity", "industrial energy conservation", "industrial energy consumption", "industrial energy efficiencies", "industrial energy process improvement", "industrial energy use", "industrial energy use regulation", "industrial equipment energy efficiencies", "industrial equipment energy efficiency", "industrial equipment energy standard", "Industrial fuel combustion", "industrial fuel combustions", "industrial kiln", "Industrial kilns", "Industrial sewage treatment", "industrial sewage treatments", "Inequity-disutilities", "Inequity-Disutility", "Inequity-disutility model", "inequity-disutility models", "inequity mitigating capacities", "Inequity mitigating capacity", "Inequity mitigation properties", "inequity mitigation property", "Inequity sensitivities", "inequity sensitivity", "Insurance losses", "insurance loss", "international convention", "international convention on limitation of liabilities", "International Convention on limitation of liability", "International Convention on Oil Pollution Preparedness", "International conventions on safety at sea", "international conventions on safety at seas", "International Cooperation Commission", "international cooperation commissions", "international cooperation in energy efficiencies", "international cooperation on energy efficiencies", "international cooperation on energy efficiency", "international electrotechnical commissions", "international energy agencies", "international environmental affair", "International Environmental Affairs", "international environmental group", "International environmental groups", "international environmental policies", "international environmental policy", "International Environment Reporter", "international environment reporters", "international institute for energy conservations", "International Maritime Association", "international maritime associations", "international maritime communities", "International maritime community", "International Maritime Organisation", "International Motor Trade", "international motor trades", "international natural gases", "International Natural Gas", "international natural gasses", "International Oil Pollution Compensation Fund", "international oil pollution compensation funds", "International Tanker Owners Pollution Federation", "international tanker owners pollution federations", "Interventionist policies", "interventionist policy", "Investment in carbon abating technologies", "investment in carbon abating technology", "investment in efficiencies", "Investment in Efficiency", "investment in end-user energy efficiencies", "Investment in end-user energy efficiency", "Investment in energy conservation", "investment in energy conservations", "investment in energy efficiencies", "Investment in energy efficiency", "Investment in Energy Use", "investment in energy uses", "investment risks", "Involuntary inhalation", "involuntary inhalations", "irrigation efficiencies", "Irrigation efficiency", "Irrigation pump testing", "Lake acidification", "lake acidifications", "land degradation", "Land disposal facilities", "land disposal facility", "land disposal", "Landfill disposal", "landfill disposals", "landfill emission", "Landfill emissions", "landfill site", "Landfill sites", "landfill temperature", "Landfill temperatures", "Landfill wastewater", "Land remediation", "land remediations", "Landscape change", "landscape changes", "land tenure", "Land use competition", "land use competitions", "Land use development", "land use developments", "land use", "Land use management", "land use managements", "land use planning", "land use strategies", "Land use strategy", "Large Combustion Plant Directive", "large combustion plant directives", "large combustion plant installation", "Large combustion plant installations", "Large Combustion Plant Ordinance", "large combustion plant ordinances", "Large combustion plant proposal", "large combustion plant proposals", "large electrical plant", "large emission", "large emission reduction goal", "Large emission reduction goals", "Large emissions", "large municipality utility", "large scale generation of electricities", "large scale generation of electricity", "leak detection & repairs", "least cost energy path", "level of emission", "levels of energy demand", "Liabilities for pollution", "liabilities for pollutions", "liability clause", "Liability clauses", "Liability Convention", "liability conventions", "liability law", "Liability laws", "liability limit", "Liability limits", "light crude", "light-duty commercial fleet vehicle", "light-duty diesel vehicle", "light-duty truck", "light-duty vehicle", "light-duty vehicle stock", "light fuel oil", "lighting efficiencies", "lighting efficiency", "lighting energy demand", "lighting equipment", "lighting equipment retrofit", "lighting equipment supplier", "lighting supplier", "light truck fuel economies", "light truck", "light vehicle size", "limitation of emission", "Limitation of emissions", "Limit values for lead in air", "limit values for lead in airs", "liquefied petroleum gas", "liquid effluent", "liquid injection incinerations", "living condition", "living organism", "Living organisms", "Living space", "living spaces", "living standard", "lng project", "lng terminal", "load management", "load management strategies", "load management strategy", "local fuel requirement", "local generation capacities", "local generation capacity", "local staff technical capability", "long-term elasticities", "long-term elasticity", "long-term elasticity of demand", "long-term energy demand", "long-term price elasticities", "long-term price elasticity", "Loss of biodiversity", "lower emissions reduction", "Lower emissions reductions", "low income energy assistance program", "low oil price", "Major emission", "major emissions", "Major emitter", "major emitters", "Major end-uses", "Major energy source", "major energy sources", "Major environmental policies", "major environmental policy", "major environmental problem", "Major environmental problems", "mall", "mandatory shipping lane", "Mandatory shipping lanes", "marginal costs of energy saving", "Marginal costs of energy savings", "marginal costs of energy supplies", "Marginal costs of energy supply", "Marginal incentive", "marginal incentives", "marginal price of generation", "marginal product of energies", "Marginal product of energy", "Marginal product of energy use", "marginal product of energy uses", "marginal supplier of oil", "Marine Oil Spill Response", "marine oil spill responses", "Maritime activities", "maritime activity", "Maritime casualties", "maritime casualty", "maritime claim", "maritime safeties", "maritime safety issue", "Maritime safety issues", "Maritime space", "maritime spaces", "maritime training", "maritime transport", "maritime zone", "Maritime zones", "marketable permit", "market based economy", "market demand for energy service", "market for energies", "market for energy efficiencies", "market for energy efficiency", "market for energy", "market for energy service", "market for permit", "market penetration model", "Market penetration models", "Market penetration rate", "market penetration rates", "market transformation program", "market transparencies", "market viabilities", "market viability", "mass motorization", "maximum emissions", "maximum sustainable capacities", "maximum sustainable capacity", "member state", "methane abatement option", "Methane abatement options", "methane combustion emission", "Methane combustion emissions", "methane concentration", "Methane correction", "methane corrections", "Methane emissions from rice cultivation", "methane emissions from rice cultivations", "Methane from fuel combustion", "methane from fuel combustions", "methane from landfill", "Methane from landfills", "methane gas engine", "Methane gas engines", "methane gathering system", "Methane gathering systems", "methane recovery from landfill", "Methane recovery from landfills", "metric tons carbon equivalent", "microwave oven", "mid sized municipal utility", "midsize municipal utility", "mineral resources conservation", "minibus taxes", "minimum energy performance standard", "Mitigation effect", "mitigation effects", "Mitigation of Acid Rain", "mitigation of acid rains", "Mitigation potential", "mitigation potentials", "Mitigation technologies", "mitigation technology", "model energy communities", "model energy community", "modern energy carrier", "Modern energy carriers", "Modern energy source", "modern energy sources", "moral argument", "Moral arguments", "morally ambiguous situation", "Morally ambiguous situations", "moral responsibilities", "moral responsibility", "motor control system", "motor fuels conservations", "motor gasoline", "motor gasoline use", "motor manufacture", "motor population", "motor size", "motor spirit", "motor stock", "motor stock model", "motor vehicle assemblies", "motor vehicle assembly", "motor vehicle fleet", "motor vehicle fuel standard", "motor vehicles world-wide", "multimodal transport system", "multiple state model", "Multiple state models", "multi project facilities", "multi project facility", "municipal energy planning", "municipal water supplies", "Mutagenic material", "mutagenic materials", "Mutually beneficial conclusion", "mutually beneficial conclusions", "mutually beneficial consumer-producer relation", "Mutually beneficial consumer-producer relations", "national energy demand", "natural bitumen", "Natural circulation of carbon", "natural circulation of carbons", "natural climatic change", "Natural climatic changes", "natural coalition", "Natural coalitions", "natural ecosystem", "natural environment", "Natural gas account", "natural gas accounts", "natural gas consumption", "natural gas demand", "natural gas enduse", "natural gas exploration agreement", "natural gas extraction", "natural gas furnace", "natural gas heat pump", "natural gas power generation", "natural gas processing", "natural gas pumping capabilities", "natural gas pumping capability", "natural gas resources", "natural gas saving", "natural gas shortages", "natural gas suppl", "natural gas supply", "natural gas trade", "natural gas usage", "natural gas wellhead", "natural hazard", "natural heritages", "Natural methane seepage", "natural methane seepages", "Natural protection area", "natural protection areas", "natural resource utilizations", "net-bound energy distribution", "net-bound energy distributions", "net storage withdrawal", "net storage withdrawals", "new plant", "new tanker", "New tankers", "new vessel", "New vessels", "Nitrates directive", "nitrates directives", "Nitric oxides", "Nitrogen Budget", "nitrogen budgets", "Nitrogen data", "nitrogen datum", "nitrogen deposition", "nitrogen dioxides", "Nitrogen-fixing function of forest", "nitrogen-fixing function of forests", "nitrogen oxides emission", "non fossil fuel obligation", "non motorized transports", "nontraditional energy resource", "nuclear capacities", "nuclear capacity", "Nuclear contamination", "nuclear contaminations", "nuclear data", "nuclear datum", "nuclear economics", "nuclear electric energies", "nuclear electric energy", "nuclear electricities", "nuclear electricity generation", "Nuclear electricity", "nuclear electricity industries", "Nuclear electricity industry", "Nuclear energy production", "nuclear energy productions", "nuclear energy proposal", "Nuclear energy proposals", "Nuclear Energy Report", "nuclear energy reports", "Nuclear generation", "nuclear generations", "nuclear industries", "Nuclear pollution", "nuclear pollutions", "nuclear power capacities", "nuclear power capacity", "Nuclear power generation", "nuclear power generations", "nuclear power", "Nuclear surcharge", "nuclear surcharges", "Nuclear weapons proliferation", "nuclear weapons proliferations", "obsolete standard", "Ocean current", "ocean energies", "odor pollutant", "Odor pollutants", "off grid renewable energies", "Offshore activities", "offshore activity", "Offshore Oil", "Oil at sea", "oil at seas", "oil belt", "Oil by name", "oil by names", "oil capacities", "oil capacity", "oil cargoes", "Oil cargo", "oil cargos", "oil companies behaviour", "Oil Companies Behaviour", "Oil conference", "oil conferences", "Oil Consumption by Region", "oil consumption by regions", "Oil consumption fall", "oil consumption falls", "Oil consumption fell", "oil consumption fells", "oil consumptive countries", "Oil consumptive country", "Oil decline", "oil declines", "oil demand growth", "oil demand growth rate", "oil demand", "oil demand saving", "oil dependenc", "oil economies", "Oil economy", "oiled economies", "Oiled economy", "oil energies", "oil energy", "oil equivalent", "Oil equivalent per unit of output", "oil equivalent per unit of outputs", "oil equivalent unit", "Oil equivalent units", "oil exporters", "Oil exporting", "Oil falling", "oil futures", "oil importers", "oil import expenditure", "Oil importing", "oil importing nation", "Oil importing nations", "oil market analyst", "oil markets", "oil pollution emergencies", "Oil pollution emergency", "oil pollution incident", "Oil pollution incidents", "oil pollution liabilities", "Oil pollution liability", "Oil pollution preparedness", "Oil pollution prevention", "oil pollution preventions", "Oil pollution response", "oil pollution responses", "oil power", "oil price assumption", "oil price case", "oil price collapse", "Oil price crises", "oil price crisis", "Oil price equivalent", "oil price equivalents", "oil price forecast", "oil price hike", "oil price", "oil price uncertainties", "oil price uncertainty", "oil pricing chronologies", "oil pricing chronology", "oil producers", "oil production capacity", "oil revenues", "Oil Sea", "oil seas", "Oil security organization", "oil security organizations", "Oil shale development", "oil shale developments", "oil share", "Oil shares", "Oil situation", "oil situations", "Oil spill legislation", "oil spill legislations", "oil spill liabilities", "Oil Spill Liability All responsible parties", "oil spill liability all responsible party", "Oil spill liability", "Oil Spill Liability Trust Fund", "oil spill liability trust funds", "oil spill prevention", "Oil spill response", "oil spill responses", "Oil Spill Response Technologies", "oil spill response technology", "Oil squeeze", "oil squeezes", "oil system", "Oil systems", "oil tanker accident", "Oil tanker accidents", "Oil tanker Aegean Sea", "oil tanker aegean seas", "oil tanks at port", "Oil tanks at ports", "Oil tanks at sea", "oil tanks at seas", "oil tax regime", "Oil tax regimes", "oil transporting businesses", "Oil transporting business", "Oil use", "oil uses", "Oil versus politics", "oil vessel", "Oil vessels", "open fire energies", "Open fire energy", "open market", "open trade", "Organic carbon", "organic carbons", "Organic species", "original admissible option", "Original admissible options", "Origin of pollution", "origin of pollutions", "ozone-depleting substance", "Ozone-depleting substances", "ozone production", "particulate air pollution", "particulate solid", "Particulate Solids", "Passive solar design", "passive solar designs", "Patterns of energy production", "patterns of energy productions", "Patterns of tanker movement", "patterns of tanker movements", "payment for damage cost", "Payment for damage costs", "peak demand day", "peak demand", "peak demand management", "Peak electricity demand", "peak electricity demands", "peak electricity hour", "Peak electricity hours", "Peak emission", "peak emissions", "peak power saving", "peak usage day", "peak usage", "penetration of end use", "Per capita emission", "per capita emissions", "per capita energies", "Per capita energy consumption", "per capita energy consumptions", "Per capita energy growth", "per capita energy growths", "Per capita energy", "Per capita energy use", "per capita energy uses", "per capita levels of emission", "Per capita levels of emissions", "Per capita pollution", "per capita pollutions", "performance of equipment", "periodic standards update", "pesticide use", "petrochemical component", "Petrochemical components", "Petroleum combustion", "petroleum combustions", "petroleum demand in industrial building", "petroleum derivatives", "petroleum industry perspective", "Petroleum Industry Research Foundation", "petroleum industry research foundations", "Petroleum Industry Response Organization", "petroleum industry response organizations", "petroleum intelligence weeklies", "Petroleum Intelligence Weekly", "petroleum market module", "Petroleum policies of member countries", "petroleum policies of member country", "petroleum price level", "petroleum product demand", "petroleum product prices", "petroleum product production", "Petroleum Review", "petroleum reviews", "pilot demonstration project", "pipeline systems", "plant closure", "plant matter", "polluting transport mode", "Polluting transport modes", "polluting transport system", "Polluting transport systems", "pollution control processes", "Pollution control process", "Pollution damage", "pollution damages", "Pollution from coal burning", "pollution law", "Pollution laws", "Pollution liabilities", "Pollution Preparedness", "pollution prevention", "pollution problem", "Pollution problems", "poor ventilation", "port due", "Port dues", "Port inspection", "power agreement", "power capacity demand", "power capacity supplies", "power capacity supply", "power distribution charges", "power generating fuel", "Power generating fuels", "power generation boiler", "Power generation boilers", "power generation model", "power generation projection", "Power plant development", "power plant developments", "power saving", "Power stations", "precautionary approaches", "Precautionary approach", "precautionary principle", "Prevention of damage", "prevention of damages", "prevention of disaster", "Prevention of disasters", "prevention of domestic oil spill", "Prevention of domestic oil spills", "Prevention of pollution at sea", "prevention of pollution at seas", "prevention of pollution from skip", "Prevention of Pollution from Skips", "Prevention Principle", "prevention principles", "price competition", "price elasticities", "price elasticity of demands", "price elasticity of energy demand", "price for fuel", "price of energies", "price of energy", "price of oil", "price of transmission", "price of vehicle kilometre", "price per barrel", "price volatilities", "Price volatility", "primary energies", "Primary Energy Consumption", "primary energy consumptions", "Primary energy demand", "primary energy demands", "Primary energy input", "primary energy inputs", "Primary energy production", "primary energy productions", "primary energy requirement", "Primary energy requirements", "Primary energy resource", "primary energy resources", "Primary energy source", "primary energy sources", "Primary valuation question", "primary valuation questions", "principles of equities", "Principles of equity", "Principles of justice in acquisition", "principles of justice in acquisitions", "Prior consent", "prior consents", "private power law", "private power laws & regulation", "private power regulation", "privatization program", "Problem of deforestation", "problem of deforestations", "Problem of energy production", "problem of energy productions", "problem of energy shortfall", "Problem of energy shortfalls", "problem of equities", "Problem of equity", "producer gas", "production capacities", "production cost", "production drop", "production efficiencies", "production efficiency", "production facilities", "production facility", "production hike", "production incentive", "production increment", "production management", "production of electricities", "production of electricity", "production of energies", "production of energy", "production of heat", "production pattern", "production plan", "promarket policy", "protectionist measure", "protection of bird", "protection of ocean", "Protection of oceans", "protection of person", "Protection of persons", "protection taxes", "Protection tax", "proven reserve", "providers of energy service", "Provision for safety at sea", "provision for safety at seas", "provision of energy audit", "Provision of energy audits", "Provision of oil-spill response material", "provision of oil-spill response materials", "Provision of rebates on energy efficient equipment", "provision of rebates on energy efficient equipments", "public private partnering", "pure transfer", "Pure Transfers", "Rational usage", "rational usages", "rational use of energies", "Rational use of energy", "raw material", "real price of energies", "real price of energy", "Recoverable fossil fuel", "recoverable fossil fuels", "recoverable oil resource", "Recoverable ore", "recoverable ores", "recoverable reserve", "recoverable reserves of oil", "recoverable resource", "Recoverable resources", "Red energy exchange", "red energy exchanges", "Redistribution effect", "redistribution effects", "Redistributive parameter", "redistributive parameters", "redistributive regional cost", "Redistributive regional costs", "Reducing electricity demand", "reducing electricity demands", "reducing energy consumption", "reducing energy demand", "reducing energy end-use consumption", "reducing energy use", "Reducing fuel consumption rate", "reducing fuel consumption rates", "Reducing negative externalities", "reducing negative externality", "reduction in annual heating energy demand", "reduction in biomass use", "Reduction in carbon", "reduction in carbons", "Reduction in energy consumption", "reduction in energy consumptions", "reduction in energy import", "Reduction in gasoline consumption", "reduction in gasoline consumptions", "reduction of carbon dioxide emission", "Reduction of carbon dioxide emissions", "reduction of emission", "Reduction of emissions", "Reduction of gasoline", "reduction of gasolines", "reduction of hazard", "Reduction of hazards", "reduction of peak demand", "reduction of pollutant", "Reduction of pollutants", "reduction of pollution", "reductions in fuel consumption", "reference energy source", "refined gasoline", "Refined oil", "refined oils", "Refined signal", "refined signals", "Refinery maintenance", "refinery maintenances", "Refinery sector", "refinery sectors", "refrigerator buy back program", "refrigerator coil", "regional climatic change", "Regional climatic changes", "regional climatic impact", "Regional climatic impacts", "regional demand for lng", "regional standard", "Regulation of waste", "regulation of wastes", "Regulations on emission", "regulations on emissions", "regulatory decision", "Regulatory decisions", "remedial action", "Remediation Law", "remediation laws", "renewable capacities", "renewable capacity", "renewable electricities", "Renewable energy businesses", "renewable energy business", "Renewable energy development", "renewable energy developments", "Renewable Energy & Efficiency Fund", "renewable energy & efficiency funds", "renewable energy industries", "Renewable energy industry", "Renewable energy investment", "renewable energy investments", "Renewable energy policies", "renewable energy policy", "Renewable energy power generation", "renewable energy power generations", "renewable energy price", "Renewable energy prices", "renewable energy project", "Renewable energy projects", "renewable energy source", "renewable energy system", "Renewable energy systems", "Renewable energy technologies", "renewable energy technology", "renewable raw material", "Renewable raw materials", "renewable source", "Renewable technologies", "renewable technology", "rescue operation", "Rescue operations", "reserves of oil", "residential air conditioner", "residential appliance", "residential building", "residential coal", "residential customer", "residential demand for energies", "residential demand for energy", "residential demand module", "residential electricities", "residential electricity consumer", "residential electricity", "residential electric space heat", "residential energy conservations", "residential energy consumption", "residential energy demand", "residential energy efficiencies", "residential energy efficiency", "residential lighting program", "residential power load management", "residual burden", "Residual burdens", "residual damage estimate", "Residual damage estimates", "residual damage", "Residual damage per unit of waste", "residual damage per unit of wastes", "Residual damages", "Residual external damage", "residual external damages", "residual fuel", "residual heat system", "Residual heat systems", "retail energy market", "retail energy price", "retail energy sale", "retail energy sales companies", "retail energy sales company", "retail store", "Risk reduction valuation", "risk reduction valuations", "Road freight transport", "road freight transports", "road heating", "Road land transport", "road land transports", "road oiling", "road passenger", "Road Passengers", "Road passenger transport", "road passenger transports", "road transport", "road transport sectors", "rural energy concession", "Rural Energy Concessions", "rural energy system", "Rural energy systems construction", "rural energy systems constructions", "Rural energy systems", "Rural energy use", "rural energy uses", "rural infrastructure asset", "Rural transmission-lines", "Rust bucket argument", "rust bucket arguments", "rust bucket hypotheses", "Rust bucket hypothesis", "Safe-disposal market", "safe-disposal markets", "safe disposals", "Safe-disposal subsidies", "Safe Disposal Subsidies", "safe-disposal subsidy", "safe disposal subsidy", "Safe management", "safe managements", "safer sea route", "Safer sea routes", "safer ship operation", "Safer ship operations", "Safer transportation", "safer transportations", "safe sea", "Safe Seas", "Safety Act", "safety acts", "Safety at sea", "safety at seas", "safety inspections of ship", "Safety inspections of ships", "safety management", "safety of life at sea", "Safety of merchant shipping", "safety of merchant shippings", "safety regime", "Safety regimes", "Safe waste disposal", "safe waste disposals", "sawmill waste energies", "sawmill waste energy", "sawmill waste", "scientific evidence", "Seaborne trade", "seaborne trades", "sea level rise", "seasonal energy demand", "seasonal energy efficiency ratio", "seasonal residential energy consumption", "seasonal residential energy demand", "seasonal solar availability data", "seasonal solar availability datum", "seasonal storage capacities", "seasonal storage capacity", "seasonal variation in electricity demand", "season energy supplies", "season energy supply", "sea wall", "Secondary energy carrier", "secondary energy carriers", "secondary price", "security of energy supplies", "Security of energy supply", "Security of landfill design", "security of landfill designs", "security of suppl", "Severe environmental degradation", "severe environmental degradations", "Severely degraded environment", "severely degraded environments", "severe weather occurrence", "Severe weather occurrences", "Severity Index Climatic State", "severity index climatic states", "sewage nutrient", "Sewage nutrients", "Shade covering", "shade coverings", "shell efficiencies", "shell efficiency", "short-term energies", "short-term energy", "short-term energy outlook", "small sized municipal utility", "solar activities", "Solar advocate", "solar advocates", "solar businesses", "Solar business", "solar consumer", "Solar consumers", "Solar Diffusion", "solar diffusions", "solar electricities", "Solar electricity", "Solar Electric Power Association", "solar electric power associations", "solar energies", "Solar energy car", "solar energy cars", "solar energy effort", "Solar Energy Efforts", "Solar energy legislation", "solar energy legislations", "solar energy manufacturer", "Solar energy manufacturers", "Solar energy market", "solar energy markets", "solar energy product", "Solar energy technologies", "solar energy technology", "Solar equipment", "solar equipments", "solar facilities", "Solar facility", "solar flux variation", "Solar flux variations", "Solar fuel", "solar heating & cooling", "Solar hot water heating", "Solar hydrogen", "solar hydrogens", "solar industries", "Solar industry", "solar industry leader", "Solar industry leaders", "Solar industry manufacturing", "solar installation", "Solar market in record time", "solar market in record times", "Solar Market Penetration", "solar market penetrations", "solar operation", "Solar operations", "Solar Partner", "solar partners", "Solar penetration", "solar penetrations", "Solar power", "solar power industries", "Solar power industry", "solar powers", "Solar production", "solar productions", "solar provision", "Solar provisions", "solar rebate", "Solar rebates", "solar source", "Solar sources", "Solar systems", "Solar team", "solar teams", "Solar technologies", "Solar water heater", "Solid waste deposit", "solid waste deposits", "space heater", "special purpose fund", "Spill response", "spill responses", "standards enforcement mechanism", "steam engine locomotive", "Steam engine locomotives", "steam locomotive", "Steam locomotives", "steam parameter unit", "Steam parameter units", "Steam pressure", "steam pressures", "store patent watch periodic table", "straw gasifying project", "Straw gasifying projects", "subsidized electricity price", "sugar cane energies", "Sulphur content of diesel", "sulphur content of diesels", "Sulphur content of gas oil", "sulphur content of gas oils", "Sulphur content of replacement crude", "sulphur content of replacement crudes", "Sulphur diesel", "sulphur diesels", "sulphur dioxide emission", "Sulphur dioxide emissions", "sulphur dioxides", "Sum of deforestation", "sum of deforestations", "sum of emission", "Sum of emissions", "sum of preference score", "Sum of preference scores", "Superfund Act", "superfund acts", "superfund cleanup", "Superfund Cleanups", "suppliers of energies", "suppliers of energy", "Supplies of crude", "supplies of crudes", "supplies of fuel", "supply disruption", "supply of energy-efficient technologies", "supply of energy-efficient technology", "supply of oil", "surface mine", "surface mining", "Surface mining of coal", "surface mining of coals", "surface water availabilities", "Surface water availability", "surplus capacities", "Surplus capacity", "surplus energies", "surplus energy", "Surplus explanation", "surplus explanations", "Surplus framework", "surplus frameworks", "surplus generation", "surplus oil production capacities", "surplus oil production capacity", "surplus oil production", "sustainable energies", "sustainable energy futures", "sustainable energy practice", "Sustainable energy practices", "Sustainable energy strategies", "sustainable energy strategy", "sustainable energy system", "Sustainable energy systems", "sustainable enterprise", "Sustainable Enterprises", "sustainable marine ecosystem", "Sustainable marine ecosystems", "sustainable transport", "Sustainable use", "sustainable uses", "sweet sorghums", "tanker industries", "tanker industry", "tanker movement", "Tanker movements", "tanker operation", "Tanker operations", "tanker operator", "Tanker operators", "tanker owner", "Tanker owners", "tanker safeties", "Tankers Storage", "tankers storages", "tanker system", "Tanker systems", "Tanker tonnage", "tanker tonnages", "Tanker trade", "tanker trades", "Tanker traffic", "taxes on petroleum product", "Taxes on petroleum products", "tax-subsidy approaches", "Tax-subsidy approach", "Tax-Subsidy", "Tax-subsidy instrument", "Tax-subsidy regime", "tax-subsidy regimes", "technology classification", "Technology classifications", "thermal cool storage", "Thermal destruction", "thermal destructions", "thermal efficiencies", "Thermal efficiency", "thermal efficiency measure", "thermal power", "Thermal power sector", "thermal power sectors", "thermal power technologies", "Thermal power technology", "thermal technique", "Thermal techniques", "thermal treatment", "Thermal treatments", "thin film cell solar module", "time of use energy pricing", "tons of carbon", "tons of coal equivalent", "total electricity consumption", "total electricity demand", "total electricity generation", "total electricity production", "total end-use energy consumption", "total energy consumption", "Total energy demand", "total energy demand relationship", "total energy demands", "total final domestic energy consumption", "total final energy consumption", "total final energy consumption per unit", "total final energy demand", "total global oil demand", "total global primary energy demand", "total light-duty vehicle fuel consumption", "total light-duty vehicle sale", "total national energy use", "total natural gas consumption", "total natural gas use", "total oil production capacity", "total primary energy consumption", "total primary energy demand", "total transportation distillate demand", "total transportation distillate sale", "total world oil demand", "town gas sale", "town gas sales growth", "Toxic cargoes", "toxic cargo", "toxic emission", "Toxic emissions", "toxic gas", "toxic gasses", "toxicity of chemical", "Toxicity of chemicals", "toxic pollutant", "Toxic pollutants", "tradable carbon emission entitlement", "Tradable Carbon Emission Entitlements", "tradable emission permit system", "Tradable Emission Permit Systems", "Tradable Permit System", "Tradable permit systems", "traditional energy sectors", "traffic congestion", "transformation efficiency", "transportation energy demand", "transportation energy use", "transport cost", "Transport culture", "transport cultures", "transport & energy", "Transport expansion", "transport expansions", "transport industry", "transport machinery", "transport researches", "transport sector", "travel demand", "tropical cyclone", "tropospheres", "turnpike growth path", "Turnpike growth paths", "Turnpike phase", "turnpike phases", "types of cogeneration plant", "types of energy", "types of energy source", "types of fuel", "U curve for pollution", "u curve for pollutions", "u curve hypotheses", "u curve hypothesis for pollution postulate", "U curve hypothesis for pollution postulates", "U curve hypothesis", "U hypothesis for pollution", "u hypothesis for pollutions", "U hypothesis of pollution", "u hypothesis of pollutions", "ultrafine particle emission", "underground storage reservoir", "Underground storage reservoirs", "urban center", "urban centre", "Urban centres", "urban mass transit system", "Urban mass transit systems", "urban smog", "urban transportation emission", "urban transportation energy uses", "urban transportation finances", "urban transportation policy", "utility financing program", "utility investment", "Utility pricing", "utility role", "utility sponsored program", "Utility sponsored programs", "vehicle efficiency", "vehicle emission", "vehicle-miles traveled", "ventilation", "Vessel categories", "vessel category", "vessel", "vessel owner", "Vessel owners", "Vessel reporting system", "vessel reporting systems", "vessel traffic system", "Village generator", "village generators", "volatile energy market", "volatile energy price", "volatile hazardous waste", "Volatile hazardous wastes", "volatile metal", "Volatile metals", "voluntary agreement", "Voluntary agreements", "voluntary conservations", "waste burning", "waste discharge fee", "waste disposal option", "waste disposals", "wasteful energy", "Waste Generation", "waste generations", "waste generator", "waste hydrogen", "Waste incineration", "waste incinerations", "waste lubrication oil", "waste management", "waste minimization decision", "waste minimization effort", "waste minimization subsidy", "waste per unit of output", "waste product", "waste recovery solution", "waste Recovery solutions", "waste reduction", "waste reduction technique", "waste site", "Waste sites", "waste stream", "waste type", "Waste types", "wastewater emission", "water efficient measure", "water heating", "water rate structure", "Water rate structures", "water table height", "weather change", "weatherization measure", "weather pattern", "welfare components", "welfare conditional", "welfare consequence", "welfare function diagram", "welfare function", "welfare loss by consumer", "welfare losses", "welfare loss", "welfare loss under contest", "wellhead", "wellhead prices", "Wild flora", "wild floras", "wildlife service", "wind capacity", "wind energy application", "wind energy technology researches", "wind energy technology research", "wind engine", "wind farm", "Wind farms", "wind powered electricity generations", "wind power generation", "wind power measurement", "wind powers", "wind power system", "wind resource", "wind stresses", "wind turbine data", "wind turbine datum", "winter heating fuel requirements", "wood burning", "wood collection", "woodfuels burning", "wood preparation", "wood supply", "world climate", "world crude", "world crude oil price", "world demand for oil", "world demand", "world electricity demand", "world electricity supply", "world emission", "world energy conferences", "world energy congress", "world energy consumption", "world energy council", "world energy crises", "world energy crisis", "world energy demand", "world energy financing centre", "world energy flow", "world energy", "world energy market", "world energy model", "World Energy Outlook", "world energy outlooks", "world energy production capacity", "world energy projection", "world energy requirement", "world energy situation", "world energy system", "world energy use", "world oil", "world oil market", "world oil market projection", "world oil price", "world oil refining", "world oil refining logistic", "world tanker demand", "world tanker industry", "worldwide tanker movement", "worst effects of energy consumption", "worst environmental pollutants", "yearly permit", "Yearly permits", "zero emission", "Zero emissions", "Zero energy use", "zero energy uses", "Zero equilibrium level", "zero equilibrium levels", "Zero fossil fuel use", "zero fossil fuel uses"]
  }, {
    "name": "Rural Energy",
    "words": ["absolute terms", "acceptable transaction value", "accession procedures", "access to electricity for land reclamation", "Access to energy", "access to energy services", "access to energy source", "access to grid electricity", "access to modern energy service", "acculturation hub", "acid battery", "acid oils", "acid washing", "actionable subsidies", "actual duty rate", "actual labor costs", "actual trade liberalization", "added ingredients", "adequate documentation", "adjustment burden", "administrative action", "administrative agreement", "administrative assessment", "administrative assistance", "administrative burden", "administrative cooperation agreements", "administrative determinations", "administrative infrastructure", "administrative practice", "Administrative requirements", "administrative rulings", "administrative salaries", "ad valorem criterion", "ad valorem duty", "ad valorem method", "ad valorem percentages", "ad valorem subsidization", "advanced energy technology", "advance rulings", "advancing food quality", "Advisory opinions", "affordability of energy service", "affordable access to energy", "affordable clean fuel", "affordable electricity", "affordable modern energy", "affordable modern energy technology", "affordable rural energy supply", "afforestation effort", "afforestation method", "afforestation rate", "agricultural base", "agricultural machine", "agricultural marketing restrictions", "agricultural negotiation", "agricultural package", "agri-food products", "air-service agreements", "air- transport services", "alleviating wood problem", "alleviating wood shortage", "alternative clean fuel", "alternative crop residue feedstock", "alternative energy cation", "alternative sources of energies", "alternative to biogases", "alternative to biogas", "ambitious rural electrification", "ample oil", "animal stock", "annual average capacity factor", "annual average growth", "annual average growth rate", "annual cooking needs of villager", "annual global growth rate of forest", "anti- circumvention provisions", "anti-dumping actions", "anti-dumping case", "anti-dumping duty", "anti-dumping investigation", "anti- dumping investigations", "anti-dumping laws", "apparel article", "apparel good", "apparel product descriptions", "apparel product", "appeals court", "appellate proceedings", "appellate review", "applicable agreements", "applicable costs", "applicable country", "applicable origin", "applicable origin regulations", "applicable origin rule", "applicable provision", "applicable rate", "applicable regulation", "applicable rule", "applicable tariff classification", "applicable tariff", "applicable tariff shifts", "applicant country", "application provisions", "appraised value", "appropriate risk assessment", "appropriate solutions", "approval procedure", "arbitrage opportunity", "arbitral tribunal", "arbitrary determinations", "arbitrary results", "area- specific trade preferences", "arm's-length transaction", "asian dependence", "assembled goods", "assembled textile articles", "Assembly facilities", "assembly location", "assembly operation", "assembly plant", "assessment request", "asymmetric agreement", "asymmetrical phase downs", "asymmetric equilibrium", "asymmetric tariff equilibria", "attractive trade preferences", "authorized signature", "authorizing entity", "automatic licensing", "automatic licensing procedures", "automatic schedule", "autonomous trade", "autonomous trade regimes", "availability of biomasses", "availability of biomass", "availability of electricity", "availability of energy carrier", "availability of excrement resource", "availability of kerosene", "availability of straw", "back loading", "balance-of-payments difficulties", "balance-of-payments provisions", "balance-of-payments purposes", "bargaining leverage", "base textile country", "basic energy requirement", "basic most-favoured-nation", "battery charge regulator", "battery disposal system", "battery service", "battery voltage", "beneficial trade arrangements", "beneficial treatment", "beneficiary country", "beneficiary developing countries", "bilateral accords", "bilateral cumulation", "bilateral processes", "bilateral quotas", "binding assessment", "binding commitment", "binding dispute resolution", "binding rule", "binding ruling", "biogas development", "biogas electric", "biogas experience", "Biogas fermentation", "biogas fermentations", "biogas market", "Biogas production", "biogas service station", "biogas support", "biogas systems offer multiple", "biogas technology", "biogas unit", "biological diversities", "biomass accounting", "biomass as fuel", "biomass conversions", "biomass cooking stove", "biomass digestions", "biomass downdraft", "biomass energy conversion technology", "biomass energy industries", "biomass energy resource", "biomass energy supply", "biomass energy systems", "biomass equation", "biomass feedstock", "biomass for fuel", "biomass gasification conversion technology", "biomass gasification system", "biomass management", "biomass potential", "biomass resource availability", "biomass smokes", "biomass supply", "biomass waste", "blanket certificates", "border-line cases", "borderline cases", "bound tariff concessions", "bound tariff", "bright line test", "bulk commodity", "burning biomass stove", "burning crop residue", "burning methane-rich fuel gases", "burning methane-rich fuel gas", "burning methane-rich fuel gasses", "burning stove", "burning unprocessed biomasses", "burning unprocessed biomass", "calculation methods", "candle-power", "candles for energy", "candles per month", "candle waxes", "candle wax", "cane bagasse", "capacity constraints", "capital- intensive facilities", "capital limitations", "carbon biomass", "case-by-case basis", "case-by- case determination", "certification procedure", "certification requirement", "charcoal efficiency", "charcoal from wood", "charcoal fuel cycle", "charcoal production", "cheap labor costs", "cheap labor", "cheap materials", "cheap resource costs", "chemical entity", "chemical imports", "chemical sector", "citrus industry", "civil aircraft products", "civil aircraft sector", "classification change", "classification determination", "classification issue", "classification processes", "classification subdivision", "cleaner energies", "Cleaner energy", "cleaner energy system", "cleaner environment", "cleaner water supply", "clean gases", "clean gas", "clean gasses", "clean household energy solution", "clearing agency", "clearing system", "clinic electrification", "coal briquette", "coal consumption rate", "coal deposit", "coal energy use", "coal stoves with chimney", "coal stove technology", "coal use", "combustion stove system", "commercial damage", "commercial energy system", "commercial exploitation", "commercial food imports", "commercial fraud", "commercial importation", "commercial invoice", "commercial policy", "commercial policy instruments", "commercial policy purposes", "commercial practice", "commercial records", "commercial regulations", "commercial use", "commodity classification", "common declaration", "common definition", "common tariff", "common working texts", "community biogas digester", "community biogas system", "community forest project", "community forest resources management", "community forestry", "comparable market conditions", "comparable situations", "comparative matrix", "compensatory adjustment", "competition issue", "competitive basis", "competitive condition", "competitive market conditions", "competitive pressure", "complementary criteria", "component materials", "compostable waste", "computer-reservation services", "conferring originality", "conferring origin", "confidential business information", "Confidential information", "conformity assessment procedure", "consignment standards", "constituent fibers", "constituent materials", "constituent territories", "constitutional authority", "constitutional groundwork", "constitutional structure", "consultation mechanism", "consultation process", "consultative mechanism", "consumer arbitrage", "consumer arbitrage opportunities", "consumer electronics sector", "consumer price differences", "consumer price", "consumer surplus gain", "Consumer surplus", "consumption of dung cake", "consumption of fuel wood", "content provision", "content regulations", "content requirement", "content restriction", "content rule", "contingent protection", "contracting party", "contractual licenses", "contrary indications", "convenient fossil fuel", "conventional diesel engine generator", "conventional diesel engine", "conventional diesel system", "conventional diesel technology", "conventional electricity production", "conventional electrification", "conventional energy research institute", "conventional fossil fuel", "conventional low-pressure gas burner", "conventional rural electrification", "converting biomass energy", "cooking efficiency", "cooking energy requirement", "cooking fuel application", "cooking fuel technology", "cooking gas application", "cooperation agreement", "core policy-level", "corn belt", "corn crop", "corn crop residue", "correct classification", "corresponding certificate", "corresponding nomenclature", "corresponding season", "corresponding treatment", "corresponding uncertainty", "cost of biogas plant", "cost of diesel fuel", "cost of electricity from grid", "cost of electricity", "cost of energy procurement", "cost of power generation", "cost of stove", "costs of wind power", "cotton processing", "cotton stalk", "counterfeit good", "countervailing cases", "countervailing investigations", "country-specific origin", "country-specific rules", "country-specific trade", "court oversight", "criminal penalty", "crop harvesting", "crop processing", "crop residue energy", "crop residues for producer gases", "crop residues for producer gas", "crop residues for producer gasses", "Cross-border trade", "cross-border trading", "crude oil equivalent", "crude oil production", "cumulation procedure", "cumulative application principle", "custom authorities", "customs airports", "Customs authorities", "customs check", "customs classification", "customs code", "customs cooperation conference", "customs cooperation", "customs crimes", "customs documentation", "customs drawback laws", "customs duty evasion", "customs employees", "customs form", "customs issues", "customs law", "customs officer", "customs official", "customs operation", "customs presents problems", "customs preshipment inspection", "customs proceedings", "customs purpose", "customs regime", "customs regulation", "customs service", "customs stations", "customs terminals", "customs territory", "customs union agreement", "customs union issue", "customs valuation code", "customs value", "custom union", "decision", "declared value", "deep integration", "deficit-surplus case", "deficit-surplus situation", "deposit holder", "desired origin determination", "destination market", "determinant factor", "determination criteria", "determination process", "determining country", "determining origin", "determining quotas", "determining value", "diesel electricities", "diesel electricity", "diesel engine capital cost", "diesel-engine generator", "diesel fuel cost", "diesel fuel subsidies", "diesel fuel subsidy", "diesel power", "diesel replacement", "diesel unit", "diesel-units", "digit classification level", "direct combustion of biomasses", "direct combustion of biomass fuel", "Direct combustion of biomass", "direct solar intensities", "direct solar intensity", "disassembled form", "discrimination risks", "discriminatory policy device", "discriminatory trade policies", "discriminatory trade regimes", "disfavored country", "dispersion of house", "dispute mediation", "dispute settlement", "dispute-settlement procedures", "dispute settlement proceeding", "dispute settlement rules", "dispute settlement system", "disputes", "distant grid", "distortive formulations", "Distribution channels", "Distribution networks", "documentary standards", "document code", "document date", "document symbol", "domestic appliance", "Domestic appliances", "domestic content", "domestic cost", "domestic demand curve", "domestic demand shifts", "domestic end products", "domestic firm", "domestic industry", "domestic input", "domestic intermediate", "domestic laws", "domestic photovoltaic system", "domestic prices", "domestic producer", "domestic production", "domestic service providers", "domestic service suppliers", "domestic solar power system", "domestic supply curve", "Domestic supply", "domestic support policies", "domestic unit cost", "domestic value", "domestic water heating", "double-surplus case", "double surplus", "dual-fuel mode", "dual-use stove", "Due consideration", "due restraint", "dumped imports", "dumped price", "dung cake", "dung for biogases", "dung for biogas", "dung fuel", "dung supplies", "dung supply", "dutiable value", "duty assessment", "duty-free entry", "dutyfree entry", "duty preference", "duty rebates", "duty reduction", "early solar project", "economic environment", "economic nationality", "economic policy-making", "economic relation", "economic term", "economic zone", "economy origin", "efficiency of biogas plant", "efficiency of stove", "efficient biomass stove", "efficient end-use device", "efficient energy system", "efficient fluorescent bulb", "efficient stove", "efficient use of biomasses", "efficient use of biomass", "effluent from biogas plant", "electrical energy-production", "electrical energy service technologies", "electrical energy service technology", "electrical energy storage", "electrical fluorescence", "electrical output capacities", "electrical output capacity", "electrical transmission", "electric biomasses", "electric biomass", "electric bulb", "electric efficiencies", "electric efficiency", "electric freezer on hire-purchase", "electric grid", "electric hot plate", "electricity billing", "electricity from crop residue", "electricity from fossil fuel feedstock", "electricity generation capacity", "electricity generation from biogases", "electricity generation from biogas", "electricity generation sector", "Electricity industry", "electricity installation", "electricity institute", "electricity markets", "electricity need", "electricity network", "electricity regulations", "electricity shortfall", "electricity sub-sector", "electricity subsidies", "electricity subsidy", "Electricity supplies", "Electricity supply", "electric light", "electric motors electric furnace", "electric plant", "Electric Plants", "electric power generation system", "electric power network", "electric power research institute", "electric power system", "electric power to village", "electric restriction", "electrification committee", "electrification for farmer", "electrification growth rate by region", "electrification of area", "electrification processes", "electrification process", "electrification program", "electrification project", "electrification researches", "electrification research", "electrification scheme", "Electrification schemes", "electrification source", "electrification studies", "electrification study", "electronic charge controller", "electronic filing", "eligible articles", "eliminated tariffs", "end-use application", "end-use efficiency improvement", "End-use", "end-use of energies", "end-use of energy", "end-use profile", "end-user", "energy carrier", "Energy carriers", "energy consumption structure", "energy content of crop residue", "energy content of dung", "energy conversion technologies", "energy conversion technology", "energy-development link", "energy efficiency", "energy equivalent", "energy expenditure", "Energy expenditures", "energy_info_centre", "energy links clean energy initiative", "energy-producing state", "energys role", "energy utilities", "energy utility", "energy-voice", "energy world", "enforcement of energy efficiencies", "enforcement of energy efficiency", "engine case", "engine efficiencies", "engine efficiency", "engine gas intake valve", "engine-generator set", "engine operation on producer gases", "engine operation on producer gas", "engine operation on producer gasses", "engine system", "equal quality", "equal rate reductions", "equilibrium outcome", "equilibrium price", "equilibrium tariff", "equitable resolution", "equitable trading conditions", "equivalent concessions", "erosion processes", "erosion process", "exchange rate stability", "excise treatment", "exclusive manner", "exclusive marketing", "exclusive right", "exclusive rules", "exclusive service providers", "Exclusive use", "executive bodies", "ex-factory cost", "exhaustive discussion", "export competition", "exported inputs", "exported products", "exporting countries", "exporting country", "exporting members", "exporting member state", "exporting process", "export interest", "export opportunities", "export platform", "export-platform operations", "export price", "export shipments", "export subsidy commitments", "export subsidy prohibition", "export subsidy reduction", "extending electric grid", "extending energy infrastructure", "external tariff", "external trade policy choices", "fact- intensive inquiries", "false certificate", "false declaration", "family-size biogas unit", "farmyard waste", "fictitious customs values", "field import specialists", "final agreement", "final anti- dumping rules", "final assembly", "final assembly process", "final classification", "final goods imports", "final goods producers", "final market country", "final markets", "final producer", "final product", "final value", "financing for electrification", "finished article", "finished good", "finished merchandise", "finished product", "firewood source", "fixed flat-rate monthly fee", "fixed maximum consumption per month", "fixed solar unit", "flat-rate tariff", "fluorescent light bulbs", "food aid donations", "food companies", "food ingredient", "food safety issue", "food security", "foreign competition", "foreign component", "foreign content", "foreign countries", "foreign exporter", "foreign fabric", "foreign input", "foreign manufacturer", "foreign material", "foreign participation", "foreign processing", "foreign producer", "foreign product", "foreign service suppliers", "foreign value limitation", "forest biomasses", "forest conservation", "forest degradation", "forest growth", "forest land", "forest management", "forest regulation", "forest reservation act", "forest resources management", "forestry degradation", "framework agreement", "framework cooperation agreement", "Free access", "free circulation", "free lead-acid batteries", "free lead-acid battery", "free market", "free movement", "free riders", "free-trade area", "free trade area implementation", "fuel application", "fuel consumption account", "fuel consumption pattern", "fuel costs", "fuel for electric power station", "fuel from biomasses", "fuel from biomass", "fuel ladder from wood to kerosene", "fuel mixes", "fuel per household", "fuel price subsidies", "fuel price subsidy", "fuel requirement", "fuels from biomasses", "fuels from biomass", "fuel wood", "fungible goods", "fungible nature", "gas burning", "gas emissions", "gas energies", "gas energy", "gas lamp", "gas lantern", "gas pipeline projects", "gas power generation", "gas selling price", "gas substitution policies", "gas substitution policy", "gas suppl", "gas supply system technologies", "gas supply system technology", "gas uses", "generic regimes", "generic requirement", "generic terms", "geographical indications", "global harmonization", "globally- harmonized rules", "global regulation", "grain crop residue", "gray measures", "green box policies", "grid application", "grid capacities", "grid capacity", "grid connected supplies", "grid connected supply", "grid connection", "grid electricity service", "grid extension measure", "grid management", "grid power from diesel unit", "grid rural energy concession", "group- specific trade preferences", "harmonisation countries", "harmonisation procedures", "harmonisation programme", "harmonisation provisions", "harmonisation work programme", "harmonised definitions", "harmonised rules", "harmonization attempts", "harmonization period", "harmonization program", "harmonization programme", "harmonization project", "harmonization provisions", "harmonization work", "harmonization work programme", "harmonized definitions", "harmonized determinations", "harmonized list", "harmonized origin determinations", "harmonized proceeding", "harmonized rule", "harmonizing rules", "health of utilities", "health of utility", "hearth to kerosene", "heat energies", "heat energy", "heating fuel shortage", "heating value bases", "heating value basis", "heat output", "heat transfer efficiencies", "heat transfer efficiency", "heavier electricities", "heavier electricity", "hemisphere-wide free trade", "hemispheric trade", "hierarchical nomenclature", "high sourcing requirements", "holistic development of rural energy system", "holistic rural energy sector policies", "holistic rural energy sector policy", "holistic rural energy system", "hot water for space heating", "hot water system", "household application", "household biogases", "household biogas", "household cooking environment", "household demand for electricities", "household demand for electricity", "household electrification", "household energy requirement", "household energy use", "household fossil fuel", "household fuel demand", "household fuel picture", "household fuels", "household fuel use", "household lighting", "household photovoltaic system", "household scale wind power", "household scale wind turbine", "household scale wind turbines being", "household smoke", "household stove", "household thermal energies", "household thermal energy", "household use", "household village", "household wind system", "hurricane lantern", "hybrid mini-grids", "hybrid solar wind power technologies", "hybrid solar wind power technology", "hydroelectric complexes", "hydroelectric complex", "hydroelectricity system", "hydroelectric power generation", "hydroelectric system", "hydrogen energy", "hydrological condition", "Hydrological regime", "hydro potential", "hydro-power scheme", "hydro-power station", "hydropower station", "hydro-power waterway", "hydro village scale mini grid", "hypothetical village", "implementation period", "import brokers", "import-competing sector", "import duty rate", "imported good", "imported inputs costs", "imported inputs", "imported intermediate", "imported materials", "imported merchandise", "imported parts", "imported product", "import good", "importing country", "importing process", "importing signatory", "import licensing procedures", "import licensing systems", "import limit", "import penetration", "import relief action", "import side", "import surge", "import value", "inadequate energies", "inadequate energy", "inadvertent non-compliance", "inanimate energy consumption", "incandescent principle", "inconsistent applications", "inconsistent determinations", "inconsistent origin determinations", "independent review procedure", "industrial lobbies", "industrial wood harvesting", "industrial wood use", "inefficient trade diversion", "inefficient use of biomasses", "inefficient use of biomass", "innovative rural energies", "innovative rural energy deliveries", "innovative rural energy delivery", "innovative rural energy", "innovative rural energy plan", "input cost advantage", "input cost", "input ingredients", "input mix", "input use", "inspection agencies", "inspection agency", "insubstantial transformation", "insular possession exceptions", "insular possession", "integrated strategy", "integrated system", "integration measures", "integration process", "integration scheme", "intellectual property agreement", "intermediate goods producers", "intermediate input", "intermediate materials", "intermediate part", "intermediate prices", "intermediate producers", "intermediate producers results", "intermediate production facilities", "internal customs controls", "internal law", "internal movement", "internal parts", "internal procedure", "internal tariffs", "internal transport", "international guidelines", "international price", "international price trends", "international rule", "international trade arrangements", "international trade obligations", "international transfer", "intra-block arbitrage", "intra- regional commerce", "intra-regional trade", "intrazonal circulation", "introducing modifications", "investment diversion", "investment measure", "investment relationship", "investment strategies", "investment wars", "issuing certificates", "issuing entity", "judicial authorities", "Judicial procedures", "justifiable cause", "kerosene consumption", "kerosene for use in vehicle", "kerosene lamp", "kerosene pressure stove", "kerosene subsidy", "kilowatt hour liquid petroleum gases", "kilowatt hour liquid petroleum gas", "kilowatt hour liquid petroleum gasses", "kilowatt-hours", "kilowatt hours of energy production", "kilowatt model", "kilowatts of electricities", "last country", "last elaboration", "last process", "last production process", "last transformation", "layered dispute settlement mechanism", "legal advice", "legal challenge", "legal commitment", "legal consequence", "Legal entity", "legal infrastructure", "Legal interpretations", "legal issue", "legal obstacles", "legal point of view", "Legal requirement", "legal significance", "legal standing", "legal successor", "legal text", "liberalization of energy market", "light generator", "lighting fixture", "light source", "lignocellosic material", "litre tin of dung", "load management of batteries", "load management of battery", "load shedding", "lobbying groups", "lobbying pressure", "local biomasses", "local biomass", "local biomass resource", "local content", "local electricity agencies", "local electricity agency", "local electricity biomasses", "local electricity biomass", "local electricity demand", "local energy resource", "local energy supplier", "local grid", "local marks", "local origin", "local parts", "local rural energy office", "local rural industrial capacities", "local rural industrial capacity", "local rural institution", "local value", "long-term harmonization", "low duty entry", "low-protection country", "low-tariff products categories", "low transportation costs", "made-up articles", "made-up textile products", "made- up textiles items", "mandatory notification", "man-made fibers", "manufactured goods", "manufacturing facilities", "manufacturing operation", "Manufacturing Process", "manufacturing process requirement", "marginal welfare cost", "maritime port", "market access", "market access negotiation", "market-access provision", "market entry", "marketing exports", "marketing restrictions", "market penetration", "market power", "marking purposes", "marking requirments", "marking rules", "methanol as fuels", "micro-grids", "micro hydroelectricity project", "micro hydroelectric power", "micro hydroelectric scheme", "micro hydroelectric system", "micro-hydro", "Micro Hydro", "micro hydro", "micro-hydropower", "micro hydropower", "micro-turbines", "mini hydro", "Minimal impact", "minimal operations", "minimal processing", "minimis allowance", "minimis level", "minimis modifications", "minimis provision", "minimis rule", "minimum access tariff quotas", "minor processing", "minor subassemblies", "model certificate", "modern energy carrier", "Modern energy carriers", "modern energy sector", "modern energy services", "modern energy system", "modern energy technologies", "modern energy technology", "modern sources of energies", "modern sources of energy", "modern sources of power", "modern technologies", "modern technology", "monopoly right", "most-favored nation", "most-favored-nation tariff", "most- favoured-nation clause", "most-favoured-nation treatment", "multi- country assembly operation", "multilateral agreement", "multilateral dispute settlement", "multilateral framework agreement", "multilateral framework", "multilateral harmonization", "multilateral negotiation", "multilateral rules", "multilateral system", "multilateral trade agreement", "multilateral trade order", "multiple country scenario", "nafta-designated change", "nafta-originating good", "national authorities", "national commitment", "national court", "national customs directors", "national customs", "national customs levels", "national flag", "national nomenclatures", "national origin", "national regulation", "national rules", "national rural electrification", "national rural energies", "national rural energy", "national schedules", "national trade policy- making", "national- treatment commitment", "national treatment", "natural gas fuel", "natural gas in electricity generation", "natural gas representing", "natural gas totalling", "Negative effect", "negative provisions", "negative rules", "negative standard", "negative standards", "negligent violations", "negotiated commitments", "negotiated industry", "negotiating areas", "negotiating rules", "negotiating texts", "net-cost approach", "net cost calculations", "net cost", "net cost method", "net cost value", "net effect", "net food-importing ]developing countries", "net profits", "net trade creation", "non-actionable subsidies", "non-actionable subsidy", "nonadhesive wadding", "non-agricultural products", "non- applicable costs", "non-application period", "non-application provisions", "non-automatic licensing procedures", "non-commercial distribution", "non-commercial importation", "nonconventional energies", "nonconventional energy resource", "nonconventional energy source", "non-discriminatory terms", "non-member countries", "non member countries", "non-member resentment", "non-mfa restrictions", "non monotonicity", "non-originating component", "non-originating ingredient", "non-originating inputs", "non-originating material", "non originating materials", "non-originating mixes", "non-preferential basis", "non-preferential goals", "non- preferential origin", "non- preferential origin rules", "non-preferential origin system", "non-preferential purposes", "non- preferential rules", "non-preferential rules", "non-preferential trade", "non-preferential trade law", "non-preferential trading", "non-product-specific basis", "non-product-specific support", "non-reciprocal basis", "non-reciprocal preferences", "non-reciprocal trade arrangements", "non-revenue loss violations", "non-specific subsidies", "non-tariff barrier", "non- tariff barriers", "non-tariff border measures", "non-tariff measures", "non-trade concerns", "non-trade factors", "non- transparent manner", "normal customs purposes", "normal limitation", "normal value", "notification provisions", "notification requirement", "objective determinations", "objective process", "objective processing operations", "objective tariff classification shifts", "objective tariff shifts", "official departments", "official funding", "official initiation", "official institutions", "official rules", "official wording", "oil need", "oil output", "oil plant", "oil presses", "oil press", "oil price", "oil producers", "oil seed plant", "Oil use", "oil uses", "open market", "operative regulations", "optimal tariff", "orderly marketing arrangements", "origin activities", "origin agreements", "original ingredients", "original merchandise", "original states", "origin area", "originating components", "originating content", "originating costs", "originating country", "originating good", "originating inputs", "originating materials", "originating parts", "originating products", "originating requirements", "originating wine press", "origin certification purposes", "origin component", "origin criteria", "origin declaration", "origin determination criteria", "origin determination", "origin disputes", "origin documentation", "origin form", "origin goods", "origin groundwork", "origin impact purchasing", "origin information", "origin marking", "origin marking purposes", "origin marking requirements", "origin materials", "origin objective", "origin proposal", "origin questions", "origin regimes", "origin requirement", "origin responsibilities", "origin rule", "origin scheme", "origin-specific import boycotts", "origin-specific product quotas", "origin-specific purchase requirements", "origin verification", "oval briquette", "overall coherence", "overall consistency", "packaging operations", "pan-union agency", "pan-union lobbies", "partial equilibrium model", "partial equilibrium setting", "party-specific tariff items", "patented process", "patent owner", "patent protection", "peat as fuel", "penalty tariff", "people without electricities", "people without electricity", "perfect substitute", "permanent embossing", "permitted exclusions", "petroleum gas lighting", "phase- in process", "phase-out date", "phitosanitary issues", "photovoltaic battery system", "photovoltaic cell", "Photovoltaic cells", "photovoltaic cell system", "photovoltaic kit", "photovoltaic lighting for school", "photovoltaic power", "photovoltaic power system", "photovoltaic sale", "photovoltaic solar cell", "photovoltaic system", "photovoltaic technologies", "photovoltaic technology", "phytosanitary measures", "pirated goods", "plant health regulations", "Plant life", "policy holder", "policy- influenced decisions", "policy instruments", "policy maker", "positive adjustment", "positive determination", "positive standard", "post-electrification interview", "post-electrification researches", "post-electrification research", "post-electrification studies", "post-electrification study", "post harmonisation requirements", "potential recoverable reserve", "pre-competitive development activity", "predictable rules", "preference criterion", "preference-receiving country", "preference rule", "preference system", "preferential access", "preferential agreement", "preferential area", "preferential arrangement", "preferential importation", "preferential markets", "preferential origin", "preferential origin rules", "preferential program", "preferential rule", "preferential tariff arrangements", "preferential tariff context", "preferential tariff", "preferential tariff measures", "preferential tariff regime", "Preferential tariffs", "preferential tariff treatment", "preferential terms", "preferential trade agreement", "preferential trade arrangement", "preferential trade", "preferential trading agreements", "preferential trading arrangements", "preferred valuation basis", "preshipment inspection agencies", "preshipment inspection", "prevailing criterion", "price change", "price differential", "price information", "price verification", "prima facie impairment", "primary cooking fuel", "primary energies", "primary energy supplies", "primary energy supply grid", "primary energy supply", "primary forest harvesting", "primary fuel", "private cargo terminal", "private sector bodies", "procedural arrangements", "procedural safeguard", "processing country", "processing operation", "process system", "process test", "producer arbitrage", "producer gas application", "producer gas cooking option", "producer gas cooking system", "producer gas from biomasses", "producer gas from biomass", "producer gas from crop residue", "producer gas generation", "producer gas manufacture", "producer gas option", "producer gas stove", "producer gas system", "producer surplus", "product basis", "product duty", "production capabilities", "production chain", "production facilities", "production-limiting programmes", "production processes", "production process", "production steps", "production technology", "productivity environment", "product origin determination", "product origin", "product patent", "product price", "product price increases", "product sector basis", "product sector", "product- specific basis", "product-specific origin", "product-specific origin regulations", "product-specific origin rules", "product-specific rule", "product-specific tariff-shift rule", "products rules", "profit-maximizing firm", "profit-maximizing strategies", "protected area", "protected design", "protectionist device", "protectionist instrument", "protectionist objectives", "protectionist purposes", "protective device", "protective effect", "protective nets", "proving origin", "provisional measure", "provisional relief", "provisional safeguard measure", "prudential measures", "purchase price", "qualifying criteria", "qualifying goods", "quantitative import restriction", "quasi rents", "quota charge statement", "quota sweetener", "reasonable doubt", "reasonable manner", "reciprocal basis", "reciprocal free trade agreement", "reciprocal trade agreement", "reciprocal trade arrangements", "reciprocal use", "recognition requirements", "record-keeping requirements", "reduced-tariff rates", "reducing trade distortions", "reduction commitments", "re- established customs checks", "refined tariff classification system", "refuse as fuels", "refuse derived fuel", "regional agreement", "Regional agreements", "regional arrangement", "regional content", "regional free trade areas", "regional industry", "regional integration agreement", "regional origin", "regional producers", "regional production", "regional sources", "regional trade agreement", "regional trade arrangement", "regional trade barriers", "regional trade organizations", "regional trade regimes", "regional trading areas", "regional trading partners", "regional value- content", "regional value content", "regional value content provisions", "regional value content requirements", "regional value content rules", "regional value", "regional xenophobia", "region-specific origin", "region- specific rules", "reinsurance policy writing", "remote area renewable energy system", "remote electricity provision", "remote power supplies", "remote power supply", "Remote rural areas", "remote rural communities", "remote rural community", "remote villages", "renewable electricities", "renewable energy authorities", "renewable energy authority", "renewable energy demonstration", "renewable energy development agencies", "renewable energy development agency", "Renewable energy development", "renewable energy developments", "Renewable Energy & Efficiency Fund", "renewable energy efficiency fund", "renewable energy & efficiency funds", "renewable energy industries", "Renewable energy industry", "Renewable energy investment", "renewable energy investments", "renewable energy market development", "Renewable energy policies", "renewable energy policy", "Renewable energy power generation", "renewable energy power generations", "renewable energy price", "Renewable energy prices", "renewable energy producer", "renewable energy project", "Renewable energy projects", "renewable energy source", "renewable energy system", "Renewable energy systems", "Renewable energy technologies", "renewable energy technology", "renewable energy to consumer", "renewable energy use", "renewable grid", "renewable natural resource", "renewable nature", "renewable portfolio standard", "renewable source", "renewable source of energies", "renewable source of energy", "renewable sources of energy for electrification", "renewable sources of energy in august", "Renewable technologies", "renewable technology", "rental rights", "residual rule", "restricted list", "restricted unit", "restrictive applications", "restrictive definitions", "restrictive effects", "restrictive measures", "restrictive notion", "restrictive option", "restrictive purposes", "restrictive quotas", "restrictive rule", "result-oriented rule", "results-oriented manner", "results- oriented policy-making", "rich biogases", "rich biogas", "rival trade blocs", "rural access to electricities", "rural access to electricity by region", "rural access to electricity", "rural areas biomasses", "rural areas biomass", "rural areas with energies", "rural areas with energy", "rural companies", "rural company", "rural cooperative", "rural customer", "rural demand for electricities", "rural demand for electricity", "rural distribution network", "rural electrical load", "rural electricities", "rural electricity consumption", "rural electricity supplies", "rural electricity supply", "rural electrification authorities", "rural electrification authority", "rural electrification cooperative", "rural electrification corporation", "rural electrification experience", "rural electrification from grid", "rural electrification fund", "rural electrification pilot project", "rural electrification priorities committee", "rural electrification processes", "rural electrification process", "rural electrification program", "rural electrification through grid extension", "rural electrification to woman", "rural electrification to women", "rural electronic workshop", "rural energy access", "rural energy agencies", "rural energy agency", "rural energy availabilities", "rural energy availability", "rural energy comprising", "rural energy concession", "Rural Energy Concessions", "rural energy consumption", "rural energy deliveries", "Rural energy delivery", "rural energy demand", "rural energy development", "rural energy development package", "rural energy electrifications", "rural energy enterprise", "rural energy fund", "rural energy industries", "rural energy industry", "rural energy investment", "rural energy market", "rural energy need", "Rural energy needs", "rural energy operation", "rural energy per year", "rural energy picture", "rural energy planner", "rural energy planning", "Rural energy policy", "rural energy potential of fire", "rural energy poverties", "rural energy poverty", "rural energy poverty-poverty cycle", "rural energy price", "rural energy price subsidies", "rural energy price subsidy", "rural energy pricing", "rural energy problem", "rural energy procurement", "rural energy product", "rural energy production", "rural energy program link", "rural energy project", "rural energy projects in support of education", "rural energy provision", "rural energy purpose", "rural energy puzzle", "rural energy requirement", "rural energy requirements in agriculture", "rural energy research institute", "rural energy resource", "rural energy right", "rural energy saving", "rural energy section", "rural energy section staff", "rural energy sector governance", "rural energy sector", "rural energy sector management assistance", "rural energy sector management assistance program", "rural energy sector reform", "rural energy sector regulatory reform", "rural energy securities", "rural energy security", "rural energy service", "rural energy service mixes", "rural energy service mix", "rural energy situation", "rural energy solution", "rural energy source", "rural energy storage technologies", "rural energy storage technology", "rural energy strategies", "rural energy strategy", "rural energy subsidies", "rural energy subsidy", "rural energy supplies", "rural energy supply", "rural energy system development", "rural energy system", "rural energy systems development", "Rural energy systems", "rural energy team", "rural energy technologies", "rural energy technology", "rural energy technology leap", "rural energy usage profile", "Rural energy use", "rural energy uses", "rural engineerings", "rural environment management", "rural grid electrification", "rural grid electrification system", "rural grid", "rural household access to electricities", "rural household access to electricity", "rural household energy consumption", "rural householder", "rural households with access to electricities", "rural households with access to electricity", "rural kerosene", "rural life", "rural lighting", "rural lives", "rural market", "rural micro-credit scheme", "rural policies", "rural populace", "rural power companies", "rural power company", "rural power consumption", "rural power development", "rural power generation", "rural power generation project", "rural power generator", "rural power line", "rural power loom", "rural power outage", "rural power outlet", "rural power plant", "rural power producer", "rural power production", "rural power relation", "rural power sector", "rural power sector reform", "rural power station", "rural power system", "rural power utilities", "rural power utility", "rural renewable energies", "rural renewable energy", "rural residents", "rural small industries", "rural small industry", "rural telecommunication", "rural woman", "rural wood energies", "rural wood energy", "rural youth", "safeguard action", "safeguard investigation", "safeguard measure", "safeguard mechanism", "safeguard restraints", "sales depots", "sectoral liberalization", "securing authorizations", "securing dispute resolution", "security exceptions provisions", "semi-manufactured product", "service mark", "service operations", "service provider", "services area", "services negotiations", "services trade", "service transactions", "sewage sludge", "shallow integration", "side agreements", "sludge digestion", "small-scale biomasses", "small-scale biomass", "small-scale electric power plant", "small-scale energy system", "small-scale hydropower", "small-scale hydropower merit more attention", "small-scale hydropower technologies", "small-scale hydropower technology", "small-scale wind", "solar appliance", "solar array", "solar cell", "solar cooker", "solar device", "solar electricity delivery companies", "solar electricity delivery company", "solar electricity system", "solar electric lighting companies", "solar electrification for replication", "solar electrification", "solar energies", "solar energy applications month", "solar energy device", "solar energy equivalent", "solar energy incidence", "solar energy intervention", "solar energy in village", "solar energy research institute", "solar energy service companies", "solar energy service company", "solar energy system", "solar fixed unit", "solar home", "solar home system", "solar hot water heater", "solar hot water system", "solar insolation", "solar irradiation", "solar lantern", "solar lighting", "solar lighting system", "solar passive architecture", "solar photovoltaic cell", "solar photovoltaic equipment", "solar photovoltaic home system", "solar photovoltaic module", "solar photovoltaic panel", "solar photovoltaic pilot project", "solar photovoltaic system", "solar photovoltaic technologies", "solar photovoltaic technology", "solar power generations", "Solar power", "solar powers", "solar power system", "Solar power systems", "solar power technologies", "solar power technology", "solar power to home", "solar radiation", "solar resource", "solar shop", "solar source", "Solar sources", "solar still", "solar stove", "solar stove in addition", "Solar systems", "solar systems month", "solar thermal", "solar thermal juice", "solar thermal power", "solar thermal technologies", "solar thermal technology", "solar unit", "Solar water heater", "sole agent", "sole basis", "sole concessionaires", "sole distributors", "solid biomass combustion", "solid fuel", "special customs regimes", "special duties", "special rule", "special safeguard action", "special safeguard", "special trading arrangements", "special treatment", "state-trading enterprises", "subsidiary bodies", "subsidies agreement", "subsidised exports", "subsidised source", "substantial assembly", "substantial manufacturing", "substantial processing", "substantial transformation", "substantial transformation principles", "substantial transformation rule", "substantial transformation standard", "substantial transformation test", "supplemental tests", "supplementary criteria", "surplus-member country", "surplus member country", "surplus-producing countries", "surplus removal scheme", "sustainable lifeline tariff", "sustainable rural energies", "sustainable rural energy", "sustainable rural energy objective", "sustainable rural energy option", "sustainable timber processing industries", "sustainable timber processing industry", "symmetric countries", "symmetric tariff choices", "synthesis gases", "synthesis gas", "synthesis gasses", "synthetic cooking fuels from biomasses", "synthetic cooking fuels from biomass", "synthetic fluid fuel", "synthetic liquid fuel", "synthetic liquid petroleum gases", "synthetic liquid petroleum gas", "synthetic liquid petroleum gasses", "tariff benefits", "tariff binding", "tariff categories", "tariff category", "tariff change", "tariff classification change", "tariff classification change requirement", "tariff classification", "tariff classification method", "tariff classification number", "tariff classification system", "tariff classification test", "tariff concession", "tariff differential", "tariff disparity", "tariff elimination process", "tariffication package", "tariff modifications", "tariff negotiation", "tariff nomenclature", "tariff offer", "tariff phase downs", "tariff quota", "tariff rate distinctions", "tariff rate", "tariff rate quota", "tariff reduction", "tariff reduction schedule", "tariff-revenue competition", "tariff revenue competition", "tariff-revenue function", "tariff revenue", "tariff schedule", "tariff-shift approach", "tariff shift approach", "tariff-shift classification method", "tariff shift", "tariff shift ingredient", "tariff shift origin", "tariff shift procedure", "tariff shift rule", "tariff treatment", "tariff wars", "technical assistance program", "technical barrier", "technical committee", "technical exercise", "technical integrity", "technical negotiations", "technical problem", "technical questions", "technical requirement", "technical review", "technical test", "temporary entry", "textile articles", "textile component", "textile cooler bag", "textile fabric", "textile goods", "textile items", "textile producers", "textile product", "textile products country", "textile quotas", "thermal appliance", "thermal furnace", "thermal power generation", "thermal power", "three-way classification", "time-bound exemption", "trade arrangement", "trade balancing requirements", "trade barriers", "trade blocs", "trade deflection", "trade-disruptive manner", "trade- distorting subsidies", "trade diversion cost", "trade embargo", "trade facilitation", "trade issue", "trademark counterfeiting", "trade mark", "trade name", "trade objectives", "trade policy instrument", "trade policy review", "trade policy tools", "trade preference", "trade protocol", "trade-restrictive results", "trade theory", "trade TOP:ics", "trade treaty", "trading agreement", "trading area", "trading arrangement", "trading block", "trading block member countries", "trading community", "trading environment", "trading group", "trading partner", "trading regime", "traditional barrier", "traditional biomass use", "traditional charcoal stove", "traditional consumer", "traditional energy", "traditional energy planner", "traditional energy resource", "traditional energy use", "traditional forest for development", "traditional fuels of wood", "traditional production", "traditional products", "traditional solid fuel", "traditional stove", "traditional tariff", "traditional wood stove", "traffic right", "transaction value", "transaction value method", "transitional period", "transitional requirements", "transitional safeguard mechanism", "transitory standards", "transit route", "transparency requirement", "transparent determinations", "transparent protectionism", "transparent system", "transport stage", "trans-shipping costs", "triple transformation", "turbine hybrid", "unassembled goods", "unconventional energy resource", "underlying nomenclature", "undetermined origin", "unfair trade policy", "unfavorable determinations", "unfavorable origin determinations", "uniform customs procedures", "uniform determinations", "unmanufactured end products", "valuation controls", "valuation methodology", "Valuation methods", "valuation procedure", "valuation regulations", "valuation rule", "valuation services", "value-added calculations", "value-added criteria", "value-added determination", "value-added method", "value-added requirement", "value-added rule", "value-added test", "value-content requirement", "village cluster", "village electrification", "village energy partnership", "village power consumption", "village powers", "village scale mini-grid", "village scale yuan", "village with electricity", "Voluntary agreements", "voluntary restraint agreements", "waste heat recovery", "wind energy application", "wind energy", "wind energy system", "wind-farm producing", "wind-farms", "wind industry", "wind power development", "wind powers", "wind-power system", "wind power system", "wood-growing stock", "written declaration", "written notification"]
  }, {
    "name": "Nuclear Energy",
    "words": ["antinuclear power movement", "Atomic bomb", "atomic emission spectrometer", "atomic energies", "atomic energy industries", "atomic energy reinsurance", "european atomic energy communities", "european organization for nuclear researches", "first strike nuclear strategies", "fissionable material", "fission energies", "fusion energies", "inertial fusions", "international atomic energy agencies", "International control of nuclear power", "international control of nuclear powers", "international nuclear information systems", "ionising radiations", "ionization chamber", "ionization", "ionizing radiation", "joint institute for nuclear researches", "liability for nuclear damage", "nuclear accidents & safeties", "nuclear agricultures", "nuclear assistance", "nuclear capacities", "nuclear capacity", "nuclear chemistries", "nuclear control", "nuclear densitometer", "nuclear disarmament", "nuclear energy law", "nuclear energy researches", "nuclear energy research facility", "nuclear energy research", "nuclear energy risk assessments", "nuclear energy technology innovation", "nuclear explosion", "nuclear export", "nuclear facility decommissioning", "nuclear fuel element", "nuclear fusion", "nuclear industries", "nuclear instruments", "nuclear issue", "nuclear levies", "Nuclear levy", "nuclear magnetic resonance facility", "nuclear magnetic resonances", "nuclear merchant ship", "nuclear nonproliferation", "nuclear nonproliferation policies", "nuclear nonproliferation policy", "nuclear physic", "nuclear plant safeties", "nuclear plant safety", "nuclear policies", "nuclear policy", "nuclear power department", "nuclear powered ship", "Nuclear power generation", "nuclear power generations", "nuclear power", "nuclear power plant management", "nuclear power plant operation", "Nuclear power plant privatization", "nuclear power plant privatizations", "nuclear power sector", "nuclear reactor coolant", "nuclear reactor fuels", "nuclear regulator", "nuclear regulatory commission", "nuclear regulatory processes", "nuclear regulatory process", "nuclear regulatory regime", "nuclear regulatory review processes", "nuclear regulatory review process", "nuclear research & development", "nuclear researches", "nuclear research", "nuclear safety culture", "nuclear safety inspectorate", "nuclear safety matter", "nuclear safety measure", "nuclear safety office", "nuclear safety oversight", "nuclear safety program", "nuclear safety project", "nuclear safety regulator", "nuclear safety requirement", "nuclear science", "nuclear scientist", "nuclear security measure", "nuclear ship", "nuclear standard", "nuclear station", "nuclear submarine", "nuclear technologies", "nuclear terrorism", "nuclear test", "nuclear tracer", "Nuclear tracers", "nuclear warfares", "nuclear wars", "nuclear waste dump", "nuclear weapons test", "Nuclear winter", "nuclear winters", "offshore nuclear power plant", "peaceful uses of nuclear energies", "Peaceful uses of nuclear energy", "plutonium dispositioning", "thermonuclear plant", "uranium enrichment", "uranium industry", "uranium mine", "uranium plutonium fuel cycles", "uranium price", "uranium resource"]
  }, {
    "name": "Solar Energy",
    "words": ["absorber plates", "absorber surfaces", "absorbing elements", "access to grid electricity", "active solar device", "active solar energy technology", "active solar technology", "actual usable radiation component", "airtight enclosure", "ambient water temperature", "amorphous form", "amorphous silicon", "amorphous silicon module", "amorphous silicon technology", "ample solar insolation", "ample source", "angle of incidence", "angle of latitude", "annual average insolation level", "annual output of electricity", "annual production capability", "annual production growth rate", "aperture area", "artificial electric lighting", "atmospheric conditions", "average specific heat capacity", "banks of collector", "battery bank", "Battery banks", "battery charging", "battery-charging station", "battery charging system", "beam of sunlight", "black paint", "black plastic pipe", "box solar cooker", "box type solar cooker", "cadmium telluride", "calorific value", "cell efficiency", "cell manufacturing processes", "cell manufacturing process", "cell production", "cell technology", "clean environment", "clear day diffuse energy", "climate culture", "climate network", "climatic condition", "cloud covers", "cloudy day", "cloudy period", "colder area", "cold season", "collector area", "collector efficiency", "collector panel", "collector system", "collector technology", "community buildings", "community solar cooker", "conventional commercial operator", "conventional electricity", "conventional infrastructure", "conventional power generator", "conventional power", "conventional stand-alone power system", "conventional stove", "conventional technology", "conversion efficiencies", "conversion factor", "cooker", "cooler air", "crystalline cell", "crystalline cell module", "crystalline silicon cell", "crystalline silicon crystal", "crystalline silicon", "crystalline silicon solar cell", "delivery temperature", "deployment infrastructure", "deployment requirement", "desert area", "Desert areas", "desert region", "design of photovoltaic power system", "design processes", "design process", "diffuse components of radiation", "diffuse radiation", "diffuse solar radiation", "direct radiation", "direct solar radiation", "diurnal heating need", "domestic application", "domestic hot water system", "domestic roof", "domestic water heater", "domestic water heating", "electrical back", "electrical power source", "electric consumer", "electric device", "electric immersion heater", "electricity generating authorities", "Electricity industry", "electricity producing turbine", "electric light", "electric resistance heating", "electric supply companies", "electric supply company", "energy-efficient stove", "flat plate collector", "flat plate", "flat plate solar collector", "fluid passageway", "fresh cold water", "fuel requirement", "glass cover", "glass panel", "glass sheath", "global renewable energies", "global renewable energy", "global solar radiation average", "greenhouse grinding", "grid application", "grid installation", "grid lighthouse", "grid market", "grid supplies", "grid system", "heat absorption", "heat by radiation", "heat capacity of food", "heat exchanger", "heat gain", "heat transfer fluid", "higher energy consumption", "highly conductive material", "high solar insolation", "high temperature cooking processes", "high temperature cooking process", "high temperature", "high temperature solder", "high thermal masses", "high thermal mass", "hot sun", "hot water supplies", "hot water supply", "hot water system", "hours of sunlight", "household system", "hybrid hydro", "hybrid system", "hydro electric", "hydro energies", "ice production", "incident solar energies", "incident solar energy", "incident solar irradiance", "increase in collection temperature", "indirect hot water cylinder", "indirect solar cooker", "installation of grid-connected capacities", "installation of grid-connected capacity", "installation of solar energy device", "installation of solar water heater", "international solar energy societies", "kerosene fuel supplies", "kerosene fuel supply", "large solar thermal power", "lighting building interior", "lighting pylon", "load batteries", "load battery", "low consumption light bulb", "low energy consumption", "low environmental impact", "low frequency heat radiation", "low wattage fluorescent lighting", "maximum energies", "maximum energy", "maximum power densities", "maximum power density", "maximum temperature", "metal absorber", "metallic grid", "micro grid", "micro-grids", "Micro Hydro", "micro hydro", "microwave repeater", "national electricity consumption", "national electricity utilities", "national electricity utility", "national electrification", "national grid", "national solar conference", "natural lighting", "opaque to thermal radiation", "oven-type solar cooker", "parabolic dishes", "parabolic dish", "parabolic trough collector technologies", "parabolic trough collector technology", "passive solar building design", "passive solar design concept", "Passive solar design", "passive solar design principle", "passive solar designs", "passive solar energies", "passive solar energy", "passive solar phenomena", "passive solar phenomenon", "passive solar system", "Passive solar systems", "photovoltaic application", "photovoltaic capacities", "photovoltaic capacity", "photovoltaic cell", "Photovoltaic cells", "photovoltaic electricities", "photovoltaic electricity", "photovoltaic energies", "photovoltaic initiatives", "photovoltaic module costs", "photovoltaic module", "photovoltaic option", "photovoltaic power generations", "photovoltaic power", "photovoltaic power system", "photovoltaic product", "photovoltaic pumping applications", "photovoltaic refrigeration systems", "photovoltaic solar energies", "photovoltaic solar energy", "photovoltaic solar home system", "photovoltaic system", "photovoltaic technologies", "photovoltaic technology", "photovoltaic technology sector", "point of use", "pool heater", "pool heating", "power for electricity generation", "power input", "power line", "power output", "power plant operation", "Power stations", "public lighting", "radiant energies", "reflective coating", "reflective panel", "reflective surface", "remote area power supplies", "remote area power supply", "remote arid zone", "remote electrification", "remote electrification system", "remote power application", "remote power generation", "remote power", "Remote rural areas", "remote school", "remote villages", "renewable energy deployment", "Renewable energy development", "renewable energy developments", "renewable energy option", "Renewable energy policies", "renewable energy policy", "renewable energy promotion", "renewable energy target", "Renewable energy technologies", "renewable energy technology", "renewable energy working parties", "renewable energy working party", "renewable solar energies", "renewable solar energy", "renewable stand-alone power supply system", "replacement of fuel-using technique", "residential building", "residential dwelling", "Residential sector", "residential sectors", "road sign lighting", "robust solar lantern", "rural electrical dealer", "rural electrification master plan", "rural electrification plan", "rural electrification project", "rural electrification scheme", "rural energy poverties", "rural energy poverty", "rural lighting", "rural medical clinic", "rural powers", "rural power supplies", "rural power supply", "rural primary school", "rural sub-stations", "rural telephone kiosk", "saltwater desalination system", "seasonal storage", "seasonal storage of heat", "silicon", "small glass pane", "small grid system", "small irrigation pumping system", "small roof-top system", "small seasonal variation", "Solar active regions", "solar air heating", "solar array characteristic", "solar array", "solar beacon", "solar boiler", "solar box cooker", "solar building", "solar cell", "solar cell production capacities", "solar cell production capacity", "solar commission", "solar conversion process", "solar cooker", "solar cooker project", "solar cooker review", "solar cooker unit", "solar council", "solar crop drying technologies", "solar crop drying technology", "Solar Development Group", "solar electricities", "Solar electricity", "solar electric system", "solar electrification", "solar energies", "solar energy availabilities", "solar energy availability", "solar energy collectors", "solar energy consultant", "solar energy economics", "solar energy house", "Solar energy in agriculture", "solar energy infrastructure", "solar energy initiative", "solar energy investment", "solar energy panel", "solar energy resource", "solar energy sector", "solar energy societies", "solar energy society", "solar energy source", "solar energy system", "Solar energy technologies", "solar energy technology", "solar energy use", "Solar equipment", "solar equipments", "solar equipment & supplies", "Solar events", "Solar farms", "solar flux densities", "solar flux density", "solar fluxes", "solar flux", "Solar gain", "solar gains", "Solar generators", "solar heating & cooling", "solar home", "solar home system", "solar hot boxes", "solar hot box", "solar hot water", "solar hot water installation", "solar house", "Solar", "Solar imagery", "solar insolation", "solar installation", "Solar irradiance", "solar irradiances", "solar irradiation", "solar lantern", "solar law", "solar market development", "solar module", "Solar oscillations", "solar oven", "solar parabolic cooker", "solar passive technologies", "solar passive technology", "solar photovoltaic energies", "solar photovoltaic panel", "solar photovoltaic pilot project", "solar photovoltaic power unit", "solar photovoltaic product", "solar photovoltaic system", "solar photovoltaic technologies", "solar photovoltaic technology", "solar plates", "solar power capacities", "solar power capacity", "solar power conditioner", "solar power densities", "solar power density", "solar power generations", "Solar power", "solar power potential", "solar powers", "Solar power systems", "solar power tower", "solar power tower technologies", "solar power tower technology", "solar product", "solar program", "Solar prominences", "solar radiation", "solar radiation incident", "solar radiation insulation", "solar ray", "solar residential house", "solar resource", "solar roofs initiative", "solar rural electrification", "solar rural electrification project", "solar scientist", "solar source", "Solar sources", "solar steam cooking system", "solar still", "solar summit initiative", "solar summit processes", "solar summit process", "Solar surges", "Solar systems", "Solar technologies", "solar technology historian", "solar thermal capacities", "solar thermal capacity", "solar thermal energies", "solar thermal energy application", "solar thermal", "solar thermal installation", "solar thermal power capacities", "solar thermal power capacity", "solar thermal power generations", "solar thermal power plant", "solar thermal power station", "solar thermal product", "solar thermal technologies", "solar thermal technology", "solar tower", "solar trade association", "solar trough technologies", "solar trough technology", "solar utilities", "solar utility", "Solar water heater", "solar water-heating collector", "solar water heating collector", "Solar water heating collectors", "solar water heating", "solar water heating system", "Solar water heating systems", "solar water system", "solar yield", "space cooling", "space exploration", "space heating", "space satellite", "space to earth", "spectral distribution", "stove-type cooker", "street light", "street lighting", "sunlight program", "thermal conversion", "thermally massive structure", "thermal radiation", "thermal solar energy", "thermal solar technology", "thermal system", "thin film", "thin semi-conducting film", "thin wafer", "total solar energy", "total solar radiation", "tropical country", "tropical region", "tube collector", "typical cell size", "voltage support", "water-heating system", "water purifications", "weather condition", "Weather conditions", "winter heating", "winter month"]
  }, {
    "name": "Wind Energy",
    "words": ["aerodynamic control", "aerodynamic improvement device", "aerodynamics of wind turbine", "aerodynamics researches", "aerodynamics research", "aileron", "air densities", "Air density", "air resistance", "alternator", "anemometer calibration", "annual wind energy output", "armature", "automatic pole adjustment", "battery bank", "Battery banks", "battery storage capacities", "Battery storage capacity", "blade tip spoiler", "Blade tip spoilers", "cage wound generator", "capacity credit", "Centrifugal blade pitching", "computational fluid dynamic", "coriolis force", "cup anemometer", "cut in wind speeds", "cut out wind speeds", "drag", "Electrical current", "electrical currents", "electrical energy storage", "electrical generator", "Electrical grid", "electrical grids", "electrical overload", "electric stepper motor", "electromechanical energy conversion", "energy tariffs", "environmental credit", "excess wind energy", "fatigue load", "Feathering", "featherings", "flange", "generating voltage", "generation markets", "generator load", "generator operation", "generator overload capabilities", "generator overload capability", "generator rotor", "generator slip", "global wind", "grid based energies", "grid based renewable energies", "grid based rural electrification", "grid connected renewable energies", "grid connection", "grid frequencies", "grid frequency", "grid supplies", "gust", "hydropower unit", "icing", "induction", "inductive load", "inverter", "laser anemometer", "masking noise", "mean wind speeds", "mechanical air spoiler", "motor", "mountain wind", "nameplate power", "nonmechanical anemometer", "offshore wind energies", "offshore wind", "offshore wind turbine foundation", "pitchable blade", "pitch control", "pitch mechanism", "power control", "power control method", "Power density function", "power density functions", "Pressure gradient", "primary cells", "propeller", "rated power", "rayleigh distribution rectifier", "reactive power charge", "rectifier", "rotor area", "rotor blade twist", "rotor power", "roughness classes", "roughness length", "roughness rose", "secondary cells", "shelter effect", "solar cell", "solar energies", "sound distance", "sound propagation", "stall control", "stall controlled wind generator", "Stall", "stalls", "star connection", "structural dynamic", "synchronous speed", "Tail vane deflect", "three phase generator", "tip speed ratio", "tip spillage", "tower shadow", "turbulences", "ultrasonic anemometer", "variable energy tariff", "vertical axes", "voltaic cell", "vortex generator", "wake effect", "Weibull graphs", "wind data", "wind datum", "wind energy conversion systems", "wind energy development", "wind energy", "wind energy industry", "wind energy installation", "wind energy output", "wind energy project", "wind energy researches", "wind energy research", "wind farm developers in area", "wind farm", "Wind farms", "wind flow", "wind force", "wind generated electricity", "wind generating assets due", "wind generation", "wind generator control", "Wind governor", "wind governors", "wind industry", "wind investment", "wind machine", "wind map", "windmill propeller design", "wind overspeed protection", "wind park financing", "wind portfolio", "wind power capacity", "wind power coefficient", "wind power curve", "wind power densities", "wind power distribution", "wind powered electricity generations", "wind powered pump", "wind power generator", "wind power indexes", "wind power index", "wind power indices", "wind power market", "wind power project", "wind power qualities", "wind power rebounding", "wind powers", "wind project", "wind propeller design", "wind pump", "wind recorder", "wind resource availability", "wind rise", "wind risk as long as weather data", "wind risk as long as weather datum", "wind roses", "wind sector", "wind shades", "wind share", "wind shears", "Wind speed", "wind speed measurements", "wind system", "Wind systems", "wind turbine availability", "wind turbine cost", "wind turbine damage", "wind turbine design", "wind turbine energy output", "wind turbine farm", "wind turbine generator", "wind turbine", "wind turbine income", "wind turbine manufacturer", "wind turbine park", "wind turbine pitch mechanism", "Wind turbine power control", "wind turbine power controls", "wind turbine power output", "wind turbine rotor blade", "wind turbine rotor", "wind turbine shadow calculator", "wind turbine sound calculation", "wind turbine sound", "wind turbine sound measurement", "wind turbine technology", "wind turbine tower assembly", "wind turbine tower installation", "wind turbine yaw mechanism", "wind vane", "Wind vanes", "wind variability", "wind velocities", "wind water pumping", "yaw control", "yaw error"]
  }, {
    "name": "Renewable Energy",
    "words": ["acceleration of reforestation", "acceptable price", "Access to energy", "access to energy services", "access to grid", "access to modern energy", "access to replacement component", "access to transmission capacity", "access to transmission", "active metal ion", "adoption of energy-efficiency", "adoption of energy efficiency", "adoption of renewable energy technology", "advanced renewable energy technology", "advances in wind power technology", "affordable amount of electricity", "affordable commercial energy supply", "affordable credit", "affordable domestic debt", "affordable electricity", "affordable energy supply", "affordable financing", "affordable quantities of power", "affordable rural energy supply", "affordable solar lantern", "affordable supply of energy", "affordable turbine", "aggregating electricity consumer", "agreement on photovoltaic power system", "agricultural crop", "agricultural residue", "air-conditioning demand", "air duct", "air flow", "Air flows", "air free environment", "air quality", "air quality improvement standard", "alcohol fuel for transportation", "alcohol production processes", "alcohol production process", "alcohol productions", "alleviating wood problem", "alternative auto energy", "alternative energy program operation", "alternative energy programs", "Alternative energy technology", "alternative fuel vehicles", "alternative investment", "alternative mean", "alternative methods", "alternative risk transfer arrangement", "alternative technology pathway", "anaerobic digester", "anaerobic fermentation", "animal waste per day", "average emission reduction", "average hook-up price", "bagasse cogeneration", "bagasse cogeneration program", "bagasse from sugar cane processing", "bagasse plant", "bagasse power", "bagasse power plant", "bagasse project", "bankable renewable energy", "barriers to energy efficiency investment", "barriers to promotion of energy", "baseline of energy usage", "basis of energy content", "battery charging", "battery-charging system", "battery storage", "battery supplier", "battery type", "bed reactor", "benefits of electrification", "better energy access", "better energy efficiency", "big energy corporation", "biodegradable fuel", "biodegradable outputs", "biodegradable waste", "bio-diesel", "bio diesel", "bio energy", "bioenergy research", "bio-ethanol", "biofuel crop", "bio fuel", "bio-fuel industry", "bio fuel industry", "biofuel industry", "bio-fuel investor", "bio fuel investor", "biofuel investor", "bio-fuel production", "bio fuel production", "biofuel production", "bio-fuels industry", "bio fuels industry", "biofuels industry", "bio-fuels investor", "bio fuels investor", "biofuels investor", "bio-fuels production", "bio fuels production", "biofuels production", "bio-fuels sector", "bio fuels sector", "biofuels sector", "bio-fuels strategy", "bio fuels strategy", "biofuels strategy", "bio-fuels technology", "bio fuels technology", "biofuels technology", "bio-fuel strategy", "bio fuel strategy", "biofuel strategy", "bio-fuel technology", "bio fuel technology", "biofuel technology", "biofuel usage", "biofuel use", "biogas development", "biogas equivalent", "biogas generation", "biogas plant", "biogas plant technology", "Biogas production", "biogas promotion", "biogas smoke", "biogas system", "biogas technology", "biologically-produced alcohols", "biologically produced alcohols", "biological waste", "bio-lubricants", "biomass area", "biomass availability", "biomass capacity", "biomass cogeneration", "biomass cogeneration power", "biomass compound", "biomass concession", "biomass conversion technology", "biomass demand", "biomass electricity", "biomass energy conversion system", "biomass energy production", "biomass gasification plant", "biomass heating plant", "biomass logistic", "biomass material", "biomass ordinance", "biomass plant", "biomass power generation", "biomass power", "biomass procurement", "biomass producing area", "biomass requirement for energy production", "biomass requirement", "biomass residue", "Biomass residues", "biomass resources", "biomass sectors", "biomass smokes", "biomass technology", "biomass-to-energy", "biomass user", "biomethanol", "bio-oil", "bio product", "bioreactor system", "boiler replacement", "boiler system", "boiling point energy", "boiling point", "british thermal unit", "bulk discount", "bulk market", "bulk purchase", "Bulk purchases", "bulk renewable capacity", "bulk renewable generation facility", "burn fuel", "burning gases", "burning gas", "burning gasses", "burning stove", "burning wheat straw", "burn wheat straw", "calorific value of fuel", "cane residue", "canola", "capacity of biogases", "capacity of biogas", "carbon abatement", "carbon contract", "carbon credit allocation", "carbon credit benefit", "carbon credit buyer", "carbon credit-related energy project", "carbon credit transfer market", "carbon delivery", "carbon disclosure project", "carbon emission level", "carbon emission reduction", "carbon emission reduction value", "carbon-emitting technology", "carbon endowment", "carbon finance", "carbon finance operation", "carbon fund", "Carbon funds", "carbon intensities", "Carbon intensity", "carbon markets recognition", "carbon neutral fuel", "carbon neutral production", "carbon offset", "carbon offset sale", "carbon purchase", "carbon reduction", "carbon reduction opportunity", "carbon restriction", "carbon revenue", "carbon revenue stream", "carbon sale", "carbon technology", "carbon value", "cashew nut processing", "cellulosic biomasses", "cellulosic biomass", "ceramic insert", "ceramic liner", "certificate system", "certificate trading", "certified combustible", "certified emission reduction", "charcoal dust", "charcoal efficiency", "charcoal production", "charcoal remaining", "cheaper energy", "chemical conversion", "chemical conversion processes", "chemical conversion process", "chemical energy store", "chemical property", "Chemical transformation", "chemical transformations", "chronic respiratory disease", "classical mould", "clay part", "clay stove", "clean air initiatives", "clean climate initiative", "clean development", "clean energies", "clean energy development", "clean energy equity investment", "clean energy finance", "clean energy fund", "clean energy investment", "clean energy market initiative", "clean energy product", "Clean energy products", "clean energy project developer", "clean energy proposal", "clean energy provider", "clean energy system", "clean energy technology adoption", "cleaner energies", "Cleaner energy", "cleaner energy technology", "cleaner power", "clean fossil fuel", "clean technologies", "clean urban transportation system", "climate benefit", "coconut oil extraction", "coconut oil for combustion", "coconut oil industry", "coconut oil price", "coconut oil product", "coconut oil production", "cogeneration", "cogeneration of heat", "coherent energy system", "collect wind data", "collect wind datum", "combustible gases", "combustible gas", "combustible gasses", "combustible liquid fuel", "Combustion efficiency", "combustion of ethanol", "combustion processes", "combustion process", "combustion system", "combustion theory", "commercial energy need", "commercial-grade energy efficiency project", "commercialization of renewable energy technology", "commercial-scale biomasses", "commercial-scale biomass", "common feedstock", "common feedstocks for combustion", "common fuel source", "common heating operation", "community biogas digester", "compact fluorescent bulb", "compact fluorescent lamp factory", "competitive renewable energy", "competitive renewable energy system", "connected generation", "connected power generation capacity", "connection tariff", "conservation certificate", "conventional diesel engine", "conventional diesel", "conventional energy consumption", "conventional fossil", "conventional generation equipment", "conventional hydropower", "conventional mineral diesel", "conventional power generation", "conventional power", "conventional power plant financing", "conventional power pool", "conventional power utility", "conventional sources of energy", "conventional technology", "cook stove", "Cook stoves", "corn-based fuel", "corn based fuel", "corn", "corn mulches", "corn mulch", "cost of electricity", "cost of energy supply", "cost of renewable energy technology", "cost of service", "costs of conversion", "costs of wind power", "cotton husk", "crop", "cross-border energy", "crystalline module", "crystalline silicon", "cubic metre of biogases", "cubic metre of biogas", "cultivation of rapeseed", "current gasoline", "day collecting fuel", "debt-for-environment swap program", "dedicated energy efficiency line", "dedicated renewable energy team", "delivering cleaner energy", "delivery of energy service", "demand for rapeseed product", "dependent on feedstock", "deposition method", "developers of thermal", "development of energy efficiencies", "development of energy efficiency", "diesel directive", "diesel power", "digesters effluent", "digestion chamber", "digestion processes", "digestion process", "digestion temperature", "digestion time", "direct sunlight", "distillery", "distribution loss reduction", "distribution of energies", "distribution of energy", "district heating generation", "district heating plants", "district heating rehabilitation", "diversified energies", "diversified energy", "diversity of energy supplies", "diversity of energy supply", "domestic biomass use", "domestic energy consumption", "domestic energy requirement", "domestic energy use", "domestic gas consumption", "domestic lighting", "domestic renewable technologies", "domestic renewable technology", "domestic space heating", "dry biomasses", "dry biomass", "dung collection", "ecological advantage", "Ecological building", "ecological buildings", "ecological damage", "ecological one", "ecological refugee", "ecological regeneration", "ecological repercussion", "economics of wind power", "Efficiency of electricity generation", "efficiency of electricity generations", "Efficiency of energy use", "efficiency of energy uses", "efficient lighting businesses", "efficient lighting business", "efficient lighting initiative", "efficient lighting project", "efficient light plant", "efficient stove", "efficient streetlight", "efficient use of biomasses", "efficient use of biomass", "electrical generation", "electrical motor", "electrical network", "electric energy grid", "electric industry", "electricity bill reduction", "Electricity Boards", "Electricity costs", "electricity distribution utilities", "electricity distribution utility", "electricity for water pumping", "electricity generating technologies", "electricity generating technology", "electricity generation capacity", "Electricity industry", "electricity information", "electricity planning", "electricity plant", "electricity power", "electricity rates", "electricity sales", "electricity suppl", "electricity suppliers", "electricity supply market", "electricity supply option", "electricity technologies", "electricity technology", "electricity to village", "electricity usage", "electricity user", "electricity wheeling fee", "electric light", "electric service", "electric utility companies", "electric utility company", "electric utility official", "electrification project", "electrification scheme", "Electrification schemes", "electrification strategies", "electrification strategy", "Emission concentration", "emission concentrations", "emission reduction fund", "emission reduction", "emissions of ethanol range", "emissions reduction", "end-use appliance", "end-use efficiencies", "end-use energy efficiencies", "end-use energy efficiency", "end-use pricing", "end-user", "end-user price of electricities", "end-user price of electricity", "end-user product", "end-user renewable energies", "end-user renewable energy", "energy activities", "Energy activity", "energy application", "energy assessment", "Energy auditing", "energy bases", "energy basis", "energy businesses", "energy business", "energy carrier", "Energy carriers", "energy companies", "energy component of transmission", "energy components", "energy conservation action", "energy conservation fund", "energy control system", "energy conversion efficiencies", "energy conversion efficiency", "energy conversion equipment", "energy conversion of machineries", "energy conversion of machinery", "energy conversion processes", "energy conversion process", "energy conversion technologies", "energy conversion technology", "energy cropping", "energy debt conversion", "energy deliveries", "energy delivery", "energy demand", "energy domain", "energy economist", "energy-efficiency component", "energy efficiency component", "energy-efficiency decision", "energy efficiency decision", "energy-efficiency equipment", "energy efficiency equipment", "energy efficiency", "energy-efficiency implementation action", "energy efficiency implementation action", "energy-efficiency industries", "energy efficiency industries", "energy-efficiency industry", "energy-efficiency investment", "energy efficiency investment", "energy-efficiency investment opportunities", "energy efficiency investment opportunities", "energy-efficiency investment opportunity", "energy efficiency investment opportunity", "Energy efficiency investments", "energy-efficiency loan", "energy efficiency loan", "energy-efficiency loan program", "energy efficiency loan program", "energy-efficiency measure", "energy efficiency measure", "Energy efficiency measures", "energy-efficiency performance contracting", "energy efficiency performance contracting", "energy efficiency performance", "energy efficiency pipeline", "energy efficiency policy", "energy-efficiency program office", "energy efficiency program office", "energy-efficiency protocol", "energy efficiency protocol", "energy-efficiency saving", "energy-efficiency support", "energy efficiency support", "energy-efficiency technologies", "Energy efficiency technologies", "energy-efficiency technology", "energy efficiency technology", "energy-efficient equipment", "energy endowment", "energy engineer", "energy entrepreneur", "energy expert", "energy gains", "energy grid", "energy in biomasses", "energy in biomass", "energy industries", "energy investment", "energy management companies", "energy management company", "energy management service", "energy market restructuring", "Energy markets", "energy mining", "energy mix", "Energy operations", "energy pathway", "energy payments", "energy performance contracting", "energy planner", "energy pool", "energy practitioner", "energy pricing", "energy production", "energy profile", "energy project developer", "energy purpose", "energy resource", "Energy sector", "energy sectors", "energy security", "energy service charge", "energy service organization", "energy service renewable energies", "energy service renewable energy", "energy services", "energy storage media necessaries", "energy storage media necessary", "energy strategies", "energy supply option", "Energy systems", "energy trade", "energy turbine", "energy utilization experts from industries", "energy utilization experts from industry", "energy venture", "environmental amelioration", "environmental benefits", "environmental characteristic", "environmental circumstance", "environmental consciousness", "Environmental consequence", "environmental consequences", "environmental damage", "environmental decay", "environmental destruction", "environmental engineering", "environmental health", "environmental ill", "environmental impact of large-scale", "environmental investment corporation", "environmentally friendly energies", "environmentally friendly energy", "environmental performance", "environmental preservation policies", "environmental preservation policy", "environmental risk", "Environmental technologies", "environmental venture fund", "ethanol from biomasses", "ethanol from biomass", "ethanol from fruit", "ethanol gel", "ethanol market", "ethanol per annum", "ethanol plant", "ethanol production", "ethanol refineries", "ethanol refinery", "excise duty reductions", "excrement", "extraction of energy from biomasses", "extraction of energy from biomass", "extraction processes", "extraction process", "extraction system", "firedamp", "fire-wood", "fire-wood shortage", "first-generation fuels", "Fischer-Tropsch diesel", "flaxseed", "floating cover digester", "floating cover type", "flotsam", "fluorescent lighting", "fluorescent tube", "food as fuel", "food-processing residue", "fossil capacities", "fossil capacity", "fossil diesel", "fossil energy", "Fossil fuel demand", "fossil fuel demands", "fossil fuel investment", "fossil fuel lending", "fossil fuel resource", "Fossil fuel resources", "fossil fuels cause", "fossil power plant", "FT diesel", "fuel collection", "fuel cost indexing", "fuel cost indexing provision", "fuel cost intensive option", "fuel cost passes", "fuel cost pass", "fuel for transportation", "fuel-independent", "fuel ladder", "fuel management strategies", "fuel management strategy", "fuel mixes", "fuel obligation", "fuel production", "fuel replacement", "fuels fora", "fuels for racing car", "fuels forum", "fuel shortages", "fuel stations for self-consumption", "fuel substitution", "fuel suppl", "fuel supply", "fuel wood", "fuel wood resource", "gas collection method", "gas from sewage treatment installation", "gas hybrid power generation", "gas hybrid power generation project", "gasification of biomasses", "gasification of biomass", "gasification rapeseed", "gasification technologies", "gasification technology", "gasohol engine", "gasoline-ethanol mixes", "gasoline ethanol mixes", "gasoline-ethanol mix", "gasoline ethanol mix", "gas stations", "geothermal area", "Geothermal areas", "geothermal explorations", "geothermal heat production plant", "geothermal projects", "geothermal resource", "Geothermal resources", "geothermal site", "geothermal sources", "geothermal systems", "Geothermal temperature", "geothermal temperatures", "geothermal water abstraction", "geothermal water level", "geothermal well", "Geothermal wells", "geothermic plant", "global energy efficiency market", "global stock of energy plant", "grain price", "green electrical energies", "green electrical energy", "green electricities", "green electricity", "green energies", "green energy", "green generation", "green generator", "greenhouse challenge", "greenhouse gas abatement cost", "greenhouse gas avoidance", "greenhouse gas offset", "greenhouse gas reduction debate", "greenhouse gas reduction", "green-marketing program", "Green Paper", "green papers", "green power pool", "grid application", "grid area", "grid capacities", "grid capacity", "grid concession", "grid connected system", "grid connection", "grid corporation", "grid customer", "grid electrification concession", "grid energy deliveries", "grid energy delivery", "grid energy enterprise", "grid feed solar system", "grid fluctuation", "grid for electricities", "grid for electricity", "grid improvement", "grid network", "grid option", "grid renewable electricities", "grid renewable electricity", "grid renewable energies", "grid renewable energy", "grid resource", "grid supplies", "grid-support", "grid system", "grid voltage", "harnessing wind power", "hook-up price", "hot air turbine", "hot water distribution network", "hot water system", "hot water use", "household appliances", "household electrification", "household energy consumption", "household energy need", "household energy reform", "household energy technologies", "household energy technology", "household energy use", "household environment", "household fuels", "household issue", "household lighting", "household needs", "Household sector", "household sectors", "HTU diesel", "hybrid electrification", "hybrid plant", "hybrid power station", "hybrid power system", "hybrid project", "hybrid solar lighting", "hybrid system", "hybrid technologies", "hybrid technology", "hydroelectric project", "hydrogen boondoggle", "hydrogen communities", "hydrogen community", "hydrogen energy", "hydrogen from biomasses", "hydrogen from biomass", "hydrogen meeting", "hydrogen planet", "hydrogen policies", "hydrogen policy", "hydrogen producing ship", "hydrogen technologies", "hydrogen technology", "hydropower development", "hydro power plant", "hydro power potential", "hydropower resource", "hydro power scheme", "hydro powers", "hydropowers", "hydro project", "hydrothermal electric power system", "Hydrothermal vents", "illumination equivalent", "independent power developer", "independent power projects", "independent renewable energy power producer", "indigenous renewable energy resource", "industrial biofuels strategy", "industrial biofuel strategy", "industrial biomass residue", "industrial cogeneration system", "industrial energy efficiencies", "industrial energy-efficiency", "industrial waste wood", "innovative rural energies", "innovative rural energy deliveries", "innovative rural energy delivery", "innovative rural energy", "intensive renewable project", "interest in biomasses", "interest in biomass", "intermittent renewable capacities", "intermittent renewable capacity", "intermittent renewable resource", "intermittent use", "investment in clean energy activities", "investment in clean energy activity", "investment in energy efficiencies", "Investment in energy efficiency", "jatropha", "kerosene lantern", "kerosene pressure", "kerosene refrigerator", "kerosene wick lamp", "kilogram of wood", "kilowatt hour", "kilowatt hour liquid petroleum gases", "kilowatt hour liquid petroleum gas", "kilowatt hour liquid petroleum gasses", "kilowatt-hours", "kilowatt hours of electricities", "kilowatt hours of electricity", "landfill gasses", "large generating station", "large-scale biogases", "large-scale biogas", "large-scale combustion of biomasses", "large-scale combustion of biomass", "large scale ethanol production", "large-scale fermentation", "large-scale gasification system", "large-scale generating plant", "large-scale hydropower", "large scale implementation of wind power", "large-scale purchasing power", "leading wind power producer", "level of energy consumption", "level of illumination", "level policy playing field", "levels of gas turbine", "light charcoal stove", "lighting", "lime burning", "liquefaction of biogases", "liquefaction of biogas", "liquid biofuel", "liquid fuels application", "local electric utilities", "local electric utility", "local energy engineering", "local energy enterprise", "local energy supplier", "local grid operator", "locally-produced biofuel", "local power distribution companies", "local power distribution company", "local power source", "local utilities", "local utility", "long-term bilateral power purchase agreement", "long-term carbon offset deliveries", "long-term carbon offset delivery", "low-cost renewable energies", "low-cost renewable energy", "low-voltage feeder", "low-voltage period", "manure for wood in area", "market for biomass power generation", "market for carbon emission reduction", "market for clean energy technologies", "market for clean energy technology", "market for energy efficiency investment", "megawatt range", "megawatts of wind power", "metal halide lamp factories", "metal halide lamp factory", "metal halide lamp", "metal halide venture", "methane producing bacteria", "methanol vegetable", "micro-grids", "micro-hydro", "Micro Hydro", "micro hydro", "micro-hydro power", "micro-hydropower", "micro hydro power", "mill wastewater", "mineral diesel", "mineral oil product", "mineral oil taxes", "mineral oil tax", "mini-grids", "mini-hydroelectric project", "mini-inverters", "mix of energies", "mix of energy", "moringa", "national electrical utilities", "national electrical utility", "national electricity grid", "national electric utilities", "national electric utility", "national energy planning", "national energy regulatory agencies", "national energy regulatory agency", "national grid", "national renewable energy laboratories", "national renewable energy laboratory", "natural biomass resource", "natural energy flow", "natural energy flows to electricities", "natural energy flows to electricity", "natural forest management", "natural gas generation", "natural gas losses", "natural gas loss", "natural gas power generation", "natural gas price deregulation", "natural resource managements", "net carbon dioxide addition", "net carbon dioxide additions", "net carbon dioxide", "net carbon dioxides", "no access to electricities", "no access to electricity", "no access to electricity supplies", "no access to electricity supply", "nonrenewable option", "nonrenewable power generation", "nonrenewable power", "nonrenewable technologies", "nonrenewable technology", "nuclear power", "ocean energy system", "ocean thermal energies", "ocean thermal energy conversion", "offshore wind energies", "oil extraction", "oil for combustion", "oil from seed", "oil-giving plant", "oil giving plant", "oil harvesting", "oil mill", "oil price", "oil seed", "oil seed plant", "oilseed rape", "oil yield", "onshore wind", "organic agriculture", "organic growth", "organic linkage", "organic residue", "organic tissue", "parrifin", "peak load", "peak period", "peak power", "peak watt", "penetration of renewable energy technologies", "penetration of renewable energy technology", "Per capita energy consumption", "per capita energy consumptions", "photosynthetic algae", "photovoltaic effect", "photovoltaic factories", "photovoltaic factory", "photovoltaic market", "photovoltaic market transformation initiative", "photovoltaic power", "photovoltaic power system", "photovoltaic pump", "photovoltaic rebate", "photovoltaic solar home", "photovoltaic solar home system", "photovoltaic solar power", "photovoltaic system", "photovoltaic technologies", "photovoltaic technology", "physical access to transmission line", "pipeline of cogeneration project", "plant oil from seed", "plant oil", "plant-oil methyl ester", "plant seed", "plant technologies", "plant technology", "portable source", "portable stove", "poultry feces", "power sector reform", "production of biogases", "production of biogas", "production of biogas plant", "production of biomasses", "production of biomass", "production of charcoal", "production of methane for use", "production of methane", "production of plant oil", "propanol", "rapeseed cake", "rapeseed methyl ester", "rapeseed product", "rational use", "raw biomass source", "raw fossil material", "reactors will", "reactor type", "regenerative energies", "regenerative energy", "regenerative fuel", "regenerative fuel requirement", "regulation of energy industries", "regulation of energy industry", "regulation of retail electricity supplier", "reliable small wind turbine", "remote renewable energy resource", "remote rural electrification", "renewable bulk power", "renewable developer", "renewable development", "renewable electricities", "renewable electricity generation system", "renewable electricity generator", "renewable energy access", "renewable energy activities", "renewable energy activity", "renewable energy alternative", "renewable energy application", "renewable energy assessment", "renewable energy association", "renewable energy audit", "renewable energy auditing", "Renewable energy businesses", "renewable energy business", "renewable energy campaign", "renewable energy capital", "renewable energy carrier", "renewable energy companies", "renewable energy company", "renewable energy conservation action", "renewable energy conservation", "renewable energy consumption", "renewable energy control system", "renewable energy conversion technologies", "renewable energy conversion technology", "renewable energy crop", "renewable energy cropping", "renewable energy deliveries", "renewable energy delivery", "renewable energy demand", "renewable energy deployment", "Renewable energy development", "renewable energy development policies", "renewable energy development policy", "renewable energy developments", "renewable energy economics", "renewable energy efficiencies", "renewable energy efficiency financing", "renewable energy efficiency", "renewable energy efficiency improvement", "renewable energy efficiency initiative", "renewable energy efficiency investment", "renewable energy efficiency of building", "renewable energy efficiency policies", "renewable energy efficiency policy", "renewable energy efficiency project", "renewable energy efficiency technologies", "renewable energy efficiency technology", "renewable energy endowment", "renewable energy energy project", "renewable energy enterprise", "renewable energy entrepreneur", "renewable energy equipment", "renewable energy equipment supplier", "renewable energy expert", "renewable energy exporter", "renewable energy finance", "renewable energy financing", "renewable energy from biomasses", "renewable energy from biomass", "renewable energy fuel source", "renewable energy grid", "renewable energy growth", "renewable energy industries", "Renewable energy industry", "Renewable energy investment", "renewable energy investment operation", "renewable energy investment service", "renewable energy investments", "renewable energy issue", "renewable energy law", "renewable energy lending", "renewable energy management", "renewable energy market development", "renewable energy market", "renewable energy merchant plant", "renewable energy mini-grid project", "renewable energy mixes", "renewable energy mix", "renewable energy movement", "renewable energy operation", "renewable energy option", "renewable energy partnership", "renewable energy penetration", "Renewable energy policies", "renewable energy policy", "renewable energy potential", "renewable energy practice", "renewable energy practitioner", "renewable energy price", "Renewable energy prices", "renewable energy pricing", "renewable energy product", "renewable energy production", "renewable energy program", "renewable energy project activities", "renewable energy project activity", "renewable energy project developer", "renewable energy project development", "renewable energy project experience", "renewable energy project finance", "renewable energy project", "renewable energy project investment", "Renewable energy projects", "renewable energy purpose", "renewable energy requirement", "renewable energy saving", "renewable energy scene", "renewable energy sector development", "renewable energy sector", "renewable energy sector reform", "renewable energy securities", "renewable energy security", "renewable energy service charge", "renewable energy service companies", "renewable energy service company", "renewable energy service", "renewable energy service organization", "renewable energy solution", "renewable energy source", "renewable energy specialist", "renewable energy start-ups", "renewable energy strategy", "renewable energy support", "renewable energy system", "Renewable energy systems", "renewable energy tariff", "Renewable energy technologies", "renewable energy technology application", "renewable energy technology", "renewable energy threshold", "renewable energy trade", "renewable energy use", "renewable energy user", "renewable energy work", "renewable forms of energy service", "renewable fuels in transport", "renewable generation", "renewable generator", "renewable lease", "renewable pilot", "renewable power developer", "renewable power generation", "renewable project", "renewable source", "renewable source of energies", "renewable source of energy", "Renewable technologies", "renewable technologies like biomasses", "renewable technologies like biomass", "renewable technology", "residues from vineyard", "returns of grid", "river hydro", "river micro-hydro scheme", "rural concession", "rural domestic energy sector", "rural electric concession", "rural electricities", "rural electric service concession", "rural electric supply concession", "rural electrification account", "rural electrification program", "rural electrification project", "rural electrification strategies", "rural electrification strategy", "rural energy availabilities", "rural energy availability", "rural energy demand", "rural energy development", "rural energy development strategies", "rural energy development strategy", "rural energy enterprise development", "rural energy entrepreneur", "rural energy market", "rural energy planning", "rural energy resource", "rural energy sector", "rural energy service sector", "rural energy solution", "rural energy supplies", "rural energy supply", "rural energy system", "Rural energy systems", "rural lighting", "rural power companies", "rural power company", "rural renewable energy project", "rural renewable energy use", "rural solar electrification project", "rural user", "rural villages", "sewage gases", "sewage gas", "sewage gasses", "sewage treatment installation", "shaft power", "small appliance", "small electricity retailer model", "small household system", "small hydro developer", "small hydro development", "small hydro", "small hydro-power", "small hydro scheme", "small power", "small renewable energies", "small renewable energy", "small-scale biogas digester", "small scale biogas digester", "small-scale biomasses", "small scale biomasses", "small-scale biomass", "small scale biomass", "small-scale energy development firm", "small scale energy development", "small scale harnessing", "small-scale hydropower", "small scale hydropower", "small scale investing", "small-scale producer gas system", "small-scale production of oil", "small-scale renewable power", "small-scale renewable system", "small scale renewable system", "small-scale wind power", "small solar home system", "small solar system", "small washing machine", "small wind battery charger", "small wind energy system", "small wind energy systems for battery charging", "small wind system", "small wind turbine", "smoke health", "smoke pollution", "smoky interior", "solar cell", "solar companies", "solar company", "solar dealer", "solar development capital", "solar development corporation", "solar development foundation", "Solar Development Group", "solar development groups", "solar development", "solar distribution", "solar electricities", "Solar electricity", "solar electricity system", "solar electricity trailing", "solar electrification", "solar energies", "solar energy enterprise", "solar energy enterprise zone", "solar energy field", "solar energy industries association", "solar energy industry", "solar energy more", "solar energy power", "solar energy system", "solar energy to electricities", "solar energy to electricity", "solar enterprise", "solar enterprise zone", "solar farm", "Solar farms", "solar fund gearing", "solar fund g e", "solar fund g e's", "solar fund", "solar goal", "solar goal with fund", "solar home financing package", "solar home", "solar home program", "solar homes system", "solar home subsidy program", "solar home system businesses", "solar home system business", "solar home system credit program", "solar home system household electrification", "solar home system", "solar home system operation", "solar home system project", "solar home systems can", "solar hot water heater", "solar industries", "Solar industry", "solar initiative portfolio", "solar initiative staff", "solar investment fund", "solar investment", "solar lantern", "solar lighting system", "solar loan", "solar market", "solar megawatt", "solar module", "solar panel supplier", "solar parabolic trough system", "solar photovoltaic developer", "solar photovoltaic developers at interest rates as low", "solar photovoltaic enterprise", "solar photovoltaic home system", "solar photovoltaic plant", "solar photovoltaic power for refrigerator", "solar photovoltaic power plant", "solar photovoltaic powers", "solar photovoltaic project", "solar photovoltaic project identification", "solar photovoltaic system", "solar photovoltaic technologies", "solar photovoltaic technology", "solar plant", "solar pond", "solar pond use", "solar power development", "solar power generations", "solar power home page", "Solar power", "solar power location", "solar-power manufacturer", "solar power owing", "solar powers", "solar program", "solar project", "solar resource", "solar revolution", "solar roof", "solar solution", "solar source", "Solar sources", "solar statistic", "Solar systems", "solar television", "solar thermal collect", "solar thermal collector system", "solar thermal energies", "solar thermal", "solar thermal hybrid", "solar thermal/natural gases", "solar thermal/natural gas", "solar thermal-natural gas hybrid", "solar thermal-natural gas hybrid power station", "solar thermal/natural gasses", "solar thermal power generations", "solar thermal power", "solar thermal power project", "solar thermal program", "solar thermal project", "solar thermal technologies", "solar thermal technology", "solar tile", "Solar water heater", "solar water heaters generally employ", "solar water heating collector", "Solar water heating collectors", "solar water heating", "solid biofuel", "solid biomasses", "solid biomass fuel", "solid biomass", "solid biomass material", "solid biomass source", "solid biomatter", "solid form", "spot market", "steam bill", "sugar cane bagasse cogeneration facilities", "sugar cane bagasse cogeneration facility", "sugar cane bagasse cogeneration", "sugar cane bagasse", "sugarcane bagasse", "sugarcane bagasse power generation project", "sugarcane bagasse power", "sugarcane bagasse power project", "sugarcane bagasse project", "sugar cane processing", "sugarcane residue", "sugarcane residue remaining", "sugar companies", "sugar company", "sugar industries", "sugar mill", "sunny climate", "sunny day", "sunshine dailies", "sunshine daily", "sustainable electricities", "sustainable electricity", "sustainable energies", "sustainable energy activities", "sustainable energy activity", "sustainable energy development", "sustainable energy expo", "sustainable energy finance", "sustainable energy futures", "sustainable energy investment", "sustainable energy program", "sustainable energy resource", "sustainable energy sector", "Sustainable energy strategies", "sustainable energy strategy", "sustainable habitat", "sustainable infrastructure", "sustainable management", "sustainable market", "sustainable policies", "sustainable policy", "sustainable production of energies", "sustainable production of energy", "sustainable solution", "sustainable technologies", "sustainable technology", "Sustainable use", "sustainable uses", "tax break", "thermal application", "Thermal barrier", "thermal barriers", "thermal cool storage", "thermal depolymerization", "thermal efficiencies", "Thermal efficiency", "thermal efficiency measure", "thermal energy management", "Thermal energy production", "thermal environment", "thermal extraction", "thermal generation", "thermal imagery", "thermal infrared", "thermal oil recovery", "thermal option", "thermal power generation", "thermal power", "Thermal power projects", "thermal project", "Thermic balance", "thermic balances", "thermic plant", "Thermic pollution effects", "thermic stratification", "thermic treatment", "thermochemical energy", "thermocline bases", "thermocline depths", "total biomass consumption", "total biomass energy", "total energy requirement", "traditional biomasses", "traditional biomass", "traditional collectors of dung", "traditional kiln", "traditional power generation", "traditional power station", "traditional power supplier", "traditional stove", "traditional thermal", "transition to ethanol fuel", "transmission cost", "transmission distance", "transmission improvement", "transmission pricing", "transmission pricing scheme", "transmission rate", "transmission service", "transmission system bottleneck", "transmission system", "unit energy cost", "upstream generation", "urban grid deficiency", "urban household", "use of biomass energy", "use of biomasses", "use of biomass", "use of energy service company", "use of renewable energy system", "use of renewable energy technology", "utility restructuring", "vegetable leaf", "vegetable leave", "vegetation for fuel", "village cooperative", "village electricity system", "village electrification", "village energy", "village enterprise", "village leaders", "village levels", "village mini-grids", "village powers", "villagers battery", "village store", "village water supply", "village water-works", "village welding", "waste biomasses", "waste biomass", "waste-heat boiler", "waste heat", "waste material", "waste methane recovery project", "waste product", "waste-to-energy", "waste wood from operation", "waste wood", "water heating", "water management", "water pumping system", "wave energies", "wave power energy", "wet biomass", "wildlife habitat", "wind atlas analyses", "wind atlas analysis", "wind blow", "wind boom", "wind capacity", "wind capacity level", "wind counterpart", "wind data", "wind datum", "wind development", "wind electric generato", "wind electric generator", "wind-electric pumping system", "wind electric pumping system", "wind-electric pumping technology", "wind electric pumping technology", "wind energy conference", "wind energy demonstration", "wind energy development", "wind energy equipment", "wind-energy expert", "wind energy expert", "wind energy growth", "wind-energy industry", "wind energy industry", "wind energy p", "wind-energy program", "wind energy program", "wind energy p's", "wind energy technology", "wind energy use", "wind farm", "wind farm portfolio financing", "Wind farms", "wind financing", "wind industry", "wind investment", "wind investor", "wind loan", "wind machine", "wind machine order", "wind machine performance", "wind machine technical improvement", "wind plant", "wind power capacity", "wind power compare", "wind power component", "wind power developer", "wind power development", "wind power financing program", "wind power growth", "wind power industry", "windpower industry", "wind power investment", "wind power loan", "wind power potential", "wind power project", "wind power rebounding", "wind power revival", "wind power shows great promise", "wind powers", "wind power technology", "wind project", "wind resource analyses", "wind resource analysis", "wind resource assessment", "wind resource data", "wind resource datum", "wind resource", "wind rotor blade construction", "wind system", "Wind systems", "wind turbine equipment", "wind turbine performance", "wind turbines effective", "wind turbine siting", "wind turbine system", "wood consumption", "wood distribution", "wood material", "wood materials industry", "wood species", "wood use", "woody crop"]
  }]
};
},{}],"../taggy/data/config.json":[function(require,module,exports) {
module.exports = {
  "use-tagify": "false",
  "use-tagify-comment": "default true | Use Tagify to display tags",
  "use-submit": "true",
  "use-submit-comment": "default false | Use submit button to process input instead of automatic behavior while typing | Only works with defined submitButton",
  "openthesaurus": "false",
  "openthesaurus-comment": "default false | Add call to openthesaurus API to enrich words (experimental)",
  "waittime": 1000,
  "waittime-comment": "default 1000 | Set time to wait for processing after keyboard input",
  "categories": {
    "assign-top": "true",
    "assign-top-comment": "default true | Return top tag (category) if keyword is found. Return the keyword else.",
    "include-top": "false",
    "include-top-comment": "default false | Include top tag (category) as a keyword"
  }
};
},{}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../taggy/lib/index.js":[function(require,module,exports) {
var process = require("process");
"use strict";

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Taggy = void 0;

var wink_tokenizer_1 = __importDefault(require("wink-tokenizer"));

var stopwords_iso_1 = __importDefault(require("stopwords-iso")); // object of stopwords for multiple languages
// import stopwordsDE from de; // german stopwords


var normalize_for_search_1 = __importDefault(require("normalize-for-search"));

var lodash_1 = require("lodash");

require("regenerator-runtime/runtime"); //import synonyms from "germansynonyms";


var tagify_1 = __importDefault(require("@yaireo/tagify")); // import jargon from "@clipperhouse/jargon";
// import stackexchange from "@clipperhouse/jargon/stackexchange"; // a dictionary
// import fs from "fs";
// include wink-nlp (lemmatizing)


var openthesaurus = require("openthesaurus");

var glossarData = require("../data/glossar-energy.json");

var configFile = require("../data/config.json");

var Taggy = /*#__PURE__*/function () {
  /**
   * Create a new instance of taggy
   * @param inputField Input field where user text goes
   * @param outputField Output field where the tags will show up
   * @param submitButton Submit button to trigger processing instead of automatic behavior while typing
   * @param frequencyOutput Show frequency of identified tags
   * @param overrideOutput Show identified top tags with possibility to override default detection
   * @param loaderElement Add a loading indicator (spinner) that gets hidden on completion
   * @param options Optional: Provide options for taggys behaviour
   */
  function Taggy(inputField, outputField, submitButton, frequencyOutput, overrideOutput, loaderElement, options) {
    _classCallCheck(this, Taggy);

    // console.log("TAGGY CONFIG", this.config);
    this.name = "taggy";
    this.mostFrequentWords = [];
    this.mostFrequentTopTags = [];
    this.timeout = null;
    this.config = {
      use_tagify: configFile["use-tagify"] === "true",
      use_tagify_comment: configFile["use-tagify-comment"],
      use_submit: configFile["use-submit"] === "true",
      use_submit_comment: configFile["use-submit-comment"],
      waittime: configFile["waittime"],
      waittime_comment: configFile["waittime-comment"],
      opt_enabled: configFile["openthesaurus"] === "true",
      opt_enabled_comment: configFile["openthesaurus-comment"],
      assign_top: configFile.categories["assign-top"] === "true",
      assign_top_comment: configFile.categories["assign-top-comment"],
      include_top: configFile.categories["include-top"] === "true",
      include_top_comment: configFile.categories["include-top-comment"]
    };
    this.setSubmitButton(submitButton);
    this.setInputField(inputField);
    this.outputField = outputField;
    this.loaderElement = loaderElement; // this.submitButton = submitButton;

    this.winkTokenizer = new wink_tokenizer_1.default();
    this.stopwordsDE = stopwords_iso_1.default.de;
    this.openthesaurus = openthesaurus; // if (this.outputField) this.outputField.setAttribute("readOnly", "true");

    if (this.config.use_tagify) this.createTagify(this.outputField);
    this.frequencyOutput = frequencyOutput; // this.overrideOutput = overrideOutput;

    if (overrideOutput) {
      this.setOverrideOutput(overrideOutput);
      if (this.config.use_tagify) this.createTagifyOverride(overrideOutput);
    }

    console.log("created a new taggy instance");
  }

  _createClass(Taggy, [{
    key: "resetData",
    value: function resetData() {
      this.mostFrequentTopTags = [];
      this.mostFrequentWords = [];
    }
  }, {
    key: "setInputField",
    value: function setInputField(inputField) {
      var _this = this;

      this.inputField = inputField;
      console.log("SET INPUT FIELD");
      console.log("USE_SUBMIT", this.config.use_submit, "BUTTON", this.submitButton);

      if (this.config.use_submit && this.submitButton) {
        return; // fall back to eventlistener when no submitbutton specified
      } else {
        this.inputField.addEventListener("input", function (event) {
          _this.handleInputEventListener();
        });
        console.log("taggy", "input field and handler set", this.inputField);
      }
    }
  }, {
    key: "setSubmitButton",
    value: function setSubmitButton(submitButton) {
      var _this2 = this;

      console.log("SET SUBMIT BUTTON");
      this.submitButton = submitButton;
      this.submitButton.addEventListener("click", function (event) {
        console.log("SUBMIT BUTTON CLICKED");

        if (_this2.config.use_submit) {
          _this2.handleSubmitButtonEventListener();
        }
      });
      console.log("taggy", "submit button and handler set", this.submitButton);
    }
  }, {
    key: "handleInputEventListener",
    value: function handleInputEventListener() {
      var _this3 = this;

      console.log("INSIDE EVENT LISTENER");

      if (this.config.use_submit) {
        console.log("but doing nothing");
        return;
      } // console.log("WAITTIME", this.config.waittime);
      // this.outputField.style.backgroundColor = "#f2f102";


      this.loaderElement.style.setProperty("display", "block");
      if (this.outputField.lastChild) this.outputField.removeChild(this.outputField.lastChild);

      if (this.tagify) {
        this.tagify.DOM.scope.style.setProperty("--tags-border-color", "#ef4d60");
        this.tagify.DOM.scope.style.setProperty("background", "#f2f102");
      }

      clearTimeout(this.timeout); // make a new timeout set to go off in 1000ms

      this.timeout = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this3.processAndAddTags(_this3.inputField.value, _this3.outputField);

              case 2:
                // this.outputField.style.backgroundColor = "#ffffff";
                _this3.loaderElement.style.setProperty("display", "none");

                if (_this3.tagify) {
                  _this3.tagify.DOM.scope.style.setProperty("--tags-border-color", "#b3d4fc");

                  _this3.tagify.DOM.scope.style.setProperty("background", "#ffffff");
                } // this.addTags(result);


              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })), this.config.waittime);
    }
  }, {
    key: "handleSubmitButtonEventListener",
    value: function () {
      var _handleSubmitButtonEventListener = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                console.log("INSIDE EVENT LISTENER");
                _context2.next = 3;
                return this.processAndAddTags(this.inputField.value, this.outputField);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function handleSubmitButtonEventListener() {
        return _handleSubmitButtonEventListener.apply(this, arguments);
      }

      return handleSubmitButtonEventListener;
    }()
  }, {
    key: "setOutputField",
    value: function setOutputField(outputField) {
      // outputField.setAttribute("value", "");
      outputField.readOnly = true;
      outputField.value = "";
      this.outputField = outputField;
      console.log("taggy", "output field set");
    }
  }, {
    key: "setFrequencyOutput",
    value: function setFrequencyOutput(frequencyOutput) {
      this.frequencyOutput = frequencyOutput;
    }
  }, {
    key: "setOverrideOutput",
    value: function setOverrideOutput(overrideOutput) {
      var _this4 = this;

      this.overrideOutput = overrideOutput;
      this.overrideOutput.addEventListener("click", function (event) {
        _this4.handleOverrideOutputEventListener(event);
      });
      console.log("taggy", "Override field and handler set", this.overrideOutput);
    }
  }, {
    key: "handleOverrideOutputEventListener",
    value: function handleOverrideOutputEventListener(event) {
      console.log("INSIDE EVENT LISTENER | OVERRIDE");
      var target = event.target;
      if (target) console.log(target.innerHTML);
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      return this.config;
    }
  }, {
    key: "getGlossar",
    value: function getGlossar() {
      return glossarData;
    }
  }, {
    key: "setOption",
    value: function setOption(option, value) {
      console.log("setting", option, "to", value);

      if (option == "use_tagify") {
        this.config.use_tagify = value;
      }

      if (option == "use_submit") {
        console.log("USE_SUBMIT OPTION", value);
        this.config.use_submit = value;

        if (value) {
          // this.handleSubmitButtonEventListener();
          this.setSubmitButton(this.submitButton);
          console.log(this.inputField); // remove all event listeners from element
          // this.inputField.replaceWith(this.inputField.cloneNode(true));

          this.setInputField(this.inputField); // this.inputField.removeEventListener("input", (event) => {
          //   this.handleInputEventListener();
          // });
        } else {
          this.setInputField(this.inputField); // this.submitButton.replaceWith(this.submitButton.cloneNode(true));
          // this.handleInputEventListener();
        }
      }

      if (option == "assign_top") {
        this.config.assign_top = value;
      }

      if (option == "opt_enabled") {
        this.config.opt_enabled = value;
      }

      if (option == "include_top") {
        this.config.include_top = value;
      }
    }
  }, {
    key: "getMostFrequentWords",
    value: function getMostFrequentWords() {
      console.log("most frequent called", this.mostFrequentWords);
      return this.mostFrequentWords;
    }
  }, {
    key: "createTagify",
    value: function createTagify(inputElement) {
      if (this.config.use_tagify && !this.tagify) {
        this.tagify = new tagify_1.default(inputElement, {
          userInput: false,
          editTags: false,
          transformTag: this.transformTagifyTag
        });
        this.tagify.setReadonly(true); // this.tagify.DOM.scope.style.setProperty("--tag-bg", "#bee3f8");
        // this.tagify.DOM.scope.style.setProperty("--tag-text-color", "#2b6cb0");
        // this.tagify.DOM.scope.style.setProperty("--tag-border-radius", "12px");
        // this.tagify.DOM.scope.style.setProperty("--tag-pad", "0.6em");

        this.tagify.DOM.scope.style.setProperty("--readonly-striped", "0");
      }

      return this.tagify;
    }
  }, {
    key: "transformTagifyTag",
    value: function transformTagifyTag(tagData) {
      var randomColor = getRandomColor();
      tagData.color = randomColor;
      console.log("randomColor", randomColor);
      tagData.style = "--tag-bg:" + tagData.color + ";" + "--tag-border-radius: 20px";

      function getRandomColor() {
        function rand(min, max) {
          return min + Math.random() * (max - min);
        }

        var h = rand(1, 360) | 0,
            s = rand(40, 70) | 0,
            l = rand(65, 72) | 0;
        return "hsl(" + h + "," + s + "%," + l + "%)";
      }
    }
  }, {
    key: "createTagifyOverride",
    value: function createTagifyOverride(inputElement) {
      var _this5 = this;

      if (this.config.use_tagify) {
        if (!this.tagifyOverride) {
          this.tagifyOverride = new tagify_1.default(this.overrideOutput, {
            userInput: false,
            transformTag: this.transformTagifyTag
          });
          this.tagifyOverride.DOM.scope.style.setProperty("border", "none");
        }

        this.tagifyOverride.on("click", function (e) {
          console.log(e.detail.data.value);

          _this5.addTags(e.detail.data.value);
        });
      }
    }
  }, {
    key: "callOpenThesaurusAPI",
    value: function () {
      var _callOpenThesaurusAPI = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(inputArray) {
        var _this6 = this;

        var returnSet, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, word;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                returnSet = []; // get synsets from openthesaurus?

                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _context3.prev = 3;
                _iterator = _asyncIterator(inputArray);

              case 5:
                _context3.next = 7;
                return _iterator.next();

              case 7:
                _step = _context3.sent;
                _iteratorNormalCompletion = _step.done;
                _context3.next = 11;
                return _step.value;

              case 11:
                _value = _context3.sent;

                if (_iteratorNormalCompletion) {
                  _context3.next = 20;
                  break;
                }

                word = _value;
                console.log("CALLING OPENTHESAURUS API");
                _context3.next = 17;
                return this.openthesaurus.get(word).then(function (response) {
                  var _response$synsets$;

                  console.log(response);
                  var optValues = []; // response.baseforms?

                  if (response && ((_response$synsets$ = response.synsets[0]) === null || _response$synsets$ === void 0 ? void 0 : _response$synsets$.terms)) {
                    var _response$synsets$2;

                    console.log((_response$synsets$2 = response.synsets[0]) === null || _response$synsets$2 === void 0 ? void 0 : _response$synsets$2.terms);
                    response.synsets[0].terms.forEach(function (term) {
                      optValues.push(normalize_for_search_1.default(term.term));
                    });
                  }

                  returnSet = _this6.tokenize(_this6.filterStopWords(optValues).toString());
                });

              case 17:
                _iteratorNormalCompletion = true;
                _context3.next = 5;
                break;

              case 20:
                _context3.next = 26;
                break;

              case 22:
                _context3.prev = 22;
                _context3.t0 = _context3["catch"](3);
                _didIteratorError = true;
                _iteratorError = _context3.t0;

              case 26:
                _context3.prev = 26;
                _context3.prev = 27;

                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {
                  _context3.next = 31;
                  break;
                }

                _context3.next = 31;
                return _iterator.return();

              case 31:
                _context3.prev = 31;

                if (!_didIteratorError) {
                  _context3.next = 34;
                  break;
                }

                throw _iteratorError;

              case 34:
                return _context3.finish(31);

              case 35:
                return _context3.finish(26);

              case 36:
                return _context3.abrupt("return", returnSet);

              case 37:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[3, 22, 26, 36], [27,, 31, 35]]);
      }));

      function callOpenThesaurusAPI(_x) {
        return _callOpenThesaurusAPI.apply(this, arguments);
      }

      return callOpenThesaurusAPI;
    }()
  }, {
    key: "process",
    value: function () {
      var _process = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(input) {
        var processedInput;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.outputField.setAttribute("value", "");
                console.log("loaderElement", this.loaderElement);
                _context4.next = 4;
                return this.processInput(input);

              case 4:
                processedInput = _context4.sent;
                this.loaderElement.style.setProperty("display", "none");
                console.log("processedinput", processedInput[0]);
                processedInput[0] = processedInput[0] ? processedInput[0] : "";
                this.outputField.setAttribute("value", processedInput[0]);
                return _context4.abrupt("return", processedInput);

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function process(_x2) {
        return _process.apply(this, arguments);
      }

      return process;
    }()
  }, {
    key: "processAndAddTags",
    value: function () {
      var _processAndAddTags = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(input, outputField) {
        var processedInput;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (this.loaderElement) this.loaderElement.style.setProperty("display", "block");
                _context5.next = 3;
                return this.processInput(input);

              case 3:
                processedInput = _context5.sent;
                if (this.loaderElement) this.loaderElement.style.setProperty("display", "none");
                this.addTags(processedInput[0]);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function processAndAddTags(_x3, _x4) {
        return _processAndAddTags.apply(this, arguments);
      }

      return processAndAddTags;
    }()
  }, {
    key: "addTags",
    value: function addTags(input) {
      if (this.outputField.lastChild) this.outputField.removeChild(this.outputField.lastChild);
      console.log("addtag", input);

      if (this.config.use_tagify) {
        if (!this.tagify) this.createTagify(this.outputField);
        if (!this.tagifyOverride) this.createTagifyOverride(this.overrideOutput);
        this.tagify.removeAllTags();
        this.tagifyOverride.removeAllTags();
      }

      if (input && input != "") {
        // set main tag for tagify
        if (this.config.use_tagify) {
          this.tagify.addTags(input);
        } else {
          this.outputField.setAttribute("value", input);
          this.outputField.value = input;
          console.log("field", this.outputField);
          var taggyTag = document.createElement("div"); // taggyTag.classList.add("taggy-tag");

          taggyTag.id = "taggy-tag";
          taggyTag.innerText = input;
          this.outputField.appendChild(taggyTag);
        } // set override tags


        if (this.overrideOutput && this.mostFrequentTopTags) {
          this.addOverrideOutput();
        } // set most frequent words


        this.addFrequencyOutput();
      }
    }
  }, {
    key: "addFrequencyOutput",
    value: function addFrequencyOutput() {
      var _this$getMostFrequent;

      this.frequencyOutput.innerHTML = "Word(s) with most Occurencies: " + ((_this$getMostFrequent = this.getMostFrequentWords()) === null || _this$getMostFrequent === void 0 ? void 0 : _this$getMostFrequent.join(", "));
    }
  }, {
    key: "addOverrideOutput",
    value: function addOverrideOutput() {
      var topTags = [];
      Object.values(this.mostFrequentTopTags).forEach(function (element) {
        return (// topTags.push(element.category + " (" + element.count + ")")
          topTags.push(element.category)
        );
      });

      if (this.overrideOutput) {
        if (this.config.use_tagify && this.tagifyOverride) {
          // this.overrideOutput.innerHTML =
          //   "Top detected categories: " + topTags.join(", ");
          this.tagifyOverride.addTags(topTags);
        } else {
          this.overrideOutput.value = topTags.join(", ");
        }
      }
    }
  }, {
    key: "deleteTags",
    value: function deleteTags() {
      console.log("called deleteTags");
      this.tagify.removeTags();
      this.tagifyOverride.removeAllTags();
    }
  }, {
    key: "tokenize",
    value: function tokenize(input) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "word";
      var tokenizedItems = this.winkTokenizer.tokenize(input);
      var returnSet = [];
      var tokenizedWords = tokenizedItems.filter(function (item) {
        return item.tag === type;
      });
      tokenizedWords.forEach(function (element) {
        returnSet.push(element.value);
      });
      return returnSet;
    }
  }, {
    key: "normalize",
    value: function normalize(inputArray) {
      var normalizedValues = [];

      var _iterator2 = _createForOfIteratorHelper(inputArray),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var element = _step2.value;
          normalizedValues.push(normalize_for_search_1.default(element));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return normalizedValues;
    }
  }, {
    key: "filterStopWords",
    value: function filterStopWords(inputArray) {
      var _this7 = this;

      return inputArray.filter(function (item) {
        return !_this7.stopwordsDE.includes(item.value);
      });
    }
  }, {
    key: "processInput",
    value: function () {
      var _processInput = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(input) {
        var _this8 = this;

        var tokenizedValues, enrichedInputValues, glossarTags, combinedWordsReturnSet, _iterator3, _step3, category, _iterator5, _step5, word, matchArray, _iterator6, _step6, match, returnValues, _i, _glossarTags, glossarValue, _iterator4, _step4, inputValue, finalSet, topTagCount, maxCount, count, groupedMostFrequentTopTags, finalValue, topTags, tempValue;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                console.log("called processinput");
                this.resetData(); // tokenize,filter out german stopword and normalize input (remove umlaute and transform to lowercase)

                tokenizedValues = this.normalize(this.filterStopWords(this.tokenize(input, "word")));
                console.log("tokenized and normalized values", tokenizedValues); // return if input is too small

                if (!(tokenizedValues.length < 2)) {
                  _context6.next = 6;
                  break;
                }

                return _context6.abrupt("return", []);

              case 6:
                enrichedInputValues = []; // don't call openthesaurus-API too often (-> results in too many requests error)

                if (!(this.config.opt_enabled && tokenizedValues.length < 20)) {
                  _context6.next = 11;
                  break;
                }

                _context6.next = 10;
                return this.callOpenThesaurusAPI(tokenizedValues);

              case 10:
                enrichedInputValues = _context6.sent;

              case 11:
                // flat out arrays
                enrichedInputValues = enrichedInputValues.flat().concat(tokenizedValues.flat());
                console.log("NORMALIZED/ENRICHED INPUTVALUES", enrichedInputValues);
                glossarTags = [];
                combinedWordsReturnSet = []; // if INCLUDE-TOP is set -> add top tag

                _iterator3 = _createForOfIteratorHelper(glossarData.tags);

                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    category = _step3.value;

                    if (this.config.include_top) {
                      console.log("INCLUDE TOP IS SET");
                      console.log(category);
                      glossarTags.push(normalize_for_search_1.default(category.name));
                    }

                    _iterator5 = _createForOfIteratorHelper(category.words);

                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                        word = _step5.value;
                        glossarTags.push(normalize_for_search_1.default(word)); // check input for "whitespace-words"

                        if (word.includes(" ")) {
                          if (normalize_for_search_1.default(input).includes(word)) {
                            matchArray = normalize_for_search_1.default(input).matchAll(word);
                            _iterator6 = _createForOfIteratorHelper(matchArray);

                            try {
                              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                                match = _step6.value;
                                combinedWordsReturnSet.push(match[0]);
                                console.log(match[0]);
                                console.log("whitespace-word match added", match[0]);
                              }
                            } catch (err) {
                              _iterator6.e(err);
                            } finally {
                              _iterator6.f();
                            }
                          }
                        }
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }

                console.log("WORDS IN GLOSSAR", glossarTags);
                console.log("ENRICHED INPUTVALUES", enrichedInputValues);
                returnValues = []; // look for matches in glossar

                for (_i = 0, _glossarTags = glossarTags; _i < _glossarTags.length; _i++) {
                  glossarValue = _glossarTags[_i];
                  _iterator4 = _createForOfIteratorHelper(enrichedInputValues);

                  try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                      inputValue = _step4.value;

                      if (inputValue == glossarValue) {
                        console.log("MATCH FOR", inputValue);
                        returnValues.push(inputValue);
                      }
                    }
                  } catch (err) {
                    _iterator4.e(err);
                  } finally {
                    _iterator4.f();
                  }
                }

                console.log("COMBINEDWORDSRETURNSET", combinedWordsReturnSet);
                console.log("RETURN VALUES", returnValues);
                finalSet = [].concat(combinedWordsReturnSet).concat(returnValues);
                console.log("FINAL SET", finalSet);
                topTagCount = [];
                maxCount = 0; // if ASSIGN_TOP is set -> return top categegory

                if (this.config.assign_top) {
                  count = 0; // if INCLUDE_TOP ist set -> add top categories

                  glossarData.tags.forEach(function (category) {
                    console.log("CATEGORY", category);
                    count = 0;
                    finalSet.forEach(function (element) {
                      // if INCLUDE_TOP ist set -> add top categories
                      if (normalize_for_search_1.default(category.name) == element) {
                        count += 1;
                      }

                      if (_this8.normalize(category.words).includes(element)) {
                        count += 1;
                      }
                    });
                    topTagCount.push({
                      category: category.name,
                      count: count
                    });
                    if (count > maxCount) maxCount = count;
                  });
                  console.log("TOPCATFREQ", topTagCount); // console.log("SORTBY", sortBy(topTagCount, ["category", "count"]));
                  // set most frequent top tags

                  groupedMostFrequentTopTags = lodash_1.groupBy(topTagCount, "count");

                  if (groupedMostFrequentTopTags[maxCount][0].count) {
                    this.mostFrequentTopTags = groupedMostFrequentTopTags[maxCount];
                  }
                } // set most frequent matches


                this.mostFrequentWords = modeArray(finalSet);
                finalValue = lodash_1.sample(this.mostFrequentWords);
                console.log("MOSTFREQUENT TOP TAGS", this.mostFrequentTopTags); // if ASSIGN_TOP is set -> return top categegory

                if (this.config.assign_top) {
                  topTags = [];
                  Object.values(this.mostFrequentTopTags).forEach(function (element) {
                    if (element.count) topTags.push(element.category);
                  });
                  console.log("topTAGS", topTags);
                  tempValue = lodash_1.sample(topTags);
                  if (tempValue) finalValue = tempValue;
                }

                return _context6.abrupt("return", finalValue ? [finalValue] : [""]);

              case 33:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function processInput(_x5) {
        return _processInput.apply(this, arguments);
      }

      return processInput;
    }()
  }]);

  return Taggy;
}();

exports.Taggy = Taggy;

function enrichWithOpenThesaurus(inputArray) {
  var enrichedArray = [];

  var _iterator7 = _createForOfIteratorHelper(inputArray),
      _step7;

  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var word = _step7.value;
      // get baseforms from openthesaurus?
      openthesaurus.get(word).then(function (response) {
        if (response && response.baseforms) {
          console.log(response.baseforms);
          enrichedArray.push(response.baseforms);
        } // get baseforms from openthesaurus?

      });
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  return enrichedArray;
} // return an array of mode element(s) -> highest occurrences


function modeArray(array) {
  if (array.length == 0) return null;
  var modeMap = {},
      maxCount = 1,
      modes = [];

  for (var i = 0; i < array.length; i++) {
    var el = array[i];
    if (modeMap[el] == null) modeMap[el] = 1;else modeMap[el]++;

    if (modeMap[el] > maxCount) {
      modes = [el];
      maxCount = modeMap[el];
    } else if (modeMap[el] == maxCount) {
      modes.push(el);
      maxCount = modeMap[el];
    }
  }

  return modes;
}
},{"wink-tokenizer":"../taggy/node_modules/wink-tokenizer/src/wink-tokenizer.js","stopwords-iso":"../taggy/node_modules/stopwords-iso/stopwords-iso.json","normalize-for-search":"../taggy/node_modules/normalize-for-search/src/normalize.js","lodash":"../taggy/node_modules/lodash/lodash.js","regenerator-runtime/runtime":"../taggy/node_modules/regenerator-runtime/runtime.js","@yaireo/tagify":"../taggy/node_modules/@yaireo/tagify/dist/tagify.min.js","openthesaurus":"../taggy/node_modules/openthesaurus/dist/index.js","../data/glossar-energy.json":"../taggy/data/glossar-energy.json","../data/config.json":"../taggy/data/config.json","process":"node_modules/process/browser.js"}],"js/main.js":[function(require,module,exports) {
"use strict";

var _index = require("../../taggy/lib/index");

jQuery(function () {
  // create instance of taggy
  // let taggyObject = new Taggy();
  // set input field for taggy
  var inputFieldForTaggy = document.getElementById("taggyInput"); // taggyObject.setInputField(inputFieldForTaggy);
  // console.log(inputFieldForTaggy);
  // // set output field for taggy

  var outputFieldForTaggy = document.getElementById("taggyOutput"); // taggyObject.setOutputField(outputFieldForTaggy);
  // console.log(outputFieldForTaggy);
  // set submit button taggy (optional)

  var submitButton = document.getElementById("taggySubmit"); // get element for word count output (optional)

  var frequencySpan = document.getElementById("frequency"); // get element for word count output (optional)

  var overrideSpan = document.getElementById("override"); // get loader element (optional)

  var loaderDiv = document.getElementById("taggyLoader"); // create taggy instance

  var taggyObject = new _index.Taggy(inputFieldForTaggy, outputFieldForTaggy, submitButton, frequencySpan, overrideSpan, loaderDiv); // console.log(taggyObject.config);

  var taggyConfig = Object.keys(taggyObject.config);
  console.log("CONFIG", taggyConfig); // create glossar visualization

  var taggyGlossar = taggyObject.getGlossar();
  console.log(taggyGlossar);

  if (!$.isEmptyObject(taggyGlossar)) {
    $("<div></div>").attr("id", "container-right").insertAfter("#container-left");
    $("#container-right").append($("<div></div>").attr("id", "glossar").append($("<h3></h3>").text("Glossar")));
    var glossarData = JSON.stringify(taggyGlossar, null, 2); // spacing level = 2

    $("#glossar").append($("<pre></pre>").text(glossarData)); // $.each(taggyGlossar, function (index, value) {});
  } // create options visualization


  $.each(taggyConfig, function (index, value) {
    var labelText = " " + value;
    var nextElement = $(taggyConfig).eq(index + 1);
    var commentText = null;

    if (nextElement[0] && nextElement[0].includes("comment")) {
      commentText = taggyObject.config[nextElement[0]];
    }

    if (!value.includes("comment")) {
      var checkbox = $("#container-options").append($("<input></input>").attr("type", "checkbox").attr("id", value).val(value)).append($("<label></label>").text(labelText));

      if (commentText) {
        checkbox.append($("<span></span>").addClass("comment").text(commentText));
      }

      checkbox.append("</br>");

      if (taggyObject.config[value]) {
        $("#" + value).prop("checked", true);
      }
    }
  });
  $('input[type="checkbox"]').click(function () {
    if ($(this).prop("checked") == true) {
      taggyObject.setOption($(this).val(), true);
    } else {
      taggyObject.setOption($(this).val(), false);
    }
  }); // loading animation
  // let loader = document.getElementById("loader");
  // let timeout = null;
});
},{"../../taggy/lib/index":"../taggy/lib/index.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "45953" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","js/main.js"], null)
//# sourceMappingURL=/main.fb6bbcaf.js.map